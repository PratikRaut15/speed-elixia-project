<?php
if (!isset($RELATIVE_PATH_DOTS) || trim($RELATIVE_PATH_DOTS) == "") {
	$RELATIVE_PATH_DOTS = "../../";
}
require_once $RELATIVE_PATH_DOTS . 'lib/system/utilities.php';
require_once $RELATIVE_PATH_DOTS . 'lib/autoload.php';
class RouteManager extends VersionedManager {
	function __construct($customerno) {
		// Constructor.
		parent::__construct($customerno);
	}

	public function PrepareSP($sp_name, $sp_params) {
		return "call " . $sp_name . "(" . $sp_params . ");";
	}

	public function get_all_routes($objRoute = NULL) {
		$routes = Array();
		$routeWhereCondn = "";
		if (isset($objRoute)) {
			$routeid = $objRoute->routeid;
			$routeWhereCondn = " AND routeid = " . $routeid;
		}
		$Query = "SELECT * FROM route where customerno=%d AND isdeleted=0 " . $routeWhereCondn . " ORDER BY routename";
		$routesQuery = sprintf($Query, $this->_Customerno);
		//echo"Route query is: ".$routesQuery; exit();
		$this->_databaseManager->executeQuery($routesQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$route = new VORoute();
				$route->routeid = $row['routeid'];
				$route->routename = $row['routename'];
				$route->routeTat = $row['routeTat'];
				$routes[] = $route;
			}
			return $routes;
		}
		return null;
	}

	public function get_all_routes_enh() {
		$routes = Array();
		$Query = "SELECT * FROM `route` INNER JOIN routeman ON  route.routeid = routeman.routeid
            where route.customerno=%d AND route.isdeleted=0 AND routeman.distance= 0 AND routeman.timetaken <> '' AND routeman.isdeleted=0  ORDER BY route.routename";
		$routesQuery = sprintf($Query, $this->_Customerno);
		$this->_databaseManager->executeQuery($routesQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$route = new VORoute();
				$route->routeid = $row['routeid'];
				$route->routename = $row['routename'];
				$routes[] = $route;
			}
			return $routes;
		}
		return null;
	}

	public function getchksforroute($routeid) {
		$checkpoints = Array();
		//$Query = "select * from routeman where routeid=%s AND customerno=%d AND isdeleted=0 ORDER BY sequence ASC";
		$Query = "select * from checkpoint
            INNER JOIN routeman ON routeman.checkpointid = checkpoint.checkpointid
            where routeman.routeid=%s AND routeman.customerno=%s AND checkpoint.customerno=%s AND checkpoint.isdeleted=0 AND routeman.isdeleted=0 ORDER BY routeman.sequence ASC";
		$checkpointsQuery = sprintf($Query, Sanitise::Long($routeid), $this->_Customerno, $this->_Customerno);
		$this->_databaseManager->executeQuery($checkpointsQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$checkpoint = new VORoute();
				$checkpoint->routeid = $row['routeid'];
				$checkpoint->checkpointid = $row['checkpointid'];
				$checkpoint->sequence = $row['sequence'];
				$checkpoint->cname = $row['cname'];
				$checkpoint->eta = (isset($row['eta']) && $row['eta'] != '00:00:00') ? date('H:i', strtotime($row['eta'])) : '';
				$checkpoint->etd = (isset($row['etd']) && $row['etd'] != '00:00:00') ? date('H:i', strtotime($row['etd'])) : '';
				$checkpoint->r_eta = (isset($row['r_eta']) && $row['r_eta'] != '00:00:00') ? date('H:i', strtotime($row['r_eta'])) : '';
				$checkpoint->r_etd = (isset($row['r_etd']) && $row['r_etd'] != '00:00:00') ? date('H:i', strtotime($row['r_etd'])) : '';
				$checkpoints[] = $checkpoint;
			}
			return $checkpoints;
		}
		return NULL;
	}

	public function getchksforroute_enh($routeid) {
		$checkpoints = Array();
		//$Query = "select * from routeman where routeid=%s AND customerno=%d AND isdeleted=0 ORDER BY sequence ASC";
		$Query = "select *, routeman.distance,routeman.timetaken from checkpoint
            INNER JOIN routeman ON routeman.checkpointid = checkpoint.checkpointid
            where routeman.routeid=%s AND routeman.customerno=%s AND checkpoint.customerno=%s AND checkpoint.isdeleted=0 AND routeman.isdeleted=0 ORDER BY routeman.sequence ASC";
		$checkpointsQuery = sprintf($Query, Sanitise::Long($routeid), $this->_Customerno, $this->_Customerno);
		$this->_databaseManager->executeQuery($checkpointsQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$checkpoint = new VORoute();
				$checkpoint->checkpointid = $row['checkpointid'];
				$checkpoint->sequence = $row['sequence'];
				$checkpoint->cname = $row['cname'];
				$checkpoint->timetaken = $row['timetaken'];
				$checkpoint->distance = $row['distance'];
				$checkpoint->cgeolat = $row['cgeolat'];
				$checkpoint->cgeolong = $row['cgeolong'];
				$checkpoints[] = $checkpoint;
			}
			return $checkpoints;
		}
		return NULL;
	}

	public function getchknameforroute($chkid) {
		$Query = "select * from checkpoint where checkpointid=%s AND customerno=%s AND isdeleted=0";
		$checkpointsQuery = sprintf($Query, Sanitise::Long($chkid), $this->_Customerno);
		$this->_databaseManager->executeQuery($checkpointsQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$checkpoint = new VORoute();
				//$checkpoint->checkpointid = $row['checkpointid'];
				$checkpoint->cname = $row['cname'];
				//$checkpoint->vehicleid = $row['vehicleid'];
			}
			return $checkpoint->cname;
		}
		return NULL;
	}

	public function getchkcradforroute($chkid) {
		$Query = "select * from checkpoint where checkpointid=%s AND customerno=%s AND isdeleted=0";
		$checkpointsQuery = sprintf($Query, Sanitise::Long($chkid), $this->_Customerno);
		$this->_databaseManager->executeQuery($checkpointsQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$checkpoint = new VORoute();
				//$checkpoint->checkpointid = $row['checkpointid'];
				$checkpoint->crad = $row['crad'];
				//$checkpoint->vehicleid = $row['vehicleid'];
			}
			return $checkpoint->crad;
		}
		return NULL;
	}

	public function getchketa($chkid, $seq) {
		$Query = "select timetaken from routeman where checkpointid=%s AND customerno=%s  AND isdeleted=0";
		$checkpointsQuery = sprintf($Query, Sanitise::Long($chkid), $this->_Customerno);
		$this->_databaseManager->executeQuery($checkpointsQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$checkpoint = new VORoute();
				//$checkpoint->checkpointid = $row['checkpointid'];
				$checkpoint->timetaken = $row['timetaken'];
				//$checkpoint->vehicleid = $row['vehicleid'];
			}
			return $checkpoint->timetaken;
		}
		return NULL;
	}

	public function getSeq($chkid) {
		$Query = "select sequence from routeman where checkpointid=%s AND customerno=%s AND isdeleted=0";
		$checkpointsQuery = sprintf($Query, Sanitise::Long($chkid), $this->_Customerno);
		$this->_databaseManager->executeQuery($checkpointsQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$checkpoint = new VORoute();
				//$checkpoint->checkpointid = $row['checkpointid'];
				$checkpoint->sequence = $row['sequence'];
				//$checkpoint->vehicleid = $row['vehicleid'];
			}
			return $checkpoint->sequence;
		}
		return NULL;
	}

	public function getvehiclesforroute($routeid) {
		$vehicles = Array();
		if (isset($_SESSION['ecodeid'])) {
			$Query = "select * from vehiclerouteman, ecodeman where vehiclerouteman.routeid=%s AND vehiclerouteman.customerno=%d AND ecodeman.ecodeid=%d
                AND vehiclerouteman.vehicleid=ecodeman.vehicleid AND vehiclerouteman.isdeleted=0";
			$checkpointsQuery = sprintf($Query, Sanitise::Long($routeid), $this->_Customerno, $_SESSION['e_id']);
		} else {
			$Query = "select * from vehiclerouteman where routeid=%s AND customerno=%d AND isdeleted=0";
			$checkpointsQuery = sprintf($Query, Sanitise::Long($routeid), $this->_Customerno);
		}
		$this->_databaseManager->executeQuery($checkpointsQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$vehicle = new VORoute();
				$vehicle->vehicleid = $row['vehicleid'];
				//$vehicle->sequence = $row['routeid'];
				$vehicles[] = $vehicle;
			}
			return $vehicles;
		}
		return NULL;
	}

	public function getvehiclenoforroute($vehicleid) {
		$Query = "select * from vehicle where vehicleid=%s AND customerno=%s AND isdeleted=0";
		$vehiclesQuery = sprintf($Query, Sanitise::Long($vehicleid), $this->_Customerno);
		$this->_databaseManager->executeQuery($vehiclesQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$vehicle = new VORoute();
				//$checkpoint->checkpointid = $row['checkpointid'];
				$vehicle->vehicleno = $row['vehicleno'];
				//$checkpoint->vehicleid = $row['vehicleid'];
			}
			return $vehicle->vehicleno;
		}
		return NULL;
	}

	public function get_all_checkpointid_forroute($routeid) {
		$Routes = Array();
		$Query = "SELECT * FROM `routeman` where customerno=%d AND routeid=%d AND routeman.isdeleted=0 ORDER BY `sequence` ASC ";
		$RoutesQuery = sprintf($Query, $this->_Customerno, $routeid);
		$this->_databaseManager->executeQuery($RoutesQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$Route = new VORoute();
				$Route->routeid = $row['routeid'];
				$Route->checkpointid = $row['checkpointid'];
				$Routes[] = $Route;
			}
			return $Routes;
		}
		return null;
	}

	public function add_Route($routename, $routearray, $vehiclearray, $userid, $chkDetails, $routeTat, $routeType = null) {
		$Query = "INSERT INTO route (routename,customerno,userid,isdeleted,timestamp, routeTat, routeType) VALUES ('%s','%d','%d','0','%s',%d,%d)";
		$date = new Date();
		$todays = $date->MySQLNow();
		$SQL = sprintf($Query, Sanitise::String($routename), $this->_Customerno, Sanitise::Long($userid), Sanitise::DateTime($todays), Sanitise::Long($routeTat), Sanitise::Long($routeType));
		$this->_databaseManager->executeQuery($SQL);
		$routeid = $this->_databaseManager->get_insertedId();
		$Query = "INSERT INTO routeman (`routeid`,`checkpointid`,`sequence`,`customerno`,`userid`,`isdeleted`,`timestamp`) VALUES (%d,'%d','%d','%d','%d','0','%s')";
		$date = new Date();
		$today = $date->MySQLNow();
		//echo $routearrays = $routearray;
		$theArray = explode(",", $routearray);
		$listingCounter = 1;
		foreach ($theArray as $checkpointid) {
			if ($checkpointid != '') {
				$SQL = sprintf($Query, Sanitise::Long($routeid), Sanitise::Long($checkpointid), Sanitise::Long($listingCounter), $this->_Customerno, Sanitise::Long($userid), Sanitise::DateTime($today));
				$this->_databaseManager->executeQuery($SQL);
				$listingCounter = $listingCounter + 1;
			}
		}
		if (isset($chkDetails) && !empty($chkDetails)) {
			$updateQuery = "UPDATE routeman SET eta='%s',etd='%s',r_eta='%s',r_etd='%s' WHERE routeid=%d AND checkpointid=%d AND customerno=%d AND isdeleted=0";
			foreach ($chkDetails as $data) {
				$data[2] = date(speedConstants::TIME_Hi, strtotime($data[2]));
				$data[3] = date(speedConstants::TIME_Hi, strtotime($data[3]));
				$data[4] = date(speedConstants::TIME_Hi, strtotime($data[4]));
				$data[5] = date(speedConstants::TIME_Hi, strtotime($data[5]));
				$updateSql = sprintf($updateQuery, $data['2'], $data['3'], $data['4'], $data['5'], Sanitise::Long($routeid), $data['0'], $this->_Customerno);
				$this->_databaseManager->executeQuery($updateSql);
			}
		}
		$date = new Date();
		$todayss = $date->MySQLNow();
		//echo $routearrays = $routearray;
		$vehicleArray = explode(",", $vehiclearray);
		foreach ($vehicleArray as $vehicleid) {
			if ($vehicleid != '') {
				$Query = "DELETE FROM vehiclerouteman WHERE  vehicleid=%d AND customerno=%d";
				$SQL = sprintf($Query, Sanitise::Long($vehicleid), $this->_Customerno);
				$this->_databaseManager->executeQuery($SQL);
				$Query = "INSERT INTO vehiclerouteman (`routeid`,`vehicleid`,`customerno`,`userid`,`isdeleted`,`timestamp`) VALUES (%d,'%d','%d','%d','0','%s')";
				$SQL = sprintf($Query, Sanitise::Long($routeid), Sanitise::Long($vehicleid), $this->_Customerno, Sanitise::Long($userid), Sanitise::DateTime($todayss));
				$this->_databaseManager->executeQuery($SQL);
			}
		}
		//echo $routearrays = $routearray;
		$checkpointarray = explode(",", $routearray);
		$vehiclesArray = explode(",", $vehiclearray);
		foreach ($vehiclesArray as $vehiclesid) {
			if ($vehiclesid != '') {
				foreach ($checkpointarray as $checkpointid) {
					if ($checkpointid != '') {
						$CheckQuery = "SELECT vehicleid FROM `checkpointmanage` WHERE checkpointid=%d AND vehicleid=%d AND customerno=%d AND isdeleted=0";
						$checkpointsQuery = sprintf($CheckQuery, Sanitise::Long($checkpointid), Sanitise::Long($vehiclesid), $this->_Customerno);
						$this->_databaseManager->executeQuery($checkpointsQuery);
						if ($this->_databaseManager->get_rowCount() == 0) {
							$Query = "INSERT INTO checkpointmanage (`checkpointid`,`vehicleid`,`customerno`,`conflictstatus`,`userid`,`isdeleted`) VALUES (%d,'%d','%d','1','%d','0')";
							$SQL = sprintf($Query, Sanitise::Long($checkpointid), Sanitise::Long($vehiclesid), $this->_Customerno, Sanitise::Long($userid));
							$this->_databaseManager->executeQuery($SQL);
						}
					}
				}
			}
		}
	}

	public function add_Route_enh($routename, $routearray, $vehiclearray, $thourarray, $tminarray, $distancearray, $userid) {
		$Query = "INSERT INTO route (routename,customerno,userid,isdeleted,timestamp) VALUES ('%s','%d','%d','0','%s')";
		$date = new Date();
		$todays = $date->MySQLNow();
		$SQL = sprintf($Query, Sanitise::String($routename), $this->_Customerno, Sanitise::Long($userid), Sanitise::DateTime($todays));
		$this->_databaseManager->executeQuery($SQL);
		$route->routeid = $this->_databaseManager->get_insertedId();
		$Query = "INSERT INTO routeman (`routeid`,`checkpointid`,`timetaken`,`distance`,`sequence`,`customerno`,`userid`,`isdeleted`,`timestamp`) VALUES (%d,'%d','%s','%f','%d','%d','%d','0','%s')";
		$date = new Date();
		$today = $date->MySQLNow();
		//$routearrays = $routearray;
		$routeArray = explode(",", $routearray);
		$thourArray = explode(",", $thourarray);
		$tminArray = explode(",", $tminarray);
		$distanceArray = explode(",", $distancearray);
		$route->routeid;
		$listingCounter = 1;
		foreach ($routeArray as $key => $value) {
			$SQL = sprintf($Query, Sanitise::Long($route->routeid), Sanitise::Long($value), Sanitise::String(($thourArray[$key] * 60) + $tminArray[$key]), Sanitise::Float($distanceArray[$key]), Sanitise::Long($listingCounter), $this->_Customerno, Sanitise::Long($userid), Sanitise::DateTime($today));
			$this->_databaseManager->executeQuery($SQL);
			$listingCounter = $listingCounter + 1;
		}
		$Query = "INSERT INTO vehiclerouteman (`routeid`,`vehicleid`,`customerno`,`userid`,`isdeleted`,`timestamp`) VALUES (%d,'%d','%d','%d','0','%s')";
		$date = new Date();
		$todayss = $date->MySQLNow();
		//echo $routearrays = $routearray;
		$vehicleArray = explode(",", $vehiclearray);
		foreach ($vehicleArray as $vehicleid) {
			if ($vehicleid != '') {
				$SQL = sprintf($Query, Sanitise::Long($route->routeid), Sanitise::Long($vehicleid), $this->_Customerno, Sanitise::Long($userid), Sanitise::DateTime($todayss));
				$this->_databaseManager->executeQuery($SQL);
			}
		}
		//echo $routearrays = $routearray;
		$checkpointarray = explode(",", $routearray);
		$vehiclesArray = explode(",", $vehiclearray);
		foreach ($vehiclesArray as $vehiclesid) {
			if ($vehiclesid != '') {
				foreach ($checkpointarray as $checkpointid) {
					if ($checkpointid != '') {
						$CheckQuery = "SELECT vehicleid FROM `checkpointmanage` WHERE checkpointid=%d AND vehicleid=%d AND customerno=%d AND isdeleted=0";
						$checkpointsQuery = sprintf($CheckQuery, Sanitise::Long($checkpointid), Sanitise::Long($vehiclesid), $this->_Customerno);
						$this->_databaseManager->executeQuery($checkpointsQuery);
						if ($this->_databaseManager->get_rowCount() == 0) {
							$Query = "INSERT INTO checkpointmanage (`checkpointid`,`vehicleid`,`customerno`,`conflictstatus`,`userid`,`isdeleted`) VALUES (%d,'%d','%d','1','%d','0')";
							$SQL = sprintf($Query, Sanitise::Long($checkpointid), Sanitise::Long($vehiclesid), $this->_Customerno, Sanitise::Long($userid));
							$this->_databaseManager->executeQuery($SQL);
						}
					}
				}
			}
		}
	}

	public function edit_Route($routeid, $routename, $routearray, $vehiclearray, $userid, $chkDetails, $routeTat = null, $routeType = null) {

		$checkpoint_array = $this->get_all_checkpointid_forroute($routeid);
		$vehicles_Array = $this->getvehiclesforroute($routeid);

		if ($routeTat != "api") {
			$sqlRoute = "UPDATE route SET routename='%s', routeTat=%d,userid=%d,routeType=%d WHERE routeid=%d AND customerno=%d";
			$sqlExe = sprintf($sqlRoute, Sanitise::String($routename), Sanitise::Long($routeTat), Sanitise::Long($userid), Sanitise::Long($routeType), Sanitise::Long($routeid), $this->_Customerno);
			$this->_databaseManager->executeQuery($sqlExe);
		}

		if (is_array($vehicles_Array) && count($vehicles_Array) > 0 && !empty($vehicles_Array)) {
			foreach ($vehicles_Array as $vehicles) {
				if ($vehicles != '') {
					foreach ($checkpoint_array as $checkpoint) {
						if ($checkpoint != '') {
							$CheckQuery = "UPDATE `checkpointmanage` SET isdeleted='1' WHERE checkpointid=%d AND vehicleid=%d AND customerno=%d AND isdeleted=0 LIMIT 1";
							$checkpointsQuery = sprintf($CheckQuery, Sanitise::Long($checkpoint->checkpointid), Sanitise::Long($vehicles->vehicleid), $this->_Customerno);
							$this->_databaseManager->executeQuery($checkpointsQuery);
						}
					}
				}
			}
		}

		$Query = "DELETE FROM routeman WHERE routeid=%d AND customerno=%d";
		$SQL = sprintf($Query, Sanitise::Long($routeid), $this->_Customerno);
		$this->_databaseManager->executeQuery($SQL);
		$Query = "DELETE FROM vehiclerouteman WHERE  routeid=%d AND customerno=%d";
		$SQL = sprintf($Query, Sanitise::Long($routeid), $this->_Customerno);
		$this->_databaseManager->executeQuery($SQL);
		$Query = "INSERT INTO routeman (`routeid`,`checkpointid`,`sequence`,`customerno`,`userid`,`isdeleted`,`timestamp`) VALUES (%d,'%d','%d','%d','%d','0','%s')";
		$date = new Date();
		$today = $date->MySQLNow();
		//echo $routearrays = $routearray;
		$theArray = explode(",", $routearray);
		$listingCounter = 1;
		foreach ($theArray as $checkpointid) {
			if ($checkpointid != '') {
				$SQL = sprintf($Query, Sanitise::Long($routeid), Sanitise::Long($checkpointid), Sanitise::Long($listingCounter), $this->_Customerno, Sanitise::Long($userid), Sanitise::DateTime($today));
				$this->_databaseManager->executeQuery($SQL);
				$listingCounter = $listingCounter + 1;
			}
		}
		if (isset($chkDetails) && !empty($chkDetails)) {
			$updateQuery = "UPDATE routeman SET eta='%s',etd='%s',r_eta='%s',r_etd='%s' WHERE routeid=%d AND checkpointid=%d AND customerno=%d AND isdeleted=0";
			foreach ($chkDetails as $data) {
				$data[2] = ($data[2] != '') ? date(speedConstants::TIME_Hi, strtotime($data[2])) : '00:00:00';
				$data[3] = ($data[3] != '') ? date(speedConstants::TIME_Hi, strtotime($data[3])) : '00:00:00';
				$data[4] = ($data[4] != '') ? date(speedConstants::TIME_Hi, strtotime($data[4])) : '00:00:00';
				$data[5] = ($data[5] != '') ? date(speedConstants::TIME_Hi, strtotime($data[5])) : '00:00:00';
				$updateSql = sprintf($updateQuery, $data['2'], $data['3'], $data['4'], $data['5'], Sanitise::Long($routeid), $data['0'], $this->_Customerno);
				$this->_databaseManager->executeQuery($updateSql);
			}
		}
		$date = new Date();
		$todayss = $date->MySQLNow();
		//echo $routearrays = $routearray;
		$vehicleArray = explode(",", $vehiclearray);
		foreach ($vehicleArray as $vehicleid) {
			if ($vehicleid != '') {
				$Query = "DELETE FROM vehiclerouteman WHERE  vehicleid=%d AND customerno=%d";
				$SQL = sprintf($Query, Sanitise::Long($vehicleid), $this->_Customerno);
				$this->_databaseManager->executeQuery($SQL);
				$Query = "INSERT INTO vehiclerouteman (`routeid`,`vehicleid`,`customerno`,`userid`,`isdeleted`,`timestamp`) VALUES (%d,'%d','%d','%d','0','%s')";
				$SQL = sprintf($Query, Sanitise::Long($routeid), Sanitise::Long($vehicleid), $this->_Customerno, Sanitise::Long($userid), Sanitise::DateTime($todayss));
				$this->_databaseManager->executeQuery($SQL);
			}
		}
		//echo $routearrays = $routearray;
		$checkpointarray = explode(",", $routearray);
		$vehiclesArray = explode(",", $vehiclearray);
		foreach ($vehiclesArray as $vehiclesid) {
			if ($vehiclesid != '') {
				foreach ($checkpointarray as $checkpointid) {
					if ($checkpointid != '') {
						$CheckQuery = "SELECT vehicleid FROM `checkpointmanage` WHERE checkpointid=%d AND vehicleid=%d AND customerno=%d AND isdeleted=0";
						$checkpointsQuery = sprintf($CheckQuery, Sanitise::Long($checkpointid), Sanitise::Long($vehiclesid), $this->_Customerno);
						$this->_databaseManager->executeQuery($checkpointsQuery);
						if ($this->_databaseManager->get_rowCount() == 0) {
							$Query = "INSERT INTO checkpointmanage (`checkpointid`,`vehicleid`,`customerno`,`conflictstatus`,`userid`,`isdeleted`) VALUES (%d,'%d','%d','1','%d','0')";
							$SQL = sprintf($Query, Sanitise::Long($checkpointid), Sanitise::Long($vehiclesid), $this->_Customerno, Sanitise::Long($userid));
							$this->_databaseManager->executeQuery($SQL);
						}
					}
				}
			}
		}
	}

	public function edit_Route_enh($routeid, $routename, $routearray, $vehiclearray, $thourarray, $tminarray, $distancearray, $userid) {
		$checkpoint_array = $this->get_all_checkpointid_forroute($routeid);
		$vehicles_Array = $this->getvehiclesforroute($routeid);
		foreach ($vehicles_Array as $vehicles) {
			if ($vehicles != '') {
				foreach ($checkpoint_array as $checkpoint) {
					if ($checkpoint != '') {
						$CheckQuery = "UPDATE `checkpointmanage` SET isdeleted='1' WHERE checkpointid=%d AND vehicleid=%d AND customerno=%d AND isdeleted=0 LIMIT 1";
						$checkpointsQuery = sprintf($CheckQuery, Sanitise::Long($checkpoint->checkpointid), Sanitise::Long($vehicles->vehicleid), $this->_Customerno);
						$this->_databaseManager->executeQuery($checkpointsQuery);
					}
				}
			}
		}
		$Query = "UPDATE routeman SET isdeleted=1,userid=%d WHERE routeid=%d AND customerno=%d";
		$SQL = sprintf($Query, Sanitise::Long($userid), Sanitise::Long($routeid), $this->_Customerno);
		$this->_databaseManager->executeQuery($SQL);
		$Query = "UPDATE vehiclerouteman SET isdeleted=1,userid=%d WHERE routeid=%d AND customerno=%d";
		$SQL = sprintf($Query, Sanitise::Long($userid), Sanitise::Long($routeid), $this->_Customerno);
		$this->_databaseManager->executeQuery($SQL);
		$Query = "INSERT INTO routeman (`routeid`,`checkpointid`,`timetaken`,`distance`,`sequence`,`customerno`,`userid`,`isdeleted`,`timestamp`) VALUES (%d,'%d','%s','%f','%d','%d','%d','0','%s')";
		$date = new Date();
		$today = $date->MySQLNow();
		//$routearrays = $routearray;
		$routeArray = explode(",", $routearray);
		$thourArray = explode(",", $thourarray);
		$tminArray = explode(",", $tminarray);
		$distanceArray = explode(",", $distancearray);
		$route->routeid;
		$listingCounter = 1;
		foreach ($routeArray as $key => $value) {
			echo $SQL = sprintf($Query, Sanitise::Long($routeid), Sanitise::Long($value), Sanitise::String(($thourArray[$key] * 60) + $tminArray[$key]), Sanitise::Float($distanceArray[$key]), Sanitise::Long($listingCounter), $this->_Customerno, Sanitise::Long($userid), Sanitise::DateTime($today));
			$this->_databaseManager->executeQuery($SQL);
			$listingCounter = $listingCounter + 1;
		}
		$Query = "INSERT INTO vehiclerouteman (`routeid`,`vehicleid`,`customerno`,`userid`,`isdeleted`,`timestamp`) VALUES (%d,'%d','%d','%d','0','%s')";
		$date = new Date();
		$todayss = $date->MySQLNow();
		//echo $routearrays = $routearray;
		$vehicleArray = explode(",", $vehiclearray);
		foreach ($vehicleArray as $vehicleid) {
			if ($vehicleid != '') {
				$SQL = sprintf($Query, Sanitise::Long($routeid), Sanitise::Long($vehicleid), $this->_Customerno, Sanitise::Long($userid), Sanitise::DateTime($todayss));
				$this->_databaseManager->executeQuery($SQL);
			}
		}
		//echo $routearrays = $routearray;
		$checkpointarray = explode(",", $routearray);
		$vehiclesArray = explode(",", $vehiclearray);
		foreach ($vehiclesArray as $vehiclesid) {
			if ($vehiclesid != '') {
				foreach ($checkpointarray as $checkpointid) {
					if ($checkpointid != '') {
//                                $CheckQuery = "SELECT vehicleid FROM `checkpointmanage` WHERE checkpointid=%d AND vehicleid=%d AND customerno=%d AND isdeleted=0";
						//                               $checkpointsQuery = sprintf($CheckQuery, Sanitise::Long($checkpointid), Sanitise::Long($vehiclesid),$this->_Customerno);
						//                              $this->_databaseManager->executeQuery($checkpointsQuery);
						//                             if($this->_databaseManager->get_rowCount() == 0)
						//                            {
						$Query = "INSERT INTO checkpointmanage (`checkpointid`,`vehicleid`,`customerno`,`conflictstatus`,`userid`,`isdeleted`) VALUES (%d,'%d','%d','1','%d','0')";
						$SQL = sprintf($Query, Sanitise::Long($checkpointid), Sanitise::Long($vehiclesid), $this->_Customerno, Sanitise::Long($userid));
						$this->_databaseManager->executeQuery($SQL);
						//                          }
					}
				}
			}
		}
	}

//    public function getallroutes()
	//    {
	//        $routes = Array();
	//        $Query = "SELECT routeid,routename FROM `route` where customerno=%d AND isdeleted=0";
	//        $routeQuery = sprintf($Query,$this->_Customerno);
	//        $this->_databaseManager->executeQuery($routeQuery);
	//
	//            while ($row = $this->_databaseManager->get_nextRow())
	//            {
	//                $route = new VORoute();
	//                $route->routename = $row['routename'];
	//                $route->routeid = $row['routename'];
	//                $routes[] = $route;
	//            }
	//
	//        return $routes;
	//    }
	public function DeleteRoute($routeid, $userid) {
		$checkpoint_array = $this->get_all_checkpointid_forroute($routeid);
		$vehicles_Array = $this->getvehiclesforroute($routeid);
		foreach ($vehicles_Array as $vehicles) {
			if ($vehicles != '') {
				foreach ($checkpoint_array as $checkpoint) {
					if ($checkpoint != '') {
						$CheckQuery = "UPDATE `checkpointmanage` SET isdeleted='1' WHERE checkpointid=%d AND vehicleid=%d AND customerno=%d AND isdeleted=0";
						$checkpointsQuery = sprintf($CheckQuery, Sanitise::Long($checkpoint->checkpointid), Sanitise::Long($vehicles->vehicleid), $this->_Customerno);
						$this->_databaseManager->executeQuery($checkpointsQuery);
					}
				}
			}
		}
		$Query = "UPDATE route SET isdeleted=1,userid=%d WHERE routeid=%d AND customerno=%d";
		$SQL = sprintf($Query, Sanitise::Long($userid), Sanitise::Long($routeid), $this->_Customerno);
		$this->_databaseManager->executeQuery($SQL);
		$Query = "UPDATE routeman SET isdeleted=1,userid=%d WHERE routeid=%d AND customerno=%d";
		$SQL = sprintf($Query, Sanitise::Long($userid), Sanitise::Long($routeid), $this->_Customerno);
		$this->_databaseManager->executeQuery($SQL);
		$Query = "UPDATE vehiclerouteman SET isdeleted=1,userid=%d WHERE routeid=%d AND customerno=%d";
		$SQL = sprintf($Query, Sanitise::Long($userid), Sanitise::Long($routeid), $this->_Customerno);
		$this->_databaseManager->executeQuery($SQL);
	}

	public function get_added_vehicles($routeid) {
		$vehicles = Array();
		$Query = 'select * from vehicle
            INNER JOIN vehiclerouteman ON vehiclerouteman.vehicleid = vehicle.vehicleid
            where vehiclerouteman.routeid=%s AND vehiclerouteman.customerno=%s AND vehicle.customerno=%s AND vehicle.isdeleted=0 AND vehiclerouteman.isdeleted=0';
		if ($_SESSION['groupid'] != 0) {
			$Query .= " AND vehicle.groupid =%d";
		}
		if ($_SESSION['groupid'] != 0) {
			$vehiclesQuery = sprintf($Query, Sanitise::Long($routeid), $this->_Customerno, $this->_Customerno, $_SESSION['groupid']);
		} else {
			$vehiclesQuery = sprintf($Query, Sanitise::Long($routeid), $this->_Customerno, $this->_Customerno);
		}
		$this->_databaseManager->executeQuery($vehiclesQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$vehicle = new VOVehicle();
				$vehicle->vehicleid = $row['vehicleid'];
				//$vehicle->devicekey = $row['devicekey'];
				$vehicle->extbatt = $row['extbatt'];
				$vehicle->odometer = $row['odometer'];
				$vehicle->lastupdated = $row['lastupdated'];
				$vehicle->curspeed = $row['curspeed'];
				$vehicle->driverid = $row['driverid'];
				$vehicle->vehicleno = $row["vehicleno"];
				$vehicles[] = $vehicle;
			}
			return $vehicles;
		}
		return null;
	}

	public function get_shopscount() {
		$Query = "SELECT count(*) as shops FROM `routeman` where customerno=%d AND routeman.isdeleted=0 GROUP BY `routeid` ORDER BY shops DESC LIMIT 1 ";
		$RoutesQuery = sprintf($Query, $this->_Customerno);
		$this->_databaseManager->executeQuery($RoutesQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$shops = $row['shops'];
			}
			return $shops;
		}
		return null;
	}

	public function get_routeid_for_vehicleid($vehicleid) {
		$checkpoints = Array();
		$Query = "SELECT routeid FROM `vehiclerouteman` where customerno=%d AND vehiclerouteman.isdeleted=0 AND vehiclerouteman.vehicleid=%d LIMIT 1 ";
		$RoutesQuery = sprintf($Query, $this->_Customerno, $vehicleid);
		$this->_databaseManager->executeQuery($RoutesQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$routeid = $row['routeid'];
			}
			return $routeid;
		}
		return NULL;
	}

	public function getroutebyvehicleid($vehicleid) {
		$checkpoints = Array();
		$routeid = $this->get_routeid_for_vehicleid($vehicleid);
		//$Query = "select * from routeman where routeid=%s AND customerno=%d AND isdeleted=0 ORDER BY sequence ASC";
		if (isset($routeid)) {
			$Query = "select * from checkpoint
                INNER JOIN routeman ON routeman.checkpointid = checkpoint.checkpointid
                where routeman.routeid=%d AND routeman.customerno=%s AND checkpoint.customerno=%s AND checkpoint.isdeleted=0 AND routeman.isdeleted=0 ORDER BY routeman.sequence ASC";
			$checkpointsQuery = sprintf($Query, Sanitise::Long($routeid), $this->_Customerno, $this->_Customerno);
			$this->_databaseManager->executeQuery($checkpointsQuery);
			if ($this->_databaseManager->get_rowCount() > 0) {
				while ($row = $this->_databaseManager->get_nextRow()) {
					$checkpoint = new VORoute();
					$checkpoint->checkpointid = $row['checkpointid'];
					$checkpoint->sequence = $row['sequence'];
					$checkpoint->cname = $row['cname'];
					$checkpoint->routeid = $row['routeid'];
					$checkpoints[] = $checkpoint;
				}
				return $checkpoints;
			}
			return NULL;
		} else {
			return NULL;
		}
	}

	public function getroutebyvehicleidreverse($vehicleid) {
		$checkpoints = array();
		$routeid = $this->get_routeid_for_vehicleid($vehicleid);
		if (isset($routeid)) {
			$Query = "select * from checkpoint
                INNER JOIN routeman ON routeman.checkpointid = checkpoint.checkpointid
                where routeman.routeid=%d AND routeman.customerno=%s AND checkpoint.customerno=%s AND checkpoint.isdeleted=0 AND routeman.isdeleted=0
                ORDER BY routeman.sequence DESC";
			$checkpointsQuery = sprintf($Query, Sanitise::Long($routeid), $this->_Customerno, $this->_Customerno);
			$this->_databaseManager->executeQuery($checkpointsQuery);
			if ($this->_databaseManager->get_rowCount() > 0) {
				while ($row = $this->_databaseManager->get_nextRow()) {
					$checkpoint = new VORoute();
					$checkpoint->checkpointid = $row['checkpointid'];
					$checkpoint->sequence = $row['sequence'];
					$checkpoint->cname = $row['cname'];
					$checkpoint->routeid = $row['routeid'];
					$checkpoints[] = $checkpoint;
				}
				return $checkpoints;
			}
			return null;
		} else {
			return null;
		}
	}

	function getVehicleRoute() {
		$vehicles = Array();
		$Query = "vehicle.vehicleid, vehicle.cusrspeed, vehicle.overspeed_limit, vehicle.stoppage_transit_time, vehicle.groupid, vehicle.stoppage_flag, vehicle.vehicleno,
                 vehicle.kind, devices.devicelat, devices.devicelong, devices.igmition, devices.status, customer.use_geolocation, ignitionalert.status as igstatus,
                 vehiclerouteman.routeid,
                INNER JOIN devices ON devices.uid = vehicle.uid
                INNER JOIN unit ON devices.uid = unit.uid
                INNER JOIN " . DB_PARENT . ".customer ON customer.customerno = vehicle.customerno
                INNER JOIN ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid";
	}

	public function getRoute($routeid) {
		$Query = "SELECT routename FROM route WHERE customerno=%d AND routeid=%d";
		$SQL = sprintf($Query, $this->_Customerno, $routeid);
		$this->_databaseManager->executeQuery($SQL);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				echo $row['routename'];
			}
		}
	}

	public function getdevicekey($routeid) {
		$Query = "SELECT devicekey FROM route WHERE customerno=%d AND routeid=%d";
		$SQL = sprintf($Query, $this->_Customerno, $routeid);
		$this->_databaseManager->executeQuery($SQL);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				echo $row['devicekey'];
			}
		}
	}

	public function getvehiclesByRoute() {
		$vehicles = Array();
		$Query = "SELECT vehiclerouteman.vehicleid, vehiclerouteman.routeid, route.routename,vehicle.vehicleid, vehicle.curspeed, vehicle.odometer,vehicle.overspeed_limit, vehicle.stoppage_transit_time,
                 vehicle.groupid, vehicle.stoppage_flag, vehicle.vehicleno, vehicle.kind, devices.devicelat, devices.devicelong, devices.ignition, devices.status, customer.use_geolocation,
                 devices.deviceid,devices.lastupdated, ignitionalert.status as igstatus, unit.unitno FROM vehiclerouteman
                INNER JOIN route ON route.routeid = vehiclerouteman.routeid
                INNER JOIN vehicle ON vehicle.vehicleid = vehiclerouteman.vehicleid
                INNER JOIN devices ON devices.uid = vehicle.uid
                INNER JOIN unit ON devices.uid = unit.uid
                INNER JOIN " . DB_PARENT . ".customer ON customer.customerno = vehicle.customerno
                INNER JOIN ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid
                WHERE vehiclerouteman.customerno=%d AND vehiclerouteman.isdeleted=0 ";
		if ($_SESSION['groupid'] != 0) {
			$Query .= " AND vehicle.groupid =%d Order by route.routename";
		} else {
			$Query .= " Order by route.routename";
		}
		if ($_SESSION['groupid'] != 0) {
			$routeQuery = sprintf($Query, $this->_Customerno, $_SESSION['groupid']);
		} else {
			$routeQuery = sprintf($Query, $this->_Customerno);
		}
		$this->_databaseManager->executeQuery($routeQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$vehicle = new VOVehicle();
				$vehicle->deviceid = $row['deviceid'];
				$vehicle->vehicleid = $row['vehicleid'];
				$vehicle->routeid = $row['routeid'];
				$vehicle->routename = $row['routename'];
				$vehicle->type = $row['kind'];
				$vehicle->vehicleno = $row['vehicleno'];
				$vehicle->curspeed = $row['curspeed'];
				$vehicle->odometer = $row['odometer'];
				$vehicle->overspeed_limit = $row['overspeed_limit'];
				$vehicle->stoppage_transit_time = $row['stoppage_transit_time'];
				$vehicle->unitno = $row['unitno'];
				$vehicle->devicelat = $row['devicelat'];
				$vehicle->devicelong = $row['devicelong'];
				$vehicle->groupid = $row['groupid'];
				if ($row['lastupdated'] != '0000-00-00 00:00:00') {
					$vehicle->lastupdated = $row['lastupdated'];
					$vehicle->lastupdated_store = $row['lastupdated'];
				} else {
					$vehicle->lastupdated = $row['registeredon'];
					$vehicle->lastupdated_store = $row['lastupdated'];
				}
				$vehicle->ignition = $row['ignition'];
				$vehicle->status = $row['status'];
				$vehicle->stoppage_flag = $row["stoppage_flag"];
				$vehicle->igstatus = $row["igstatus"];
				$vehicle->use_geolocation = $row["use_geolocation"];
				$vehicles[] = $vehicle;
			}
			return $vehicles;
		}
		return null;
	}

	public function getvehiclesByRoute_ById($routeid) {
		$vehicles = Array();
		$Query = "SELECT vehiclerouteman.vehicleid, vehiclerouteman.routeid, route.routename,vehicle.vehicleid, vehicle.curspeed, vehicle.odometer,vehicle.overspeed_limit, vehicle.stoppage_transit_time,
                 vehicle.groupid, vehicle.stoppage_flag, vehicle.vehicleno, vehicle.kind, devices.devicelat, devices.devicelong, devices.ignition, devices.status, customer.use_geolocation,
                 devices.deviceid,devices.lastupdated, ignitionalert.status as igstatus, unit.unitno FROM vehiclerouteman
                INNER JOIN route ON route.routeid = vehiclerouteman.routeid
                INNER JOIN vehicle ON vehicle.vehicleid = vehiclerouteman.vehicleid
                INNER JOIN devices ON devices.uid = vehicle.uid
                INNER JOIN unit ON devices.uid = unit.uid
                INNER JOIN " . DB_PARENT . ".customer ON customer.customerno = vehicle.customerno
                INNER JOIN ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid
                WHERE vehiclerouteman.customerno=%d AND vehiclerouteman.routeid=%d AND vehiclerouteman.isdeleted=0 ";
		if ($_SESSION['groupid'] != 0) {
			$Query .= " AND vehicle.groupid =%d Order by route.routename";
		} else {
			$Query .= " Order by route.routename";
		}
		if ($_SESSION['groupid'] != 0) {
			$routeQuery = sprintf($Query, $this->_Customerno, $routeid, $_SESSION['groupid']);
		} else {
			$routeQuery = sprintf($Query, $this->_Customerno, $routeid);
		}
		$this->_databaseManager->executeQuery($routeQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$vehicle = new VOVehicle();
				$vehicle->deviceid = $row['deviceid'];
				$vehicle->vehicleid = $row['vehicleid'];
				$vehicle->routeid = $row['routeid'];
				$vehicle->routename = $row['routename'];
				$vehicle->type = $row['kind'];
				$vehicle->vehicleno = $row['vehicleno'];
				$vehicle->curspeed = $row['curspeed'];
				$vehicle->odometer = $row['odometer'];
				$vehicle->overspeed_limit = $row['overspeed_limit'];
				$vehicle->stoppage_transit_time = $row['stoppage_transit_time'];
				$vehicle->unitno = $row['unitno'];
				$vehicle->devicelat = $row['devicelat'];
				$vehicle->devicelong = $row['devicelong'];
				$vehicle->groupid = $row['groupid'];
				if ($row['lastupdated'] != '0000-00-00 00:00:00') {
					$vehicle->lastupdated = $row['lastupdated'];
					$vehicle->lastupdated_store = $row['lastupdated'];
				} else {
					$vehicle->lastupdated = $row['registeredon'];
					$vehicle->lastupdated_store = $row['lastupdated'];
				}
				$vehicle->ignition = $row['ignition'];
				$vehicle->status = $row['status'];
				$vehicle->stoppage_flag = $row["stoppage_flag"];
				$vehicle->igstatus = $row["igstatus"];
				$vehicle->use_geolocation = $row["use_geolocation"];
				$vehicles[] = $vehicle;
			}
			return $vehicles;
		}
		return null;
	}

	public function getStartLocation($routeid) {
		$Query = "SELECT routeman.checkpointid, routeman.timetaken, routeman.sequence, checkpoint.cname FROM routeman
                 INNER JOIN checkpoint ON checkpoint.checkpointid = routeman.checkpointid
                WHERE routeman.customerno = %d AND routeman.routeid=%d AND routeman.sequence=1 AND routeman.isdeleted=0 Limit 1";
		$SQL = sprintf($Query, $this->_Customerno, $routeid);
		$this->_databaseManager->executeQuery($SQL);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$chk = new VORoute();
				$chk->checkpointid = $row['checkpointid'];
				$chk->sequence = $row['sequence'];
				$chk->cname = $row['cname'];
				$chk->timetaken = $row['timetaken'];
			}
			return $chk;
		}
		return null;
	}

	public function getEndLocation($routeid) {
		$Query = "SELECT routeman.checkpointid, routeman.sequence, checkpoint.cname FROM routeman
                 INNER JOIN checkpoint ON checkpoint.checkpointid = routeman.checkpointid
                WHERE routeman.customerno = %d AND routeman.routeid=%d AND routeman.isdeleted=0 Order by routeman.sequence DESC Limit 1";
		$SQL = sprintf($Query, $this->_Customerno, $routeid);
		$this->_databaseManager->executeQuery($SQL);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$chk = new VORoute();
				$chk->checkpointid = $row['checkpointid'];
				$chk->sequence = $row['sequence'];
				$chk->cname = $row['cname'];
			}
			return $chk;
		}
		return null;
	}

	public function getStdTime($routeid) {
		$Query = "SELECT timetaken FROM routeman WHERE customerno=%d AND routeid=%d AND isdeleted=0 order by sequence DESC Limit 1";
		$SQL = sprintf($Query, $this->_Customerno, $routeid);
		$this->_databaseManager->executeQuery($SQL);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				return $row['timetaken'];
			}
		}
	}

	public function getAllChkptForRoute($routeid) {
		$chks = array();
		$Query = "SELECT checkpointid,timetaken,distance FROM routeman WHERE customerno=%d AND routeid=%d AND isdeleted=0 Order by sequence ASC";
		$SQL = sprintf($Query, $this->_Customerno, $routeid);
		$this->_databaseManager->executeQuery($SQL);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$chk = new VORoute();
				$chk->checkpointid = $row['checkpointid'];
				$chk->timetaken = $row['timetaken'];
				$chk->distance = $row['distance'];
				$chks[] = $chk;
			}
			return $chks;
		}
		return null;
	}

	public function deleteRouteChk($chkid, $routeid) {
		$chkQuery = "SELECT checkpointid FROM routeman WHERE checkpointid = %d AND routeid=%d";
		$chkSQl = sprintf($chkQuery, $chkid, $routeid);
		$this->_databaseManager->executeQuery($chkSQl);
		if ($this->_databaseManager->get_rowCount() > 0) {
			$Query = "Delete FROM routeman WHERE customerno=%d AND routeid=%d AND checkpointid=%d";
			$SQL = sprintf($Query, $this->_Customerno, $routeid, $chkid);
			$this->_databaseManager->executeQuery($SQL);
			return "del";
		} else {
			return "notdel";
		}
	}

	function get_route_details() {
		$route = array();
		$routnames = array();
		$vehicles = array();
		$Query = "SELECT a.routeid, a.routename, b.vehicleid, c.checkpointid, c.sequence
            FROM route as a
            INNER join routeman as c on a.routeid=c.routeid
            left join vehiclerouteman as b on a.routeid=b.routeid
            left join vehicle as d on d.vehicleid=b.vehicleid
            where a.isdeleted=0
            and b.isdeleted=0
            and c.isdeleted=0
            and d.isdeleted=0
            and a.customerno = $this->_Customerno
            and d.customerno = $this->_Customerno
            and c.customerno = $this->_Customerno
            and d.customerno = $this->_Customerno
            order by a.routeid, b.vehicleid, c.sequence";
		$this->_databaseManager->executeQuery($Query);
		$this->_databaseManager->get_rowCount();
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$route[$row['routeid']][$row['vehicleid']][$row['sequence']] = $row['checkpointid'];
				$vehicles[$row['vehicleid']] = $row['vehicleid'];
				$routnames[$row['routeid']] = $row['routename'];
			}
		}
		if (!empty($vehicles)) {
			$veh_details = array();
			foreach ($vehicles as $vehid) {
				if (!isset($veh_details[$vehid])) {
					$veh_details[$vehid] = $this->trip_summary_vehicles($vehid);
				}
			}
		}
		return array($route, $routnames, $veh_details);
	}

	function get_routedetails($groupid = null) {
		$grpCondition = '';
		if (isset($groupid) && $groupid != 0) {
			$grpCondition = " AND d.groupid = $groupid";
		}
		$route = array();
		$routnames = array();
		$vehicles = array();
		$routeTat = array();
		$Query = "SELECT a.routeid, a.routename, b.vehicleid, c.checkpointid, c.sequence, a.routeTat
            FROM route as a
            LEFT join vehiclerouteman as b on a.routeid=b.routeid
            LEFT join routeman as c on a.routeid=c.routeid
            LEFT join vehicle as d on d.vehicleid=b.vehicleid
            where a.isdeleted=0
            and b.isdeleted=0
            and c.isdeleted=0
            and d.isdeleted=0
            and a.customerno = $this->_Customerno
            and d.customerno = $this->_Customerno " . $grpCondition . "
            order by a.routeid, b.vehicleid, c.sequence
        "; //echo"Query is: ".$Query; exit();
		$this->_databaseManager->executeQuery($Query);
		$this->_databaseManager->get_rowCount();
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$route[$row['routeid']][$row['vehicleid']][$row['sequence']] = $row['checkpointid'];
				$vehicles[$row['vehicleid']] = $row['vehicleid'];
				$routnames[$row['routeid']] = $row['routename'];
				$routeTat[$row['routeid']] = $row['routeTat'];
			}
		}
		if (!empty($vehicles)) {
			$veh_details = array();
			foreach ($vehicles as $vehid) {
				if (!isset($veh_details[$vehid])) {
					$veh_details[$vehid] = $this->trip_summary_vehicles($vehid);
				}
			}
		}
		return array($route, $routnames, $veh_details, $routeTat);
	}

	function get_routedetailsroute($routeid) {
		$route = array();
		$routnames = array();
		$vehicles = array();
		$Query = "SELECT a.routeid, a.routename, b.vehicleid, /*c.checkpointid, c.sequence,*/ a.routeTat
            FROM route as a
            LEFT join vehiclerouteman as b on a.routeid=b.routeid
            /*LEFT join routeman as c on a.routeid=c.routeid*/
            LEFT join vehicle as d on d.vehicleid=b.vehicleid
            where a.isdeleted=0
            and a.routeid = $routeid
            and b.isdeleted=0
           /* and c.isdeleted=0*/
            and d.isdeleted=0
            and a.customerno = $this->_Customerno
            and d.customerno = $this->_Customerno
            order by a.routeid, b.vehicleid/*, c.sequence*/
        "; //echo"Query is: ".$Query; exit();
		$this->_databaseManager->executeQuery($Query);
		$this->_databaseManager->get_rowCount();
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				// $route[$row['routeid']][$row['vehicleid']][$row['sequence']] = $row['checkpointid'];
				$vehicles[$row['vehicleid']] = $row['vehicleid'];
				$routnames[$row['routeid']] = $row['routename'];
				$routeTat[$row['routeid']] = $row['routeTat'];
			}
		}
		//echo"Data is<pre>"; print_r($vehicles); exit();
		if (!empty($vehicles)) {
			$vehicleId = '';
			$veh_details = array();
			foreach ($vehicles as $vehid) {
				if (!isset($veh_details[$vehid])) {
					$vehicleId .= $vehid . ',';
					//$veh_details[$vehid] = $this->trip_summary_vehicles($vehid);
				}
			}
			//echo"Vehicle id string is: ". rtrim($vehicleId,','); exit();
			$veh_details = $this->trip_summary_vehicles(rtrim($vehicleId, ','));
		}
		return array($route, $routnames, $veh_details, $routeTat);
	}

	function getRouteChkDetails($routeid, $chkid) {
		$details = array();
		$sql = "SELECT eta, etd, r_eta, r_etd, sequence FROM routeman WHERE routeid= %s AND checkpointid=%d AND customerno=%d and isdeleted=0";
		$Query = sprintf($sql, $routeid, $chkid, $this->_Customerno);
		$this->_databaseManager->executeQuery($Query);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$details = $row;
			}
		}
		return $details;
	}

	public function trip_summary_vehicles($vehid) {
		//echo"<br>Vehicle id: ".$vehid;
		$vehs = array();
		/* $Query = "SELECT a.vehicleid, a.vehicleno, b.drivername, b.driverphone, c.devicelat, c.devicelong, d.unitno
			            FROM vehicle as a
			            left join driver as b on a.driverid=b.driverid
			            left join devices as c on a.uid=c.uid
			            left join unit as d on a.uid=d.uid
			            where a.vehicleid=$vehid and a.isdeleted=0 group by a.vehicleid
		*/
		$Query = "SELECT a.vehicleid, a.vehicleno, b.drivername, b.driverphone, c.devicelat, c.devicelong, d.unitno
            FROM vehicle as a
            left join driver as b on a.driverid=b.driverid
            left join devices as c on a.uid=c.uid
            left join unit as d on a.uid=d.uid
            where a.vehicleid IN($vehid) and a.isdeleted=0 group by a.vehicleid
        "; //echo"QUery is: ".$Query; exit();
		$this->_databaseManager->executeQuery($Query);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$city = location_cmn($row['devicelat'], $row['devicelong'], 0, $this->_Customerno);
				//$city = city_by_google($row['devicelat'],$row['devicelong']);
				/* $vehs = array(
	                    'vehid' => $row['vehicleid'],
	                    'vehno' => $row['vehicleno'],
	                    'unitno' => $row['unitno'],
	                    'driverno' => $row['drivername'],
	                    'cellno' => $row['driverphone'],
	                    'city' => $city,
*/
				$vehs[$row['vehicleid']]['vehid'] = $row['vehicleid'];
				$vehs[$row['vehicleid']]['vehno'] = $row['vehicleno'];
				$vehs[$row['vehicleid']]['unitno'] = $row['unitno'];
				$vehs[$row['vehicleid']]['driverno'] = $row['drivername'];
				$vehs[$row['vehicleid']]['cellno'] = $row['driverphone'];
				$vehs[$row['vehicleid']]['city'] = $city;
			}
		}
		return $vehs;
	}

	public function get_route_fromcustomer($customerno) {
		$routes = array();
		$Query = 'SELECT *  FROM `route` where isdeleted=0 AND customerno=' . $customerno;
		$customerRouteQuery = sprintf($Query, Sanitise::Long($customerno));
		$this->_databaseManager->executeQuery($customerRouteQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$route = new stdClass();
				$route->routeid = $row["routeid"];
				$route->routename = $row["routename"];
				$routes[] = $route;
			}
			return $routes;
		}
		$route = new stdClass();
		$route->routeid = 0;
		$route->routename = "";
		$routes[] = $route;
		return $routes;
	}

	public function demapVehicleRouteMapping($routeid, $vehicleid, $customerno, $userid) {
		$date = new Date();
		$today = $date->MySQLNow();
		$Query = "UPDATE vehiclerouteman SET isdeleted=1, `timestamp`  = '%s' , userid = %d WHERE routeid=%d and vehicleid = %d AND customerno=%d";
		$SQL = sprintf($Query, Sanitise::DateTime($today), Sanitise::Long($userid), Sanitise::Long($routeid), Sanitise::Long($vehicleid), $customerno);
		$this->_databaseManager->executeQuery($SQL);
	}

	public function get_routes_for_vehicleid($vehicleid) {
		$checkpoints = Array();
		$Query = "SELECT v.routeid, r.routename FROM `vehiclerouteman` v
        INNER JOIN route r on r.routeid = v.routeid
        where v.customerno=%d AND v.isdeleted=0 AND v.vehicleid=%d LIMIT 1 ";
		$RoutesQuery = sprintf($Query, $this->_Customerno, $vehicleid);
		$this->_databaseManager->executeQuery($RoutesQuery);
		$route = array();
		$obj = new stdClass();
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$obj->routeid = $row['routeid'];
				$obj->routename = $row['routename'];

				$route[] = $obj;
			}
			return $route;
		}
		return NULL;
	}

	public function addFutureRoute($routearray, $vehicleid, $userid) {

		$Query = "UPDATE futureRoutes SET isDeleted=1 WHERE vehicleId = %d AND customerNo=%d";
		$SQL = sprintf($Query, Sanitise::Long($vehicleid), $this->_Customerno);
		$this->_databaseManager->executeQuery($SQL);

		/*$theArray = explode(",", $routearray);
			        foreach ($theArray as $routeid) {
			            $sql = "SELECT frId FROM futureRoutes WHERE routeid= %s AND vehicleid=%d AND customerno=%d and isdeleted=0";
			            $Query1 = sprintf($sql, $routeid, $vehicleid, $this->_Customerno);
			           // die;
			            $this->_databaseManager->executeQuery($Query1);
			            // $c = $this->_databaseManager->get_rowCount();
			            // echo "count is ". $c; die;
			            if ($this->_databaseManager->get_rowCount() > 0) {
			                // echo "Something Went Wrong";
			                echo $error = 1;
			                return $error;
			            }
			        }
		*/

		$Query = "INSERT INTO futureRoutes (`customerNo`,`vehicleId`, `routeId`,`nextRouteId`,`frSequence`,`createdBy`, `createdOn` ,`updatedBy`, `updatedOn`, `isDeleted`) VALUES (%d,'%d','%d','%d','%d','%d','%s','%d','%s', '0')";
		$date = new Date();
		$today = $date->MySQLNow();
		//echo $routearrays = $routearray;
		$theArray = explode(",", $routearray);
		$listingCounter = 1;
		// $db->exec('BEGIN IMMEDIATE TRANSACTION');
		$i = 0;
		foreach ($theArray as $key => $value) {
			//$routeid
			$i = $key + 1;
			$nextRouteId = 0;
			if ($key + 1 != count($theArray)) {
				$nextRouteId = $theArray[$i];
			}
			$SQL = sprintf($Query,
				$this->_Customerno,
				Sanitise::Long($vehicleid),
				Sanitise::Long($value), // routeid
				Sanitise::Long($nextRouteId),

				Sanitise::Long($listingCounter),
				Sanitise::Long($userid),
				Sanitise::DateTime($today),
				Sanitise::Long($userid),
				Sanitise::DateTime($today)
			);
			$this->_databaseManager->executeQuery($SQL);
			// $db->exec($SQL);
			$listingCounter = $listingCounter + 1;
		}
		// $db->exec('COMMIT TRANSACTION');

	}

	function getNextFutureRoute($routeid, $vehicleid) {
		$details = array();

		$sql = "SELECT nextRouteId, updatedBy as userid FROM futureRoutes WHERE routeid= %d AND vehicleid=%d AND customerno=%d and isdeleted=0 ORDER BY frSequence ASC LIMIT 1";
		$Query = sprintf($sql, $routeid, $vehicleid, $this->_Customerno);
		$this->_databaseManager->executeQuery($Query);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$details = $row;
			}
		}
		$date = new Date();
		$today = $date->MySQLNow();

		$Query1 = "UPDATE futureRoutes SET isDeleted = 1, updatedOn = '%s' WHERE vehicleId = %d AND customerNo=%d AND routeId = %d AND isDeleted = 0";
		$SQL = sprintf($Query1, Sanitise::DateTime($today), Sanitise::Long($vehicleid), $this->_Customerno, Sanitise::Long($routeid));
		$this->_databaseManager->executeQuery($SQL);

		return $details;
	}

	public function get_future_routes_for_vehicleid($vehicleid) {
		$futureRoute = array();
		$Query = "SELECT f.routeid, r.routename

        FROM `futureRoutes` f
        INNER JOIN route r on r.routeid = f.routeid
        where f.customerno=%d AND f.isdeleted=0 AND f.vehicleid=%d ORDER BY f.frSequence ASC ";
		$RoutesQuery = sprintf($Query, $this->_Customerno, $vehicleid);
		$this->_databaseManager->executeQuery($RoutesQuery);

		if ($this->_databaseManager->get_rowCount() > 0) {

			while ($row = $this->_databaseManager->get_nextRow()) {
				$obj = new stdClass();
				$obj->routeid = $row['routeid'];
				$obj->routename = $row['routename'];

				$futureRoute[] = $obj;
			}
			return $futureRoute;
		}
		return NULL;
	}

	public function getRouteTypes() {
		$routes = Array();
		$Query = "select
            distinct rtm.routeTypeName,
            rtm.id,
            rtm.routeTypeId
            from
            route_type_master as rtm
            where
            rtm.customerNo = %d AND rtm.isDeleted=0";
		$routesQuery = sprintf($Query, $this->_Customerno);
		//echo"Route query is: ".$routesQuery; exit();
		$this->_databaseManager->executeQuery($routesQuery);
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$route = new stdClass();
				$route->routeTypeId = $row['routeTypeId'];
				$route->routeTypeName = $row['routeTypeName'];
				$routes[] = $route;
			}
			return $routes;
		}
		return null;
	}

/* Function to fetch route wise tracking data starts here */

	public function getRouteWiseData($route, $startDate, $endDate, $customerno) {
		// SP name = fetch_data_for_route_wise_report
		// input parameters
		// routeIdParam
		// customerNoParam
		$QUERY = 'CALL ' . speedConstants::SP_FETCH_DATA_FOR_ROUTE_WISE_REPORT . '(' . $route . ',' . $this->_Customerno . ')';

		$this->_databaseManager->executeQuery($QUERY);
		if ($this->_databaseManager->get_rowCount() > 0) {
			$dataArray = [];
			$allData = $this->_databaseManager->get_recordSet();
			/* Separating checkpoint data */
			$checkPointsDataBySequence = $this->seperateCheckPointDataBySequentially($allData);
			$getUniqueVehicleIdFromAllData = $this->getDistinctVehicleIdFromAllData($allData);
			$vehcileWiseRouteData = $this->generateVehicleWiseRouteData($getUniqueVehicleIdFromAllData, $checkPointsDataBySequence, $startDate, $endDate, $customerno, $allData[0]['routeTat']);
			$dataArray['checkPoints'] = $checkPointsDataBySequence;
			$dataArray['vehcile_wise_route_data'] = $vehcileWiseRouteData;
			return $dataArray;
			//echo"Data got for report:<pre>"; print_r($vehcileWiseRouteData); exit();
		} else {
			return null;
		}
	}

/* Function to fetch route wise tracking data ends here */

	public function seperateCheckPointDataBySequentially($allData) {
		$checkPointWiseData = [];
		foreach ($allData as $key => $value) {
			if ($key == 0) {
				$checkPointWiseData[$key]['checkpointid'] = $value['checkpointid'];
				$checkPointWiseData[$key]['cname'] = $value['cname'];
				$checkPointWiseData[$key]['sequence'] = $value['sequence'];
				$checkPointWiseData[$key]['eta'] = $value['eta'];
				$checkPointWiseData[$key]['etd'] = $value['etd'];
			} else {
				if ($value['sequence'] != 1) {
					$checkPointWiseData[$key]['checkpointid'] = $value['checkpointid'];
					$checkPointWiseData[$key]['cname'] = $value['cname'];
					$checkPointWiseData[$key]['sequence'] = $value['sequence'];
					$checkPointWiseData[$key]['eta'] = $value['eta'];
					$checkPointWiseData[$key]['etd'] = $value['etd'];
				} else {
					break;
				}
			}
		}
		return $checkPointWiseData;
	}

	public function getDistinctVehicleIdFromAllData($allData) {
		$tempArr = array_unique(array_column($allData, 'vehicleid'));
		return array_values(array_intersect_key($allData, $tempArr));
	}

	public function generateVehicleWiseRouteData(array $vehicles, array $checkpointsData, $startDate, $endDate, $customerno, $tat) {
		$getAvailableVehiclesForReport = [];
		foreach ($vehicles AS $key => $value) {
			if ($this->isVehcileStartedFromFirstCheckPoint($value['vehicleid'], $checkpointsData[0]['checkpointid'], $startDate, $endDate, $customerno)) {
				$getAvailableVehiclesForReport[] = $this->generateRouteWiseReport($value, $checkpointsData, $startDate, $endDate, $customerno, $tat);
			}
		}
		return $getAvailableVehiclesForReport;
	}

	public function isVehcileStartedFromFirstCheckPoint($vehcileId, $checkpointId, $startDate, $endDate, $customerno) {
		$path = "sqlite:../../customer/$customerno/reports/chkreport.sqlite";
		$Query = "select * from V" . $vehcileId . " WHERE (chkid = " . $checkpointId . ") AND (date BETWEEN '$startDate 00:00:00' AND '$endDate 23:59:59') AND (status=0)";
		try {
			$db = new PDO($path);
			/* $result = $db->query($Query); */
			$sth = $db->prepare($Query);
			$sth->execute();
			$result = $sth->fetchAll();
			if (count($result) > 0) {
				return true;
			} else {
				return false;
			}
		} catch (PDOException $e) {
			echo "<br>Exception is: " . $e;exit();
		}
	}

	public function generateRouteWiseReport($vehcileId, $checkPointData, $startDate, $endDate, $customerno, $tat) {
		// echo"Vehicle Data is:<pre>"; print_r($vehcileId); //exit();
		$startDateTime = '';
		$returnResultData = [];
		$checkPointId = '';
		$totalDuration = 0;
		//echo"Check Point id string is: ".rtrim($checkPointId,','); exit();
		$path = "sqlite:../../customer/$customerno/reports/chkreport.sqlite";
		try {
			$checkPointStoppageCount = 0;
			$startDataTime = '';
			/* $db = new PDO($path);
				        $sth = $db->prepare($Query);
				        $sth->execute();
			*/
			$checkPointDataCount = count($checkPointData);
			/* echo"CheckPoint Data is:<pre>"; print_r($checkPointData); exit(); */
			/*echo"<br>SQLITE data is:<pre>"; print_r($result); exit();   */
			/*   foreach($result AS $key1=>$value1)
        { */
			/*  foreach($value1 AS $key_outer => $value_outer)
            { */
			foreach ($checkPointData as $key2 => $value2) {
				if ($key2 == 0) // From here vehicle starts, there won't be halt time,estimated arrival, if started late then display started late
				{
					$sqliteData = $this->getDataFromSqlite($path, $vehcileId['vehicleid'], $startDate, $endDate, $value2['checkpointid'], 1, '');
					/* echo"Checkpoint Data is: <pre>"; print_r($vehcileId);
                            echo"SQLite data for first checkpoint:<pre> "; print_r($sqliteData); */
					/* if(count($sqliteData)>0) */
					// echo"<br>Sqlite data is: <pre>"; print_r($sqliteData);
					if ($sqliteData != null) {
						/* echo"Inside sqlite  data and data is :<pre>";
                                print_r($sqliteData); exit(); */
						$startDataTime = $sqliteData[0]['date'];
						$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_arrival'] = '--';
						$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_departure'] = $value2['etd'];
						$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_halt_time'] = '--';
						$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_arrival'] = '--';
						$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_departure'] = $sqliteData[0]['date'];
						$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_halt_time'] = '--';
						if ($value2['etd'] == '00:00:00') {
							// $returnResultData[$vehcileId['vehicleno']][$value2['cname']] ['Remark']  ='ETD is mssing';
						} else {
							// $returnResultData[$vehcileId['vehicleno']][$value2['cname']] ['Remark']='';
							/* $returnResultData[$vehcileId['vehicleno']][$value2['cname']] ['Remark']  ='Started -'.$this->getRemark($sqliteData[0]['date'],$value2['etd']); */
						}

					} else {
						continue;
					}
				} else {
					if ($key2 == $checkPointDataCount - 1) // At this checkpoint vehcile stops, there won't be halt time,estimated departure, if arrived late then late arrival
					{
						$sqliteDataa = $this->getDataFromSqlite($path, $vehcileId['vehicleid'], $startDate, $endDate, $value2['checkpointid'], 0, 'ORDER BY date DESC');
						/*  echo"Checkpoint Data is: <pre>"; print_r($vehcileId);
                                echo"SQLite data for last checkpoint:<pre> "; print_r($sqliteDataa); */

						if ($sqliteDataa != null) {
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_arrival'] = $value2['eta'];
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_departure'] = '--';
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_halt_time'] = '--';
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_arrival'] = $sqliteDataa[0]['date'];
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_departure'] = '--';
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_halt_time'] = '--';
							if ($value2['eta'] == '00:00:00') {
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['Remark'] = 'ETA is missing';
							} else {
								//$returnResultData[$vehcileId['vehicleno']][$value2['cname']] ['Remark']  ='';
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['tat'] = $tat;
								$actualTat = $this->getActalTat($startDataTime, $sqliteDataa[0]['date']);
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['atat'] = abs($actualTat);
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['Remark'] = $this->getRemarkFinal($actualTat, $tat);

								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['summary']['tat'] = $tat;
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['summary']['atat'] = abs($actualTat);
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['summary']['Remark'] = $this->getRemarkFinal($actualTat, $tat);
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['summary']['checkPointStoppageCount'] = $checkPointStoppageCount;
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['summary']['totalDuration'] = date("h:i:s", $totalDuration);

							}
							//$returnResultData[$vehcileId['vehicleno']][$value2['cname']] ['checkPointStoppageCount'] = $checkPointStoppageCount;

						} else {
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_arrival'] = $value2['eta'];
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_departure'] = '--';
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_halt_time'] = '--';
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_arrival'] = $sqliteDataa['date'];
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_departure'] = '--';
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_halt_time'] = '--';
							/*  $returnResultData[$vehcileId['vehicleno']][$value2['cname']] ['Remark']  ='Trip is not completed yet';
                                    $returnResultData[$vehcileId['vehicleno']][$value2['cname']] ['tat']  =$tat; */

							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['summary']['tat'] = $tat;
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['summary']['atat'] = '';
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['summary']['Remark'] = 'Trip is not completed yet';
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['summary']['checkPointStoppageCount'] = $checkPointStoppageCount;
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['summary']['totalDuration'] = date("h:i:s", $totalDuration);

							//$actualTat = $this->getActalTat($startDataTime,$sqliteData['date']);
							//$returnResultData[$vehcileId['vehicleno']][$value2['cname']] ['atat']  = $actualTat;
						}
					} else {
						$sqliteData = $this->getDataFromSqlite($path, $vehcileId['vehicleid'], $startDate, $endDate, $value2['checkpointid'], 0, '');
						if ($sqliteData != null) {
							$sqliteData1 = $this->getDataFromSqlite($path, $vehcileId['vehicleid'], $startDate, $endDate, $value2['checkpointid'], 1, '');
							if ($sqliteData1 != null) {
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_arrival'] = $value2['eta'];
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_departure'] = $value2['etd'];
								$estimatedHaltTime = $this->getTimeDiff($value2['eta'], $value2['etd']);
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_halt_time'] = $estimatedHaltTime;
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_arrival'] = $this->getActualTimeOfArriaval($vehcileId['vehicleid'], $startDate, $endDate, $value2['checkpointid'], $customerno);
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_departure'] = $this->getActualTimeOfDeparture($vehcileId['vehicleid'], $startDate, $endDate, $value2['checkpointid'], $customerno);
								$haltTime = $this->getHaltTime($vehcileId['vehicleid'], $startDate, $endDate, $value2['checkpointid'], $customerno);
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_halt_time'] = $haltTime;
								$checkPointStoppageCount++;
								$totalDuration = $totalDuration + strtotime($haltTime);
							} else {
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_arrival'] = $value2['eta'];
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_departure'] = $value2['etd'];
								$estimatedHaltTime = $this->getTimeDiff($value2['eta'], $value2['etd']);
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_halt_time'] = $estimatedHaltTime;
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_arrival'] = $this->getActualTimeOfArriaval($vehcileId['vehicleid'], $startDate, $endDate, $value2['checkpointid'], $customerno);
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_departure'] = '--';
								//$haltTime = $this->getHaltTime($vehcileId['vehicleid'],$startDate,$endDate,$value2['checkpointid'],$customerno);
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_halt_time'] = '--';
								/* $returnResultData[$vehcileId['vehicleno']][$value2['cname']] ['Remark'] = 'Vehicle is in checkpoint'; */
								$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['Remark'] = '';
								$checkPointStoppageCount++;
								$totalDuration = $totalDuration + strtotime($haltTime);
							}

						} else {
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_arrival'] = $value2['eta'];
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_time_of_departure'] = $value2['etd'];
							$estimatedHaltTime = $this->getTimeDiff($value2['eta'], $value2['etd']);
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['estimated_halt_time'] = $estimatedHaltTime;
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_arrival'] = '--';
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_time_of_departure'] = '--';
							//$haltTime = $this->getHaltTime($vehcileId['vehicleid'],$startDate,$endDate,$value2['checkpointid'],$customerno);
							$returnResultData[$vehcileId['vehicleno']][$value2['cname']]['actual_halt_time'] = '--';
							/*  $returnResultData[$vehcileId['vehicleno']][$value2['cname']] ['Remark'] = 'Vehicle is not entered into checkpoint'; */
							//$returnResultData[$vehcileId['vehicleno']][$value2['cname']] ['Remark'] = '';
						}

					}
				}
			}
			/*  } */

			/*  }  */
			return $returnResultData;
		} catch (PDOException $e) {
			echo "<br>Exception is: " . $e; //exit();
		}
	}

	function getTimeDiff($actualTime, $expectedTime) {
		$hrsMIn = 0;
		$actualTime = new DateTime($actualTime);
		$expectedTime = new DateTime($expectedTime);
		$interval = $expectedTime->diff($actualTime);
		$hrs = $interval->h;
		$hrsMIn = $hrs . ":" . $interval->i;
		return $hrsMIn;
	}

	function getRemark($actualtime, $estimatedTime) {
		$actualTimeArray = explode(" ", $actualtime);
		$actualTime = $actualTimeArray[1];
		return $this->timeCompare($actualTime, $estimatedTime);
	}

	function getRemarkFinal($actualTat, $tat) {

		if (abs($actualTat) > $tat) {
			/* return 'Late by '.abs(abs($actualTat)-$tat).' HRS'; */
			return 'Delayed';
		} else if (abs($actualTat) == $tat) {
			return 'Ontime';
		} else {
			return 'Early';
		}
	}

	function timeCompare($time1, $time2) {
		$strToTime1 = strtotime($time1);
		$strToTime2 = strtotime($time2);
		$timeDifference = $strToTime2 - $strToTime1;
		if ($timeDifference < 0) {
			return 'Late by ' . $this->getTimeDiff($time1, $time2);
		} else if ($timeDifference == 0) {
			return 'On Time';
		} else {
			return 'Early by ' . $this->getTimeDiff($time1, $time2);
		}
	}

	function getActualTimeOfArriaval($vehcileId, $startDate, $endDate, $checkpointid, $customerno) {
		$path = "sqlite:../../customer/$customerno/reports/chkreport.sqlite";
		$Query = "select * from V" . $vehcileId . " WHERE (chkid = " . $checkpointid . ") AND (date BETWEEN '$startDate 00:00:00' AND '$endDate 23:59:59') AND (status=0)";
		$db = new PDO($path);
		$sth = $db->prepare($Query);
		$sth->execute();
		$result = $sth->fetchAll();
		if (count($result) > 0) {
			return $result[0]['date'];
		} else {
			return '--';
		}
	}

	function getActualTimeOfDeparture($vehcileId, $startDate, $endDate, $checkpointid, $customerno) {
		$path = "sqlite:../../customer/$customerno/reports/chkreport.sqlite";
		$Query = "select * from V" . $vehcileId . " WHERE (chkid = " . $checkpointid . ") AND (date BETWEEN '$startDate 00:00:00' AND '$endDate 23:59:59') AND (status=1)";
		$db = new PDO($path);
		$sth = $db->prepare($Query);
		$sth->execute();
		$result = $sth->fetchAll();
		if (count($result) > 0) {
			return $result[0]['date'];
		} else {
			return '--';
		}
	}

	function getHaltTime($vehcileId, $startDate, $endDate, $checkpointid, $customerno) {
		$path = "sqlite:../../customer/$customerno/reports/chkreport.sqlite";
		$Query = "select * from V" . $vehcileId . " WHERE (chkid = " . $checkpointid . ") AND (date BETWEEN '$startDate 00:00:00' AND '$endDate 23:59:59') AND (status=0)";
		$db = new PDO($path);
		$sth = $db->prepare($Query);
		$sth->execute();
		$result = $sth->fetchAll();
		if (count($result) > 0) {
			$actualTimeOfArrivalArray = explode(" ", $result[0]['date']);
			$actualTimeOfArrival = $actualTimeOfArrivalArray[1];
		} else {
			$actualTimeOfArrival = '--';
		}

		$Query2 = "select * from V" . $vehcileId . " WHERE (chkid = " . $checkpointid . ") AND (date BETWEEN '$startDate 00:00:00' AND '$endDate 23:59:59') AND (status=1)";
		$sth2 = $db->prepare($Query2);
		$sth2->execute();
		$result2 = $sth2->fetchAll();

		if (count($result2) > 0) {
			$actualTimeOfDepartureArray = explode(" ", $result2[0]['date']);
			$actualTimeOfDeparture = $actualTimeOfDepartureArray[1];
		} else {
			$actualTimeOfDeparture = '--';
		}

		if ($actualTimeOfArrival != '--' && $actualTimeOfDeparture != '--') {
			return $this->getTimeDiff($actualTimeOfArrival, $actualTimeOfDeparture);
		} else {
			return '--';
		}

	}

	function getDataFromSqlite($path, $vehcileId, $startDate, $endDate, $checkPointId, $status, $orderByClause) {
		$db = new PDO($path);
		$query = "select * from V" . $vehcileId . " WHERE (date BETWEEN '$startDate 00:00:00' AND '$endDate 23:59:59') AND (chkid =" . $checkPointId . ") AND (status='" . $status . "')" . $orderByClause . " LIMIT 1";
		//echo"<br>Query is: ".$query;
		/* if($status==null)
	    {
	        $query = "select * from V" . $vehcileId. " WHERE (date BETWEEN '$startDate 00:00:00' AND '$endDate 23:59:59') AND (chkid =".$checkPointId.")";
	    }
	    else
	    {
	        $query = "select * from V" . $vehcileId. " WHERE (date BETWEEN '$startDate 00:00:00' AND '$endDate 23:59:59') AND (chkid =".$checkPointId.") AND (status='".$status."')";
*/
		//echo"<br>Query is:- ".$query; /*exit(); */
		$sth = $db->prepare($query);
		$sth->execute();
		$result = $sth->fetchAll();
		if (count($result) > 0) {
			return $result;
		} else {
			return null;
		}
	}
	function generateResultInOrderOfCheckPoints($path, $vehcileId, $startDate, $endDate, $checkPointData) {
		$returnDataArray = [];
		$db = new PDO($path);
		foreach ($checkPointData AS $key => $value) {
			$Query = "select * from V" . $vehcileId . " WHERE date BETWEEN '$startDate 00:00:00' AND '$endDate 23:59:59' AND chkid =" . $value['checkpointid'];
			$sth = $db->prepare($Query);
			$sth->execute();
			$result = $sth->fetchAll();
			$returnDataArray[] = $result;
			/* $checkPointId.= $value['checkpointid'].','; */
		}
		/* echo"Data in ordered is: <pre>";
			    print_r($returnDataArray);
		*/
		return $returnDataArray;
	}

	function getActalTat($startDataTime, $endDateTime) {
		$hourdiff = round((strtotime($startDataTime) - strtotime($endDateTime)) / 3600, 1);
		return floor($hourdiff);

		/*  $format = 'Y-m-d H:i:s';
			    $date1 = DateTime::createFromFormat($format, $startDataTime);
			    $date2 = DateTime::createFromFormat($format, $endDateTime);

			    //echo "Format: $format; " . $date->format('Y-m-d') . "n";
			    if($date1->format('Y-m-d') > $date2->format('Y-m-d'))
			    {
			        $hourdiff = round((strtotime($startDataTime) - strtotime($endDateTime))/3600, 1);
			        return floor($hourdiff);
			    }
			    else
			    {
			        return 'Invalidate Dates';
		*/

	}

	function getRouteSequenceDetails() {
		$route = array();
		$Query = "SELECT a.routeid, a.routename, c.checkpointid, c.sequence, c.rmid, cp.cgeolat, cp.cgeolong
            FROM route as a
            INNER join routeman as c on a.routeid=c.routeid and c.isdeleted = 0
            INNER JOIN checkpoint cp on cp.checkpointid = c.checkpointid and c.isdeleted = 0
            where a.isdeleted=0
            AND a.routeid = 926

            and c.isdeleted=0

            and a.customerno = $this->_Customerno

            and c.customerno = $this->_Customerno

            order by a.routeid,c.sequence ASC";
		$this->_databaseManager->executeQuery($Query);
		$this->_databaseManager->get_rowCount();
		if ($this->_databaseManager->get_rowCount() > 0) {
			while ($row = $this->_databaseManager->get_nextRow()) {
				$arrRoute = array();
				$arrRoute['rmid'] = $row['rmid'];
				$arrRoute['routeid'] = $row['routeid'];
				$arrRoute['routename'] = $row['routename'];

				$arrRoute['checkpointid'] = $row['checkpointid'];
				$arrRoute['sequence'] = $row['sequence'];
				$arrRoute['lat'] = $row['cgeolat'];
				$arrRoute['lng'] = $row['cgeolong'];
				$route[$row['routeid']][] = $arrRoute;
			}
		}

		return $route;
	}

} // end class
