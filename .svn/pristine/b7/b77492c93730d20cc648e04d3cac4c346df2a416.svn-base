CREATE DATABASE  IF NOT EXISTS `speed` /*!40100 DEFAULT CHARACTER SET latin1 */;
USE `speed`;
-- MySQL dump 10.13  Distrib 5.7.23, for Linux (x86_64)
--
-- Host: 54.254.205.60    Database: speed
-- ------------------------------------------------------
-- Server version	5.5.56-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping events for database 'speed'
--

--
-- Dumping routines for database 'speed'
--
/*!50003 DROP PROCEDURE IF EXISTS `addNote` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `addNote`(
    IN ticketidParam INT(11)
    ,IN noteParam VARCHAR(255)
    ,IN lteamidParam INT(11)
    ,IN todaysdateParam DATETIME
    ,OUT isexecutedOut TINYINT(1)
)
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
            ROLLBACK;
            /* GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
            @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
            SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
            SELECT @full_error;  */ 
            SET isexecutedOut = 0;
	END;

        

    BEGIN

        SET isexecutedOut = 0;
    
        START TRANSACTION;
        BEGIN

            INSERT INTO sp_note (`ticketid`
                , `note`
                , `create_by`
                , `is_customer`
                , `create_on_date`) 
            VALUES (ticketidParam
                ,noteParam
                ,lteamidParam
                ,0
                ,todaysdateParam);

            SET isexecutedOut = 1;
        
        END;
        COMMIT; 

    END;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `addTicket` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `addTicket`(
    IN titleParam VARCHAR(250)
    ,IN customernoParam INT(11)
    ,IN descParam VARCHAR(255)
    ,IN tickettypeParam INT(11)
    ,IN allottoParam INT(11)
    ,IN raiseondateParam DATETIME
    ,IN expecteddateParam DATE
    ,IN mailStatusParam TINYINT(2)
    ,IN ticketmailidParam VARCHAR(255)
    ,IN ccemailidParam VARCHAR(255)
    ,IN priorityParam INT(11)
    ,IN todaysdateParam DATETIME
    ,IN createdbyParam INT(11)
    ,IN lteamidParam INT(11)
    ,IN platformParam TINYINT(2)
    ,OUT isexecutedOut TINYINT(2)
    ,OUT ticketidOut INT(11)
    ,OUT tickettypenameOut VARCHAR(100)
    ,OUT prioritynameOut VARCHAR(100)
    ,OUT allottoemailOut VARCHAR(50)
)
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
            ROLLBACK;
	    /*
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
            @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
            SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
            SELECT @full_error; 
	*/	
            SET isexecutedOut = 0;
	    
	END;

    BEGIN

        IF tickettypeParam <> '' THEN

            SELECT  tickettype 
            INTO    tickettypenameOut
            FROM    sp_tickettype 
            WHERE   typeid = tickettypeParam 
            AND     isdeleted = 0 ;

        END IF;

        IF priorityParam <> '' THEN

            SELECT  priority 
            INTO    prioritynameOut
            FROM    sp_priority 
            WHERE   prid = priorityParam 
            AND     isdeleted = 0 ;

        END IF;

        SELECT  email 
        INTO    allottoemailOut
        FROM    team 
        WHERE   teamid = allottoParam;

        START TRANSACTION;	 
        BEGIN

            INSERT INTO `sp_ticket`(`title`
                    ,`ticket_type`
                    ,`customerid` 
                    ,`eclosedate`
                    ,`send_mail_status`
                    ,`send_mail_to`
                    ,`send_mail_cc`
                    ,`priority`
                    ,`raised_on_date`
                    ,`create_on_date`
                    ,`create_by`
                    ,`create_platform`)
            VALUES (titleParam
                    ,tickettypeParam
                    ,customernoParam
                    ,expecteddateParam
                    ,mailStatusParam
                    ,ticketmailidParam
                    ,ccemailidParam
                    ,priorityParam
                    ,raiseondateParam
                    ,todaysdateParam
                    ,createdbyParam
                    ,platformParam);

            SELECT  LAST_INSERT_ID() 
            INTO    ticketidOut;

            INSERT INTO `sp_ticket_details`(`ticketid`
                ,`description`
                ,`allot_from`
                ,`allot_to`
                ,`status`
                ,`create_by`
                ,`create_on_time`
                ,`send_mail_status`
                ,`userid`)
            VALUES (ticketidOut
                ,descParam
                ,lteamidParam
                ,allottoParam
                ,0
                ,createdbyParam
                ,todaysdateParam
                ,mailStatusParam
                ,0);

            SET isexecutedOut = 1;
        
        END;
        COMMIT; 
    END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `add_bank_statement_to_tally` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `add_bank_statement_to_tally`(
  IN statementidParam INT
    , IN teamid INT
    , IN todaysdate DATETIME
)
BEGIN

  UPDATE bank_statement

  SET enteredInTally = 1
    ,updated_by = teamid
    ,updated_on= todaysdate
  WHERE statementid = statementidParam
  AND isdeleted = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `api_update_device_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `api_update_device_details`(
	 IN vehicleNoParam VARCHAR(40)
	, IN unitNoParam VARCHAR(16)
	, IN devicelatParam DECIMAL(9,6)
	, IN devicelngParam DECIMAL(9,6)
	, IN altitudeParam INT UNSIGNED
	, IN dirChangeParam INT UNSIGNED
	, IN inbattParam INT UNSIGNED
	, IN ignitionParam TINYINT(1) UNSIGNED
	, IN gsmStrengthParam TINYINT UNSIGNED
	, IN odometerParam BIGINT
	, IN curspeedParam TINYINT UNSIGNED
	, IN analog1Param INT
	, IN analog2Param INT
	, IN analog3Param INT
	, IN analog4Param INT
	, IN digitalioParam SMALLINT
	, IN driverNameParam VARCHAR(50)
	, IN custnoParam INT
	, IN lastUpdatedParam DATETIME
)
BEGIN
	DECLARE isUpdated TINYINT;
    DECLARE varUid INT;
    DECLARE varVehicleId INT;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
		SET isUpdated = 0;
	END;
	IF unitNoParam != '' THEN
		SET unitNoParam = REPLACE(unitNoParam, ' ','');
	    SELECT 	uid, vehicleid
	    INTO 	varUid, varVehicleId
	    FROM 	unit
	    WHERE 	REPLACE(unitno, ' ','') = unitNoParam
	    AND 	customerno = custnoParam
	    LIMIT 	1;
	ELSEIF unitNoParam = '' AND vehicleNoParam != '' THEN
		SET vehicleNoParam = REPLACE(vehicleNoParam, ' ','');
	    SELECT 	uid, vehicleid
	    INTO 	varUid, varVehicleId
	    FROM 	vehicle
	    WHERE 	REPLACE(vehicleno, ' ','') = vehicleNoParam
	    AND 	customerno = custnoParam
	    AND 	isdeleted = 0
	    LIMIT 	1;
	END IF;

	START TRANSACTION;
		UPDATE	devices
		SET 	devicelat = devicelatParam
				,devicelong = devicelngParam
				,altitude = altitudeParam
				,directionchange = dirChangeParam
                ,inbatt = inbattParam
                ,ignition = ignitionParam
                ,gsmstrength = gsmStrengthParam
				,powercut = 1
				,tamper = 0
				,`online/offline`= 0
				, lastupdated = lastUpdatedParam
		WHERE	uid = varUid;

		UPDATE 	vehicle
		SET 	lastupdated = lastUpdatedParam
				,nodata_alert = 0
				,odometer = odometerParam
				,curspeed = curspeedParam
		WHERE 	uid = varUid;

		UPDATE 	unit
		SET 	analog1 = analog1Param
				,analog2 = analog2Param
				,analog3 = analog3Param
				,analog4 = analog4Param
				,digitalio = digitalioParam
		WHERE 	uid = varUid;

		UPDATE 	driver
		SET 	driverName = driverNameParam
		WHERE 	vehicleid = varVehicleId;

		SET isUpdated = 1;
	COMMIT;

    SELECT 		u.uid, u.unitno, v.vehicleid, d.deviceid, dr.driverid, isUpdated
    FROM		unit u
    INNER JOIN	devices d on d.uid = u.uid
    INNER JOIN	vehicle v on v.uid = u.uid
    INNER JOIN	driver dr on dr.vehicleid = v.vehicleid
    WHERE		u.uid = varUid;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `authenticate_for_login` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `authenticate_for_login`(
IN `usernameparam` VARCHAR(50),
IN `passparam` VARCHAR(150),
IN `todaydt` DATETIME,
OUT `usertype` INT,
OUT `userkeyparam` INT,
OUT `userauthtype` INT
)
BEGIN
  DECLARE useridparam INT;
    DECLARE tempPwdParam VARCHAR(150);


  SET usertype = 0;
  SET userkeyparam = 0;
  SET userauthtype = 0;

  SELECT  userid,userkey,c.multiauth
  INTO  useridparam , userkeyparam,userauthtype
  FROM    user
  INNER JOIN customer AS c ON c.customerno = user.customerno
  WHERE   username = usernameparam
  AND   password = passparam
  AND   isdeleted = 0
  AND     c.isoffline = 0;

  IF (useridparam IS NULL)THEN
    BEGIN
      SELECT  f.userid, u.userkey, c.multiauth
            INTO  useridparam, userkeyparam, userauthtype
      FROM  forgot_password_request AS f
            INNER JOIN  user AS u ON u.userid = f.userid
      INNER JOIN customer AS c ON c.customerno = u.customerno
      WHERE   f.username = usernameparam
      AND   CAST(SHA1(f.otp) AS BINARY) = CAST(passparam AS BINARY)
      AND   f.isdeleted = 0
            AND   u.isdeleted = 0
      AND     c.isoffline = 0
      AND   f.isused = 0
      AND   f.request_counter <= 3
      AND   f.validupto BETWEEN todaydt AND DATE_ADD(todaydt, INTERVAL 24 HOUR);
    END;
    IF (useridparam IS NOT NULL) THEN
      BEGIN

        SET usertype = 1;
      END;
    END IF;
  END IF;

  IF (useridparam IS NOT NULL AND usertype = 0)THEN
    BEGIN

      SELECT    *
      FROM    user
      INNER JOIN  customer ON user.customerno = customer.customerno
      INNER JOIN  android_version
      WHERE     userid = useridparam AND isdeleted =0 AND customer.isoffline = 0;
    END;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `authenticate_for_login_fms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `authenticate_for_login_fms`(
	IN `usernameparam` VARCHAR(50),
	IN `passparam` VARCHAR(150),
	IN `todaydt` DATETIME,
	OUT `usertype` INT,
	OUT `userkeyparam` INT,
	OUT `userauthtype` INT
	)
BEGIN
	  DECLARE useridparam INT;
	  DECLARE tempPwdParam VARCHAR(150);

	  SET usertype = 0;
	  SET userkeyparam = 0;
	  SET userauthtype = 0;

	  SELECT  userid,userkey,c.multiauth
	  INTO  useridparam , userkeyparam,userauthtype
	  FROM    user
	  INNER JOIN `speed`.customer AS c ON c.customerno = user.customerno
	  WHERE   username = usernameparam
	  AND   password = passparam
	  AND   isdeleted = 0
	  AND     c.isoffline = 0;

	  IF (useridparam IS NULL)THEN
	    BEGIN
	      SELECT  f.userid, u.userkey, c.multiauth
		    INTO  useridparam, userkeyparam, userauthtype
	      FROM  forgot_password_request AS f
		    INNER JOIN  user AS u ON u.userid = f.userid
	      INNER JOIN `speed`.customer AS c ON c.customerno = u.customerno
	      WHERE   f.username = usernameparam
	      AND   CAST(SHA1(f.otp) AS BINARY) = CAST(passparam AS BINARY)
	      AND   f.isdeleted = 0
		    AND   u.isdeleted = 0
	      AND     c.isoffline = 0
	      AND   f.isused = 0
	      AND   f.request_counter <= 3
	      AND   f.validupto BETWEEN todaydt AND DATE_ADD(todaydt, INTERVAL 24 HOUR);
	    END;
	    IF (useridparam IS NOT NULL) THEN
	      BEGIN

		SET usertype = 1;
	      END;
	    END IF;
	  END IF;

	  IF (useridparam IS NOT NULL AND usertype = 0)THEN
	    BEGIN

	      SELECT    *
	      FROM    user
	      INNER JOIN  `speed`.customer ON user.customerno = customer.customerno
	      INNER JOIN  android_version
	      WHERE     userid = useridparam AND isdeleted =0 AND customer.isoffline = 0;
	    END;
	  END IF;

	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `authenticate_for_team_login` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `authenticate_for_team_login`(
	IN usernameparam VARCHAR(50)
	,IN passparam VARCHAR(150)
	,OUT userkeyparam VARCHAR(150)
        ,OUT teamidparam INT
        ,OUT roleparam VARCHAR(50)
)
BEGIN
        DECLARE userkeydata VARCHAR(150);
	DECLARE teamiddata INT;
  
	SELECT  teamid,userkey,role
	INTO	teamiddata,userkeydata, roleparam
	FROM    team
	WHERE   username = usernameparam
	AND 	`password` = passparam;
	
	IF (teamiddata IS NULL)THEN 
            BEGIN
		SET userkeyparam='Empty';
            END;
        ELSE
            BEGIN
                IF (userkeydata IS NULL OR userkeydata='') THEN 
                    BEGIN 
                        UPDATE team SET userkey=FLOOR(1+RAND()*10000) WHERE teamid=teamiddata;
                        SELECT userkey INTO userkeydata FROM team where teamid=teamiddata;
                        SET userkeyparam = userkeydata;
                        SET teamidparam=teamiddata;
                    END;
                ELSE
                    BEGIN
                        SELECT userkey INTO userkeydata FROM team where teamid=teamiddata;
                        SET userkeyparam = userkeydata;
                        SET teamidparam=teamiddata;
                    END;
                END IF;
            END;
        END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `check_vehicle_user_mapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `check_vehicle_user_mapping`(
	IN useridparam INT
    , OUT groupidparam INT
    , OUT isUserMappedToVehicle TINYINT(1)
)
BEGIN
			SET isUserMappedToVehicle = 0;
            SET groupidparam = -1;
            
			/* Check whether any existing user has the group */
            SELECT	groupid
            INTO	groupidparam
			FROM	groupman
			WHERE 	userid = useridparam
			AND 	isdeleted = 0;
            
            IF (groupidparam IS NOT NULL AND groupidparam != -1) THEN
				SET isUserMappedToVehicle = 1;
			END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_bank_statement` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_bank_statement`(
  IN statementidParam INT
    , IN teamid INT
    , IN todaysdate DATETIME
)
BEGIN

  UPDATE bank_statement

  SET isdeleted = 1
    ,updated_by = teamid
    ,updated_on= todaysdate
  WHERE statementid = statementidParam
  AND isdeleted = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_category` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_category`(
  IN categoryidParam INT
    ,IN teamid INT
    ,IN todaysdate DATETIME
)
BEGIN
  UPDATE category
  SET isdeleted = 1
  , updated_by = teamid
  , updated_on = todaysdate
  WHERE categoryid = categoryidParam
  AND isdeleted = 0;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_from_ticketusermapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_from_ticketusermapping`(
IN ticketidIn INT(20))
BEGIN
    DELETE FROM ticket_user_mapping
    WHERE ticketid  =   ticketidIn;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_ledger` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_ledger`( 
	IN ledgeridparam INT
	, IN updatedby INT
    , IN updatedon DATETIME
)
BEGIN
	UPDATE ledger SET 
    isdeleted = 1
    ,updatedby = updatedby
    ,updatedon = updatedon
    WHERE ledgerid = ledgeridparam
    ;
    /* DELETE LEDGER MAPPING WITH VEHICLE*/
    CALL `delete_ledger_veh_mapping`(0,0,ledgeridparam,updatedby,updatedon);    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_ledger_cust_mapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_ledger_cust_mapping`( 
	IN ledgeridparam INT
	, IN updatedby INT
    , IN updatedon DATETIME
)
BEGIN
	UPDATE ledger_cust_mapping SET 
    isdeleted = 1
    ,updatedby = updatedby
    ,updatedon = updatedon
    WHERE ledgerid = ledgeridparam
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_ledger_veh_mapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_ledger_veh_mapping`( 
    IN ledger_veh_mapidparam INT
    , IN customernoparam INT
    , IN ledgeridparam INT
    , IN updatedby INT
    , IN updatedon DATETIME
)
BEGIN
IF(ledger_veh_mapidparam = '' OR ledger_veh_mapidparam = '0') THEN
 SET ledger_veh_mapidparam = NULL;
END IF;

IF(customernoparam = '' OR customernoparam = '0') THEN
 SET customernoparam = NULL;
END IF;

IF(ledgeridparam = '' OR ledgeridparam = '0') THEN
 SET ledgeridparam = NULL;
END IF;
UPDATE 
 ledger_veh_mapping as lv
 SET lv.isdeleted = 1
 ,lv.updatedby = updatedby
 ,lv.updatedon = updatedon
WHERE (lv.ledger_veh_mapid  = ledger_veh_mapidparam OR ledger_veh_mapidparam IS NULL)
AND (lv.customerno = customernoparam OR customernoparam IS NULL)
AND (lv.ledgerid = ledgeridparam OR ledgeridparam IS NULL)
;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_maintenanace_conditions` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_maintenanace_conditions`(
    IN cond_id INT
    , IN todaysdate DATETIME
    , IN userid INT
)
BEGIN
	UPDATE maintenanace_conditions 
    SET  isdeleted = 1
	, updated_on = todaysdate
        , updated_by = userid
	WHERE conditionid = cond_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_maintenanace_rules` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_maintenanace_rules`(
    IN rid INT
    , IN custno INT
    , IN todaysdate DATETIME
    , IN userid INT
)
BEGIN
	UPDATE maintenance_rules 
        SET  isdeleted = 1
	, updated_on = todaysdate
        , updated_by = userid
	WHERE ruleid = rid
        AND customerno = custno;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_outdated_forgotpass_user` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_outdated_forgotpass_user`(
	IN today DATETIME
)
BEGIN

UPDATE forgot_password_request SET isdeleted = 1
WHERE today > validupto;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_po` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_po`(
	IN poidparam INT
    , IN custparam INT
    , IN updatedby INT
    , IN updatedon DATETIME
	)
BEGIN
UPDATE po
SET isdeleted = 1
 ,updatedby = updatedby
 ,updatedon = updatedon
WHERE poid  =  poidparam
AND customerno = custparam
;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_role` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_role`( 
    IN roleid INT
    , IN custno INT
    , IN todaysdate DATETIME
    , IN userid INT
)
BEGIN
	DECLARE currentparentroleid INT;
	DECLARE childroleid INT;
	
        SELECT parentroleid into currentparentroleid from role 
        WHERE  id = roleid;

        SELECT id into childroleid from role 
        WHERE parentroleid = roleid;
        /* Check For parentroleid is 0 */
        IF (currentparentroleid is NOT NULL && currentparentroleid != 0) THEN
            BEGIN
                IF(childroleid IS NOT NULL && childroleid != 0) THEN
                    /* 
                        Assign current role's parent to current role's child
                    */
                    UPDATE role
                    SET     parentroleid = currentparentroleid
                    WHERE   id = childroleid
                    AND     customerno = custno
                    AND     isdeleted = 0;

                END IF;
                /* 
                        Update the current role details
                */
                UPDATE role
                SET     isdeleted = 1
                WHERE   id = roleid 
                AND     customerno = custno;
            END;
            /* Re-sequencing hierarachy*/
            CALL sequence_role(custno);
        END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_transmitter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_transmitter`( 
    IN transmitteridparam INT
    , IN customernoparam INT
    , IN updated_on DATETIME
    , IN updated_by INT
)
BEGIN
 UPDATE transmitter SET 
			isdeleted = 1
            ,updated_on = updated_on
            ,updated_by = updated_by
  WHERE      transmitterid = transmitteridparam 
	AND 	customerno = customernoparam
        ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_unit_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `delete_unit_details`(
	IN unitnoParam VARCHAR(11)
	, IN custnoParam INT
    , OUT isUnitDeleted  INT
)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		/* 
			It would work for mysql version >= 5.6.4 and mariadb.
            Uncomment the following lines to check error if you have above mentioned versions.        
        */
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, 
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
        */
		ROLLBACK;
        SET isUnitDeleted = 0;
	END;
	START TRANSACTION;
		/* UNIT TABLE OPERATIONS */
		SET @uidToBeDeleted = (SELECT uid FROM unit WHERE unitno = unitnoParam AND customerno = custnoParam LIMIT 1);
		DELETE FROM unit 			WHERE uid = @uidToBeDeleted;

		/* VEHICLE TABLE OPERATIONS */
        SET @vehicleidToBeDeleted = (SELECT vehicleid FROM vehicle WHERE uid = @uidToBeDeleted LIMIT 1);
        DELETE FROM vehicle 		WHERE vehicleid = @vehicleidToBeDeleted;

		/* DRIVER TABLE OPERATIONS */        
        DELETE FROM driver 			WHERE vehicleid = @vehicleidToBeDeleted;

		/* IGNITION ALERT TABLE OPERATIONS */
		DELETE FROM ignitionalert 	WHERE vehicleid = @vehicleidToBeDeleted;
       
		/* EVENT ALERT TABLE OPERATIONS */
		DELETE FROM eventalerts 	WHERE vehicleid = @vehicleidToBeDeleted;

		/* DEVICES TABLE OPERATIONS */
        SET @simcardidToBeDeleted = (SELECT simcardid FROM devices WHERE uid = @uidToBeDeleted LIMIT 1);
        
        DELETE FROM devices 		WHERE uid = @uidToBeDeleted;
		
		/* SIMCARD TABLE OPERATIONS */
		DELETE FROM simcard 		WHERE id = @simcardidToBeDeleted;

		/* DAILY REPORT OPERATIONS */
		DELETE FROM dailyreport		WHERE vehicleid = @vehicleidToBeDeleted;
		
        SET isUnitDeleted = 1;
    COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `editBucketCRM` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `editBucketCRM`(
     IN statusParam TINYINT(2)
    ,IN customernoParam INT(11)
    ,IN vehicleidParam INT(11)
    ,IN createdbyParam INT(11)
    ,IN priorityidParam TINYINT(2)
    ,IN locationParam VARCHAR(50)
    ,IN timeslotParam TINYINT(2)
    ,IN purposeidParam TINYINT(2)
    ,IN detailsParam VARCHAR(100)
    ,IN dataParam VARCHAR(100)
    ,IN coordinatorParam INT(11)
    ,IN aptdateParam DATETIME
    ,IN conameParam VARCHAR(50)
    ,IN cophoneParam INT(11)
    ,IN bucketidParam INT(11)
    ,IN todaysdateParam DATETIME
    ,OUT isexecutedOut TINYINT(2))
BEGIN

DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
            ROLLBACK;
            /* GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
            @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
            SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
            SELECT @full_error;   */
            SET isexecutedOut = 0;
	END;
    BEGIN 

    START TRANSACTION;	 
    BEGIN

        IF conameParam <> '' THEN

            INSERT INTO contactperson_details (`typeid` 
                    ,`person_name`
                    ,`cp_phone1`
                    , `customerno`
                    , `insertedby`
                    , `insertedon`)
            VALUES (3
                    ,conameParam
                    , cophoneParam
                    , customernoParam
                    , createdbyParam
                    , todaysdateParam);

            SELECT LAST_INSERT_ID() INTO coordinatorParam;

        END IF;

        IF statusParam = 0 THEN

            UPDATE  bucket 
            SET     apt_date = aptdateParam 
                    , coordinatorid = coordinatorParam
                    , priority = priorityidParam
                    , location = locationParam
                    , timeslotid = timeslotParam
                    , purposeid = purposeidParam
                    , details = detailsParam
                    , status = statusParam
                    , create_timestamp = todaysdateParam 
            where   bucketid = bucketidParam;

        END IF;

        IF statusParam = 5 THEN

            UPDATE  bucket 
            SET     status=statusParam
                    , cancelled_timestamp = todaysdateParam
                    , cancellation_reason = dataParam 
            where   bucketid=bucketidParam;

        END IF;

        IF statusParam = 1 THEN

            UPDATE  bucket 
            SET     status= statusParam
                    , reschedule_date= dataParam
                    , reschedule_timestamp = todaysdateParam 
            where   bucketid = bucketidParam;


            INSERT INTO bucket (`apt_date`
                ,`customerno`
                ,`created_by`
                , `priority`
                , `vehicleid`
                , `location`
                , `timeslotid`
                , `purposeid`
                , `details`
                , `coordinatorid`
                , `create_timestamp`, status)
            VALUES (dataParam,customernoParam
                ,createdbyParam
                , priorityidParam
                , vehicleidParam
                ,locationParam
                ,timeslotParam
                ,purposeidParam
                ,detailsParam
                ,coordinatorParam
                ,todaysdateParam
                ,0);

        END IF;
        
        SET isexecutedOut = 1;
    END;
    COMMIT;
    
END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `editBucketOperation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `editBucketOperation`(
      IN statusParam INT(11)
     ,IN bucketidParam INT(11)
     ,IN dataParam VARCHAR(100)
     ,IN todaysdateParam DATETIME
     ,OUT isexecutedOut TINYINT(2))
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
       /* GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error;   */
        SET isexecutedOut = 0;
    END;
    BEGIN 

    START TRANSACTION;	 
    BEGIN
        IF statusParam = 4 THEN

            UPDATE  bucket 
            SET     fe_id= dataParam
                    ,status=statusParam
                    ,fe_assigned_timestamp = todaysdateParam 
            where   bucketid= bucketidParam;

        END IF;

        IF statusParam = 5 THEN

            UPDATE  bucket 
            SET     status=statusParam 
                    ,cancelled_timestamp = todaysdateParam 
                    , cancellation_reason= dataParam 
            where   bucketid=bucketidParam;

        END IF;

        IF statusParam = 1 THEN

            UPDATE  bucket 
            SET     status =statusParam
                    , reschedule_date=dataParam
                    ,reschedule_timestamp = todaysdateParam 
            where   bucketid=bucketidParam;

            INSERT INTO bucket(`apt_date`
                    ,`customerno`
                    ,`created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    , `create_timestamp`
                    , `status`)
            SELECT   dataParam
                    ,`customerno`
                    ,`created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    , todaysdateParam
                    , 0
            FROM    bucket 
            WHERE   bucketid=bucketidParam
            ORDER BY `bucketid` DESC
            LIMIT   1;

        END IF;

        SET isexecutedOut = 1;

    END;
    COMMIT;

END;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `editTicket` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `editTicket`(
    IN ticketidParam INT(11)
    ,IN customernoParam INT(11)
    ,IN ticketallotParam INT(11)
    ,IN ticketdescParam VARCHAR(255)
    ,IN ticketstatusParam TINYINT(1)
    ,IN createdbyParam INT(11)
    ,IN expecteddateParam DATE
    ,IN tickettypeParam INT(11)
    ,IN sendemailstatusParam TINYINT(1)
    ,IN toemailidParam VARCHAR(255)
    ,IN ccemailidParam VARCHAR(255)
    ,IN priorityidParam INT(11)
    ,IN todaysdateParam DATETIME
    ,IN noteParam VARCHAR(255)
    ,IN createdtypeParam TINYINT(1)
    ,OUT isexecutedOut TINYINT(1)
    ,OUT mailsendtoOut VARCHAR(255)
    ,OUT createbynameOut VARCHAR(150)
    ,OUT allottonameOut VARCHAR(150)
)
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
            ROLLBACK;
            /* GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
            @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
            SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
            SELECT @full_error;   */
            SET isexecutedOut = 0;
	END;

    BEGIN
    
    DECLARE addcountVar INT(5) DEFAULT 0;
    DECLARE eclosedateVar DATE;

        SELECT  `email` 
                ,`name`
        INTO    mailsendtoOut
                ,createbynameOut
        FROM    `team` 
        WHERE   teamid = createdbyParam;

        SELECT `name`
        INTO    allottonameOut
        FROM    `team`
        WHERE   teamid = ticketallotParam;

        SELECT  eclosedate 
        INTO    eclosedateVar
        FROM    sp_ticket
        WHERE   ticketid = ticketidParam;
        
        IF  expecteddateParam > eclosedateVar THEN
            SET addcountVar = 1;
        END IF;

        SET isexecutedOut = 0;

        START TRANSACTION;
        BEGIN

            INSERT INTO `sp_note`(`ticketid` ,
                        `note`,
                        `create_by`,
                        `sendemailto`,
                        `create_on_date`)
            VALUES (ticketidParam
                        ,noteParam
                        ,createdbyParam
                        ,mailsendtoOut
                        ,todaysdateParam);

            update  sp_ticket 
            set     priority= priorityidParam
                    , send_mail_status= sendemailstatusParam
                    , customerid= customernoParam
                    , eclosedate = expecteddateParam
                    , eclosedate_chng_count = eclosedate_chng_count + addcountVar  
            where   ticketid= ticketidParam;

            if createdtypeParam = 0 THEN

                INSERT INTO `sp_ticket_details`(`ticketid`,
                        `description`,
                        `allot_from`,
                        `allot_to`,
                        `status`,
                        `create_by`,
                        `create_on_time`,
                        `userid`,
                        `eclosedate`)
                VALUES (ticketidParam
                        ,ticketdescParam
                        ,createdbyParam
                        ,ticketallotParam
                        ,ticketstatusParam
                        ,createdbyParam
                        ,todaysdateParam
                        ,'0'
                        ,expecteddateParam);

            ELSE

                INSERT INTO `sp_ticket_details`(
                        `ticketid` ,
                        `description`,
                        `allot_from`,
                        `allot_to`,
                        `status`,
                        `create_by`,
                        `create_on_time`,
                        `eclosedate`,
                        `userid`,
                        `created_type`)
                VALUES (ticketidParam
                        ,ticketdescParam
                        ,createdbyParam
                        ,ticketallotParam
                        ,ticketstatusParam
                        ,createdbyParam
                        ,todaysdateParam
                        ,expecteddateParam
                        ,'0'
                        ,1);
            END IF; 

            SET isexecutedOut = 1;
        
        END;
        COMMIT; 

    END;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `elixiasms_insert_request` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `elixiasms_insert_request`(
	 IN phoneNoParam VARCHAR(10)
	, IN messageParam VARCHAR(10)
	, IN requestedOnParam DATETIME
    , IN userIdParam INT
    , IN custnoParam INT    
	, IN todaysDate DATETIME
	, OUT insertedId INT
)
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
		SET insertedId = 0;
	END;
    START TRANSACTION;
		BEGIN
			INSERT INTO speed.elixiaSms
			(
				userPhoneNo
				,message
				,requestedOn
                ,userId
				,customerno
				,createdOn
			)
			VALUES
			(
				phoneNoParam
                ,messageParam
                ,requestedOnParam
                ,userIdParam
                ,custnoParam
                ,todaysDate
            );
            SET insertedId = LAST_INSERT_ID();
        END;
	COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `fetchInvoiceReminders` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `fetchInvoiceReminders`(
	IN invIdParam INT
)
BEGIN
	SELECT ir.inv_rem_id,c.customercompany,it.inv_type_name,ir.customerno,ir.ledgerno,ir.productId,
		ir.remarks,ip.prod_name,ir.expectedInvDate,ir.inv_amt as invoiceAmount,
		ir.inv_desc,ir.invoiceid,
        (CASE WHEN ir.contract_type=3
			THEN 'N.A.'
		ELSE ir.amount
		END
        )as amount,
        (CASE WHEN ir.contract_type=3
			THEN 'N.A.'
		ELSE
			ir.amc_amount
        END)as amc_amount,ir.reminder_date,ir.start_date,ir.end_date,ic.cycle_name,ir.invoice_generated,
        l.ledgername
    
    FROM invoice_reminders ir
    
    LEFT JOIN customer c ON c.customerno = ir.customerno
    LEFT JOIN invoice_type it ON it.inv_type_id=ir.contract_type
    LEFT JOIN invoice_products ip ON ip.prod_id = ir.productId
    LEFT JOIN invoice_cycles ic ON ic.cycle_id = ir.cycle 
    LEFT JOIN speed.ledger l ON l.ledgerid = ir.ledgerno
    WHERE ir.isdeleted = 0 AND (inv_rem_id = invIdParam OR invIdParam = 0)  ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `fetch_chatdetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `fetch_chatdetails`(IN `useridParam` INT)
BEGIN
              
SELECT 	chatDetailsId
		,customerno
		,external_id
		,restore_id
FROM 	chatdetails 
WHERE 	external_id = useridParam;
                    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `fetch_ledger` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `fetch_ledger`(
    IN customernoParam VARCHAR(20)
)
BEGIN
SELECT DISTINCT l.ledgerid,l.ledgername
from ledger l
LEFT JOIN ledger_cust_mapping lcm ON lcm.ledgerid = l.ledgerid
LEFT JOIN customer c ON  lcm.customerno = c.customerno 
where c.customerno = customernoParam and l.ledgerid <> 0 AND l.isdeleted = 0
ORDER BY l.ledgerid; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `fetch_paid_invoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `fetch_paid_invoices`(
IN ledgerParam INT)
BEGIN
SELECT i.invoiceid,invoiceno
  from invoice i
  WHERE ledgerid =  ledgerParam AND (i.inv_amt = (CAST(i.paid_amt AS DECIMAL(8,2)))+CAST(i.tds_amt AS DECIMAL(8,2))+CAST(i.unpaid_amt AS DECIMAL(8,2)))AND
  i.invoiceid NOT IN(SELECT ip.invoiceid from invoice_payment_mapping ip where ip.invoiceid = i.invoiceid)
  UNION
  SELECT DISTINCT i.invoiceid,i.invoiceno
  from invoice_payment_mapping ip 
  INNER JOIN invoice i on i.invoiceid = ip.invoiceid
  WHERE i.ledgerid = ledgerParam AND i.inv_amt = (SELECT (sum(ipm.paid_amt)+sum(ipm.tds_amt)+sum(ipm.bad_debts))+CAST(i.paid_amt AS DECIMAL(8,2))+CAST(i.tds_amt AS DECIMAL(8,2))+CAST(i.unpaid_amt AS DECIMAL(8,2)) from invoice_payment_mapping ipm where ipm.invoiceid=ip.invoiceid)
  GROUP BY invoiceid
  ORDER BY invoiceid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `fetch_pending_invoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `fetch_pending_invoices`(
IN ledgerParam INT)
BEGIN
  SELECT i.invoiceid,invoiceno
  from invoice i
  WHERE ledgerid =  ledgerParam AND (i.inv_amt <> (CAST(i.paid_amt AS DECIMAL(8,2)))+CAST(i.tds_amt AS DECIMAL(8,2))+CAST(i.unpaid_amt AS DECIMAL(8,2)))AND
  i.invoiceid NOT IN(SELECT ip.invoiceid from invoice_payment_mapping ip where ip.invoiceid = i.invoiceid)
  UNION
  SELECT DISTINCT i.invoiceid,i.invoiceno
  from invoice_payment_mapping ip 
  INNER JOIN invoice i on i.invoiceid = ip.invoiceid
  WHERE i.ledgerid = ledgerParam AND i.inv_amt <> (SELECT (sum(ipm.paid_amt)+sum(ipm.tds_amt)+sum(ipm.bad_debts))+CAST(i.paid_amt AS DECIMAL(8,2))+CAST(i.tds_amt AS DECIMAL(8,2))+CAST(i.unpaid_amt AS DECIMAL(8,2)) from invoice_payment_mapping ipm where ipm.invoiceid=ip.invoiceid)
  GROUP BY invoiceid
  ORDER BY invoiceid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `fetch_unit_customer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `fetch_unit_customer`(
    IN unitnoParam VARCHAR(16),
    IN customernoParam INT,
    OUT isExists INT,
    OUT vehicleNoVar varchar(40)
)
BEGIN
	SET isExists = 0;

	select v.vehicleno
	INTO vehicleNoVar
	from vehicle v
	INNER JOIN unit u on u.uid = v.uid
	where u.unitno = unitnoParam and u.customerno=customernoParam;

    IF(vehicleNoVar<>'')
    THEN
    SET isExists = 1;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `geotracker_update_device_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `geotracker_update_device_details`(
	 IN vehicleNoParam VARCHAR(40)
	, IN devicelatParam DECIMAL(9,6)
	, IN devicelngParam DECIMAL(9,6)
	, IN altitudeParam INT UNSIGNED
	, IN dirChangeParam INT UNSIGNED
	, IN ignitionParam TINYINT(1) UNSIGNED
	, IN odometerParam BIGINT
	, IN curspeedParam TINYINT UNSIGNED
	, IN analog1Param INT
	, IN digitalioParam SMALLINT
    , IN stoppageTransitTimeParam DATETIME
	, IN custnoParam INT
	, IN lastUpdatedParam DATETIME
)
BEGIN
	DECLARE isUpdated TINYINT;
    DECLARE varUid INT;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
		SET isUpdated = 0;
	END;
    
    SET vehicleNoParam = REPLACE(vehicleNoParam, ' ','');
    
    SELECT 	uid INTO varUid
    FROM 	vehicle
    WHERE 	REPLACE(vehicleno, ' ','') = vehicleNoParam
    AND 	customerno = custnoParam 
    AND 	isdeleted = 0
    LIMIT 	1;
    
	START TRANSACTION;
		UPDATE	devices
		SET 	devicelat = devicelatParam
				,devicelong = devicelngParam
				,altitude = altitudeParam
				,directionchange = dirChangeParam
                ,ignition = ignitionParam
				,powercut = 1
				,tamper = 0
				,`online/offline`= 0
				, lastupdated = lastUpdatedParam
		WHERE	uid = varUid;

		UPDATE 	vehicle
		SET 	lastupdated = lastUpdatedParam
				,nodata_alert = 0
				,odometer = odometerParam
				,curspeed = curspeedParam
		WHERE 	uid = varUid;

		UPDATE 	unit
		SET 	analog1 = analog1Param
				,digitalio = digitalioParam
		WHERE 	uid = varUid;

		SET isUpdated = 1;
	COMMIT;
    
    SELECT 		u.uid, u.unitno, v.vehicleid, d.deviceid, dr.driverid, isUpdated
    FROM		unit u
    INNER JOIN	devices d on d.uid = u.uid
    INNER JOIN	vehicle v on v.uid = u.uid
    INNER JOIN	driver dr on dr.vehicleid = v.vehicleid
    WHERE		u.uid = varUid;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getLedgerDetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `getLedgerDetails`(
    IN ledgeridParam INT,
    IN fromDateParam DATE,
    IN toDateParam DATE
)
BEGIN
    SELECT       p.inv_amt
                ,p.invoiceno
                ,p.start_date
                ,p.end_date
                ,p.quantity
                ,l.ledgername
                ,l.gst_no
                ,p.inv_date
                ,c.customerno
                ,CONCAT(l.address1, '', l.address2,'',l.address3) AS address
                ,sum(p.inv_amt) as total_inv_amt
             
        FROM    `invoice` p 
        LEFT OUTER JOIN ledger l ON l.ledgerid = p.ledgerid
        LEFT OUTER JOIN customer c ON c.customerno = p.customerno
        LEFT OUTER JOIN invoice_payment ip ON ip.invoiceid = p.invoiceid
        where p.inv_date BETWEEN fromDateParam AND toDateParam
        AND l.ledgerid = ledgeridParam
        AND p.invoiceno NOT LIKE '%can%'
        GROUP BY p.invoiceid,c.customerno
        ORDER BY inv_date ASC ;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getLedgerPaymentDetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `getLedgerPaymentDetails`(
    IN ledgeridParam INT,
    IN fromDateParam DATE,
    IN toDateParam DATE
)
BEGIN
      SELECT     ipm.paid_amt
                ,ipm.tds_amt
                ,(ipm.paid_amt+ipm.tds_amt) as total_paid_amt
                ,(SELECT pm.mode from payment_mode pm where pm.pm_id = ipm.pay_mode) as pay_mode
                ,ipm.invoiceno
                ,ipm.paymentdate
                ,c.customerno
                ,l.ledgername
                ,l.gst_no
                ,CONCAT(l.address1, '', l.address2,'',l.address3) AS address
                ,ipm.cheque_no
        FROM    `invoice` p 
        LEFT OUTER JOIN ledger l ON l.ledgerid = p.ledgerid
        LEFT OUTER JOIN customer c ON c.customerno = p.customerno
        LEFT OUTER JOIN invoice_payment_mapping ipm ON ipm.invoiceid = p.invoiceid
        INNER JOIN payment_mode pm ON pm.pm_id = ipm.pay_mode
        where ipm.paymentdate BETWEEN fromDateParam AND toDateParam
        AND l.ledgerid = ledgeridParam
        AND p.invoiceno NOT LIKE '%can%'
        GROUP BY ipm.ip_id,c.customerno
        ORDER BY paymentdate ASC;
    END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getSmsStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `getSmsStatus`(
    IN todaysdate datetime
    ,IN customernoParam INT(11)
    ,IN vehicleidParam INT(11)
    ,IN useridParam INT(11)
    ,IN mobilenoParam BIGINT(100)
    ,IN messageParam VARCHAR(150)
    ,IN cqidParam INT(11)
    ,OUT statusOut TINYINT(1)
     )
BEGIN
    DECLARE smsleftVar INT(11);
    DECLARE smslockUserVar TINYINT(1);
    DECLARE smslockVehicleVar TINYINT(1);
    DECLARE smsidVar INT(11) DEFAULT 0;
    DECLARE messageLengthVar INT(11) DEFAULT 0;
    SET statusOut=-5;

    IF (customernoParam != 0 AND (NOT(vehicleidParam=0 AND useridParam=0))) THEN
        SELECT  smsleft 
        INTO    smsleftVar 
        FROM    `customer` 
        WHERE   customerno=customernoParam;

        IF (vehicleidParam!=0) THEN
            SELECT  sms_lock 
            INTO    smslockVehicleVar 
            FROM    `vehicle` 
            WHERE   vehicleid=vehicleidParam;
        END IF;

        IF (useridParam!=0) THEN
            SELECT  sms_lock 
            INTO    smslockUserVar 
            FROM    `user` 
            WHERE   userid=useridParam;
        END IF;

        IF cqidParam = 0 THEN
            SELECT  `smsid` 
            INTO    smsidVar 
            FROM    `smslog` 
            WHERE   `inserted_datetime` > (todaysdate - INTERVAL 2 MINUTE)
            AND     `mobileno`= mobilenoParam 
            AND     `message`  = TRIM(messageParam)
            LIMIT 1;
        ELSE
            SELECT  `smsid` 
            INTO    smsidVar 
            FROM    `smslog` 
            WHERE   `inserted_datetime` > (todaysdate - INTERVAL 2 MINUTE) 
            AND     `mobileno`= mobilenoParam 
            AND     `cqid` = cqidParam
            LIMIT 1;
        END IF;

        SELECT  CHAR_LENGTH(messageParam)/160 
        INTO    messageLengthVar;

        IF smsidVar = 0 THEN
            IF smsleftVar > COALESCE(messageLengthVar, 0) THEN
                IF (COALESCE(smslockUserVar, 0) = 0) AND (COALESCE(smslockVehicleVar, 0) = 0) THEN
                    SET statusOut = 0;
                ELSEIF smslockVehicleVar = 1 THEN
                    SET statusOut = -1;
                ELSEIF smslockUserVar = 1 THEN
                   SET statusOut = -2;
                END IF;
            ELSE
                SET statusOut=-3;
            END IF;
        ELSE 
            SET statusOut=-4;
        END IF;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `getVehicleDetails_fms` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `getVehicleDetails_fms`(
     IN pageIndex INT, 
     IN pageSize INT , 
     IN custnoparam INT , 
     IN searchStringParam VARCHAR(40), 
     IN categoryIdParam TINYINT, 
     IN expiryDateParam date, 
     IN groupIdParam VARCHAR(250)
)
BEGIN
    DECLARE recordCount INT;
	DECLARE fromRowNum INT DEFAULT 1;
	DECLARE toRowNum INT DEFAULT 1;
    
    IF LTRIM(RTRIM(searchStringParam)) = '' THEN 
		SET searchStringParam = NULL;
	ELSE
        SET searchStringParam = LTRIM(RTRIM(searchStringParam));
	END IF;
    
    IF groupIdParam = '0' OR  groupIdParam = '' THEN
		SET groupIdParam = NULL;
    END IF;
    
    IF expiryDateParam = '' OR expiryDateParam = '0000-00-00' THEN
		SET expiryDateParam = NULL;
    END IF;
    
    IF categoryIdParam = 0 THEN
		SET categoryIdParam = NULL;
    END IF;
    SET recordCount =  (SELECT 		COUNT(v.vehicleid) 
						FROM 				vehicle v
						LEFT OUTER JOIN  docsVehicleExpiry dve on dve.vehicleid = v.vehicleid 
						LEFT OUTER JOIN  docsTypeMaster as dtm on dtm.docid = dve.docid 
						LEFT OUTER JOIN  tax on tax.vehicleid = v.vehicleid AND tax.isdeleted=0 AND tax.customerno=custnoparam
						LEFT OUTER JOIN  `group` g ON g.groupid=v.groupid 
						LEFT OUTER JOIN  description des ON des.vehicleid = v.vehicleid
						WHERE 				v.customerno = custnoparam
						AND 				v.isdeleted=0
						AND 				(FIND_IN_SET(v.groupid, groupIdParam) OR groupIdParam IS NULL)
						AND 				(v.vehicleno LIKE CONCAT('%', searchStringParam ,'%') OR searchStringParam IS NULL)
						AND 				(
												categoryIdParam IS NULL OR 
												(dve.docid = categoryIdParam AND dve.expiryDate<>'0000-00-00 00:00:00')
											)
						AND 				(
												expiryDateParam IS NULL OR
												(CASE 
													WHEN COALESCE(categoryIdParam,0) != 0	THEN 	dve.docid = categoryIdParam AND DATE(dve.expiryDate) < expiryDateParam
													WHEN searchStringParam IS NULL 			THEN 	DATE(dve.expiryDate) < expiryDateParam
                                                    ELSE 1
												END)
											)
						ORDER BY 			v.vehicleno ASC
                        );
    
    IF (pageSize = -1) THEN
		SET pageSize = recordCount;
    END IF;
    
	SET fromRowNum = (pageIndex - 1) * pageSize + 1;
	SET toRowNum = (fromRowNum + pageSize) - 1;
	SET @rownum = 0;
    SELECT	*, recordCount
	FROM 	(SELECT  @rownum:=@rownum + 1 AS rownum, vehDetails.*
			 FROM	(SELECT 	
						v.vehicleno,
						v.vehicleid,
						des.seatcapacity,
						v.groupid,
						tax.from_date,
						tax.to_date, 
                        dtm.docTypeName,
                        dve.docid,
                        dve.fileupload,
                        dve.expiryDate,
						g.groupname				
				FROM 				vehicle v
						LEFT OUTER JOIN  docsVehicleExpiry dve on dve.vehicleid = v.vehicleid 
						LEFT OUTER JOIN  docsTypeMaster as dtm on dtm.docid = dve.docid 
						LEFT OUTER JOIN  tax on tax.vehicleid = v.vehicleid AND tax.isdeleted=0 AND tax.customerno=custnoparam
						LEFT OUTER JOIN  `group` g ON g.groupid=v.groupid 
						LEFT OUTER JOIN  description des ON des.vehicleid = v.vehicleid
				WHERE 				v.customerno = custnoparam
						AND 				v.isdeleted=0
						AND 				(FIND_IN_SET(v.groupid, groupIdParam) OR groupIdParam IS NULL)
						AND 				(v.vehicleno LIKE CONCAT('%', searchStringParam ,'%') OR searchStringParam IS NULL)
						AND 				(
												categoryIdParam IS NULL OR 
												(dve.docid = categoryIdParam AND dve.expiryDate<>'0000-00-00 00:00:00')
											)
						AND 				(
												expiryDateParam IS NULL OR
												(CASE 
													WHEN COALESCE(categoryIdParam,0) != 0	THEN 	dve.docid = categoryIdParam AND DATE(dve.expiryDate) < expiryDateParam
													WHEN searchStringParam IS NULL 			THEN 	DATE(dve.expiryDate) < expiryDateParam
													ELSE 1
												END)
											)
						ORDER BY 			v.vehicleno ASC
					) vehDetails)vehDetails
	WHERE		rownum BETWEEN fromRowNum AND toRowNum
    ORDER BY 	rownum;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_all_admin_email_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_all_admin_email_id`(
    IN customernos INT
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;

SELECT email FROM user WHERE customerno=customernos AND role='Administrator' AND isdeleted=0 ORDER BY userid
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_all_customer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_all_customer`()
BEGIN
    
SELECT     c.customerno
        ,c.customername
        ,c.customercompany
        ,c.customerTypeId
        ,c.smsleft
FROM customer AS c
WHERE c.customercompany <> 'Elixia Tech' AND c.use_tracking=1 AND c.renewal NOT IN (-1,-2)
ORDER BY c.customerno ASC
; 
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_all_ledgers` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_all_ledgers`()
BEGIN
select DISTINCT(ledgerid)
from ledger_cust_mapping ;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_all_vehicleid_for_customer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_all_vehicleid_for_customer`(
        IN customernos INT
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;
SELECT v.vehicleid
    ,v.vehicleno
    FROM vehicle as v
WHERE v.customerno=customernos AND v.isdeleted=0
ORDER BY v.vehicleid
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_bank_statement` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_bank_statement`(
  IN statementidParam INT
  , IN transaction_datetime_from date
  , IN transaction_datetime_to date
  , IN transaction_typeParam INT
  , IN categoryidParam INT
)
BEGIN

  IF(statementidParam = '' OR statementidParam = 0) THEN
    SET statementidParam =  NULL;
  END IF;
  IF(transaction_typeParam = '' OR transaction_typeParam = 0) THEN
    SET transaction_typeParam  = NULL;
  END IF;
  IF(categoryidParam = '' OR categoryidParam = 0) THEN
    SET categoryidParam =  NULL;
  END IF;
  IF(transaction_datetime_from = '' OR transaction_datetime_from = '0000-00-00') THEN
    SET transaction_datetime_from =  NULL;
  END IF;
  IF(transaction_datetime_to = '' OR transaction_datetime_to = '0000-00-00') THEN
    SET transaction_datetime_to =  NULL;
  END IF;

  SELECT statementid
  ,transaction_datetime
  ,details
  ,remarks
  ,transaction_type
  ,bank_statement.categoryid
  ,category
  ,amount
  ,enteredInTally
  ,bank_statement.created_by
  ,bank_statement.created_on
  ,bank_statement.updated_by
  ,bank_statement.updated_on
  FROM bank_statement
  INNER JOIN category on category.categoryid = bank_statement.categoryid
  WHERE (statementid = statementidParam OR statementidParam IS NULL)
  AND (transaction_type = transaction_typeParam OR transaction_typeParam IS NULL)
  AND (bank_statement.categoryid = categoryidParam OR categoryidParam IS NULL)
  AND (DATE(transaction_datetime) BETWEEN transaction_datetime_from AND transaction_datetime_to OR transaction_datetime_from IS NULL AND transaction_datetime_to IS NULL )
  AND bank_statement.isdeleted = 0
  AND category.isdeleted = 0
  ORDER BY statementid DESC;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_bank_statement_summary` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_bank_statement_summary`(
  IN transaction_datetime_from date
  , IN transaction_datetime_to date
  , IN categoryidParam INT
)
BEGIN


  IF(categoryidParam = '' OR categoryidParam = 0) THEN
    SET categoryidParam =  NULL;
  END IF;
  IF(transaction_datetime_from = '' OR transaction_datetime_from = '0000-00-00') THEN
    SET transaction_datetime_from =  NULL;
  END IF;
  IF(transaction_datetime_to = '' OR transaction_datetime_to = '0000-00-00') THEN
    SET transaction_datetime_to =  NULL;
  END IF;

  SELECT
  MONTH(transaction_datetime) as transaction_month

  ,sum(amount) as transaction_amount
  FROM bank_statement bs
  INNER JOIN category c on c.categoryid = bs.categoryid

  AND (bs.categoryid = categoryidParam OR categoryidParam IS NULL)
  AND (DATE(transaction_datetime) BETWEEN transaction_datetime_from AND transaction_datetime_to OR transaction_datetime_from IS NULL AND transaction_datetime_to IS NULL )
  AND bs.isdeleted = 0
  AND c.isdeleted = 0
  GROUP BY  MONTH(transaction_datetime) ;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_bus_routes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_bus_routes`(
         IN busStopIdParam INT
         ,IN vehicleIdParam INT
        ,IN routeIdParam INT
)
BEGIN   
    
    
    IF(busStopIdParam = 0) THEN
    SET busStopIdParam = NULL;
    END IF;
    IF(vehicleIdParam = 0) THEN
    SET vehicleIdParam = NULL;
    END IF;
    IF(routeIdParam = 0) THEN
    SET routeIdParam = NULL;
    END IF;
    
    

    SELECT
        sequence_id,
        vehicle_id,
        vehicle.vehicleno,
        brs.busStopId,
        busStop.address,
        busStop.busStopName,
        sequence,
        trigonRoute.`name`,
        brs.routeId,
        time_taken,     
        update_time,
        brs.updated_by
        
    FROM bus_route_sequence as brs
    INNER JOIN vehicle on vehicle.vehicleid = brs.vehicle_id
    INNER JOIN busStop on busStop.busStopId = brs.busStopId
    INNER JOIN trigonRoute on trigonRoute.trouteid = brs.routeId
    WHERE (brs.busStopId = busStopIdParam OR busStopIdParam IS NULL )   
    AND (brs.vehicle_id = vehicleIdParam OR vehicleIdParam IS NULL )    
    Order By brs.routeId, Vehicleid, sequence ASC;
    
        
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_bus_stops` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_bus_stops`(
		 IN busStopIdParam INT
         ,IN zoneIdParam INT
         ,IN custno INT
)
BEGIN	
	
    IF(busStopIdParam = 0) THEN
	SET busStopIdParam = NULL;
    END IF;	
    IF(zoneIdParam = 0) THEN
	SET zoneIdParam = NULL;
    END IF;
	IF(custno = '' OR custno = 0) THEN
	SET custno = NULL;
    END IF;


	SELECT
		busStopId,
		schoolId,
		lat,
		lng,
		distanceFromSchool,
		address,
		zoneid as zoneId,
		isAlloted,
		customerno,
		created_on,
		updated_on,
		created_by,
		updated_by,
		isdeleted
	FROM busStop
	WHERE (busStop.customerno = custno OR custno IS NULL) 
	AND (busStop.busStopId = busStopIdParam OR busStopIdParam IS NULL )
	AND (busStop.zoneid = zoneIdParam OR zoneIdParam IS NULL )
	AND busStop.isdeleted = 0;
    
        
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_category` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_category`(
  IN categoryidParam INT
)
BEGIN

  IF(categoryidParam = '' OR categoryidParam = 0) THEN
    SET categoryidParam = categoryidParam = NULL;
  END IF;

  SELECT categoryid
  ,category
  ,created_by
  ,created_on
  ,updated_by
  ,updated_on
  FROM category
  WHERE (categoryid = categoryidParam OR categoryidParam IS NULL)
  AND isdeleted = 0
  ORDER BY categoryid ASC;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_chkpoint_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_chkpoint_details`(
    IN customernos INT
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;


    SELECT * FROM checkpoint AS chk WHERE chk.customerno=customernos and chk.isdeleted = 0;
     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_clients` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_clients`(
	IN clientIdParam INT
	,IN customerNoParam INT
)
BEGIN
	IF(clientIdParam = '' OR clientIdParam = 0) THEN
		SET clientIdParam = NULL;
	END IF;
	IF(customerNoParam = '' OR customerNoParam = 0) THEN
		SET customerNoParam = NULL;
	END IF;

	SELECT 
		clientId
		,clientName
		,email
		,phone
		,c.segmentId
		,i.segmentName
		,agreementStart
		,agreementEnd
		,address
		,c.customerNo
		,c.createdBy
		,c.createdOn
		,c.updatedBy
		,c.updatedOn
	FROM clients c
	LEFT JOIN industrySegment i on i.segmentId = c.segmentId
	WHERE (c.clientId = clientIdParam OR clientIdParam IS NULL)
	AND (c.customerNo = customerNoParam OR customerNoParam IS NULL)
	AND c.isDeleted = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_contact_person_account` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_contact_person_account`(
        IN customernos INT
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;
SELECT cp.person_name
        ,cp.cp_email1
        ,cp.cp_phone1
    FROM contactperson_details as cp
LEFT JOIN customer on customer.customerno=cp.customerno
WHERE customer.customerno=customernos AND cp.typeid=2 AND cp.isdeleted=0 AND (cp.person_name='' OR cp.cp_email1='' OR cp.cp_phone1='') 

ORDER BY cp.typeid
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_contact_person_coordinator` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_contact_person_coordinator`(
        IN customernos INT
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;
SELECT cp.person_name
        ,cp.cp_email1
        ,cp.cp_phone1
    FROM contactperson_details as cp
LEFT JOIN customer on customer.customerno=cp.customerno
WHERE customer.customerno=customernos AND cp.typeid=3 AND cp.isdeleted=0 AND (cp.person_name='' OR cp.cp_email1='' OR cp.cp_phone1='') 

ORDER BY cp.typeid
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_contact_person_owner` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_contact_person_owner`(
        IN customernos INT
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;
SELECT cp.person_name
        ,cp.cp_email1
        ,cp.cp_phone1
    FROM contactperson_details as cp
LEFT JOIN customer on customer.customerno=cp.customerno
WHERE customer.customerno=customernos AND cp.typeid=1 AND cp.isdeleted=0 AND (cp.person_name='' OR cp.cp_email1='' OR cp.cp_phone1='') 

ORDER BY cp.typeid
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_customer_not_allot_crm` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_customer_not_allot_crm`()
BEGIN
   
SELECT c.customerno
    ,c.customername 
    ,c.customercompany
    FROM `customer` as c
WHERE c.use_trace=0 AND c.renewal NOT IN (-1,-2) AND (c.rel_manager IS NULL OR c.rel_manager = '' OR c.rel_manager=0) 
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_customField_customer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_customField_customer`(
  IN customernoParam INT
)
BEGIN

SELECT    	customtype.`name`,customfield.customname
FROM    	customfield
INNER JOIN 	customer ON customer.customerno=customfield.customerno 
INNER JOIN 	customtype ON customtype.id=customfield.custom_id
WHERE  		customfield.usecustom=1 and customer.customerno=customernoParam;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_dashboard_tripdetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_dashboard_tripdetails`(
    IN customerNoParam INT,
    IN currentDateParam DATE
)
BEGIN
    DECLARE disptachVolumeCount INT;
    DECLARE lrDelayCount INT;
    DECLARE loadingVehiclesCount INT;
    DECLARE intransitVehiclesCount INT;
    DECLARE availableVehiclesCount INT;
    DECLARE yardDetentionDeviationCount INT;
    DECLARE emptyReturnCount INT;
    DECLARE emptyReturnDeviationCount INT;



    SET @serverTime = now();
    SET @istDateTime = CONVERT_TZ(@serverTime, 'SYSTEM', '+05:30');

    ROLLBACK;
     /*
       GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
       @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
       SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
       SELECT @full_error;
      */
    IF customerNoParam = 0 THEN
        SET customerNoParam = NULL;
    END IF;

    IF(customerNoParam IS NOT NULL)THEN
        # Todays Total Dispatch Volume(Bags) Count
        SELECT SUM(od.bags) into disptachVolumeCount
        FROM tripdetails td
        INNER JOIN vehicle v ON v.vehicleid = td.vehicleid
        INNER JOIN orderDetails od ON od.tripId = td.tripId
        WHERE (td.customerno= customerNoParam OR customerNoParam IS NULL)
        AND od.chitthiDate LIKE CONCAT('%',currentDateParam,'%')
        AND od.customerno= customerNoParam
        AND td.is_tripend = 0
        AND td.isdeleted =0
        AND v.isdeleted = 0
        AND od.isdeleted =0;

        # LR Delay Count - Chitthi created but delivery challan not created within 60 min
        SELECT COUNT(DISTINCT(td.tripId)) INTO lrDelayCount
        FROM tripdetails td
        INNER JOIN orderDetails od ON od.tripId = td.tripId AND od.orderid = (
                select o.orderid from orderDetails o where o.tripid = td.tripid AND o.customerno = td.customerno AND o.isdeleted = 0 Order by o.created_on ASC limit 1
            )
        INNER JOIN vehicle ON vehicle.vehicleId = td.vehicleId
        WHERE (td.customerno= customerNoParam OR customerNoParam IS NULL)
        AND od.created_on < DATE_SUB(@istDateTime, INTERVAL 1 HOUR)
        AND od.orderId NOT IN (SELECT dc.orderId FROM deliveryChallan dc WHERE dc.orderId = od.orderId AND dc.customerno = td.customerno)
        AND od.customerno= customerNoParam
        AND td.is_tripend = 0
        AND td.isdeleted =0
        AND od.isdeleted =0;

        # Loading Vehicles Count - Chitthi created but delivery challan not created
        SELECT count(DISTINCT(td.tripId)) INTO loadingVehiclesCount
        FROM tripdetails td
        INNER JOIN orderDetails od ON od.tripId = td.tripId
        INNER JOIN vehicle ON vehicle.vehicleId = td.vehicleId
        WHERE (td.customerno= customerNoParam OR customerNoParam IS NULL)
        AND od.orderId NOT IN (SELECT dc.orderId FROM deliveryChallan dc WHERE dc.orderId = od.orderId AND dc.customerno = td.customerno)
        AND od.customerno= customerNoParam
        AND td.is_tripend = 0
        AND td.isdeleted =0
        AND od.isdeleted =0;

        # Intransit Vehicles Count - Chitthi And delivery challan created

        SELECT COUNT(DISTINCT(td.tripId)) INTO intransitVehiclesCount
        FROM tripdetails td
        inner JOIN orderDetails od ON od.tripId = td.tripId
        INNER JOIN deliveryChallan dc ON dc.orderId = od.orderId
        INNER JOIN vehicle ON vehicle.vehicleId = td.vehicleId
        WHERE (td.customerno= customerNoParam OR customerNoParam IS NULL)
        AND od.customerno= customerNoParam
        AND td.is_tripend = 0
        AND td.isdeleted =0
        AND od.isdeleted =0;

        # Available Vehicles Count
        SELECT COUNT(v.vehicleid) INTO availableVehiclesCount
        FROM vehicle v
        WHERE (v.customerno= customerNoParam OR customerNoParam IS NULL)
        AND v.vehicleid NOT IN (select tripdetails.vehicleid from tripdetails where is_tripend = 0 AND isdeleted = 0)
        AND v.isdeleted = 0;

        # Yard Deviation Detiontion Count
        SELECT
        count(td.tripid) INTO yardDetentionDeviationCount
        FROM vehicle
        INNER JOIN tripdetails td on td.vehicleid = vehicle.vehicleid
        INNER JOIN orderDetails od ON od.tripId = td.tripId AND od.orderid = (
            select o.orderid from orderDetails o where o.tripid = td.tripid AND o.customerno = td.customerno AND o.isdeleted = 0 Order by o.created_on ASC limit 1
        )
        WHERE (vehicle.customerno = customerNoParam OR customerNoParam IS NULL)
        AND vehicle.checkpointId <> 0 AND chkpoint_status = 1 AND vehicle.isdeleted = 0
        AND (vehicle.checkpoint_timestamp > od.created_on )
        AND od.customerno= customerNoParam
        AND TIMESTAMPDIFF(MINUTE, od.created_on, vehicle.checkpoint_timestamp) > 90
        AND td.isdeleted = 0
        AND od.isdeleted = 0
        AND td.is_tripend = 0
        order by td.tripid ASC
        ;

        SELECT
        count(DISTINCT(td.tripid)) INTO emptyReturnCount
        FROM vehicle
        INNER JOIN tripdetails td on td.vehicleid = vehicle.vehicleid
        INNER JOIN tripdroppoints tdp ON tdp.tripid = td.tripid AND tdp.created_on = (
            SELECT max(lastTripDropPoint.created_on) FROM tripdroppoints lastTripDropPoint WHERE lastTripDropPoint.vehicleId = vehicle.vehicleId
        )
        INNER JOIN tripYardLog tyl ON tyl.tripid = td.tripid AND tyl.vehicleid = vehicle.vehicleid
        WHERE (vehicle.customerno = customerNoParam OR customerNoParam IS NULL)
        AND vehicle.checkpointId <> 0 AND chkpoint_status = 1 AND vehicle.isdeleted = 0
        AND (td.statusdate > vehicle.checkpoint_timestamp)
        AND (td.customerno = customerNoParam OR customerNoParam IS NULL)
        AND td.isdeleted = 0
        and td.tripstatusid = 10
        AND tyl.isProcessed = 0
        AND td.is_tripend = 0
        Group by td.tripid
        order by td.tripid ASC;

        SELECT
        count(DISTINCT(td.tripid)) INTO emptyReturnDeviationCount
        FROM vehicle
        INNER JOIN tripdetails td on td.vehicleid = vehicle.vehicleid
        INNER JOIN tripdroppoints tdp ON tdp.tripid = td.tripid AND tdp.created_on = (
            SELECT max(lastTripDropPoint.created_on) FROM tripdroppoints lastTripDropPoint WHERE lastTripDropPoint.vehicleId = vehicle.vehicleId
        )
        INNER JOIN tripYardLog tyl ON tyl.tripid = td.tripid AND tyl.vehicleid = vehicle.vehicleid
        WHERE (vehicle.customerno = customerNoParam OR customerNoParam IS NULL)
        AND vehicle.checkpointId <> 0 AND chkpoint_status = 1 AND vehicle.isdeleted = 0
        AND (td.statusdate > vehicle.checkpoint_timestamp)
        AND (td.customerno = customerNoParam OR customerNoParam IS NULL)
        AND TIMESTAMPDIFF(MINUTE, vehicle.checkpoint_timestamp, td.statusdate) > 60
        AND td.tripstatusid = 10
        AND tyl.isProcessed = 0
        AND td.isdeleted = 0
        AND td.is_tripend = 0
        Group by td.tripid
        order by td.tripid ASC;




        SELECT disptachVolumeCount,lrDelayCount,loadingVehiclesCount,intransitVehiclesCount,availableVehiclesCount,yardDetentionDeviationCount, emptyReturnCount, emptyReturnDeviationCount;

    END IF;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_dashboard_vehicledetails_for_eta` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_dashboard_vehicledetails_for_eta`(
    IN customerNoParam INT(10),
    IN currentDateParam DATE,
    IN selVehTypeParam VARCHAR(11)
)
BEGIN
    DECLARE  istDateTime INT;
    DECLARE  serverTime INT;

    SET @serverTime = now();
    SET @istDateTime = CONVERT_TZ(@serverTime, 'SYSTEM', '+05:30');
    ROLLBACK;
     /*
       GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
       @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
       SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
       SELECT @full_error;
    */
    IF customerNoParam = 0 THEN
        SET customerNoParam = NULL;
    END IF;

    IF selVehTypeParam = 'emptyR' THEN

        SELECT DISTINCT(vehicle.vehicleId),vehicle.vehicleNo, C.cgeolat, C.cgeolong,TD.lat,TD.lng,CM.checkpointid,td.tripid,g.groupname,td.tripid,tyl.isProcessed
        FROM vehicle
        INNER JOIN tripdetails td on td.vehicleid = vehicle.vehicleid
        INNER JOIN tripdroppoints TD ON TD.tripid = td.tripid AND TD.created_on = (
            SELECT max(TD2.created_on) FROM tripdroppoints TD2 WHERE TD2.vehicleId = vehicle.vehicleId
        )
        INNER JOIN checkpointmanage CM ON CM.vehicleid = vehicle.vehicleid
        INNER JOIN checkpoint C ON C.checkpointid = CM.checkpointid
        INNER JOIN tripYardLog tyl ON tyl.tripid = td.tripid AND tyl.vehicleid = vehicle.vehicleid
        LEFT JOIN `group` g ON g.groupid = vehicle.groupid
        WHERE (vehicle.customerno = customerNoParam)
        AND vehicle.checkpointId <> 0 AND chkpoint_status = 1 AND vehicle.isdeleted = 0
        AND (td.statusdate > vehicle.checkpoint_timestamp)
        AND (td.customerno = customerNoParam)
        and td.tripstatusid = 10
        AND td.isdeleted = 0
        AND td.is_tripend = 0
        #AND tyl.isProcessed = 0
        Group by td.tripid
        order by td.tripid ASC;


    END IF;

    IF selVehTypeParam = 'tripEnd' THEN

        SELECT DISTINCT(vehicle.vehicleId) , vehicle.vehicleNo,TD.lat,TD.lng
        FROM tripdetails T1
        INNER JOIN vehicle ON vehicle.vehicleId = T1.vehicleId
        INNER JOIN tripdroppoints TD ON TD.vehicleid = vehicle.vehicleid
        INNER JOIN checkpointmanage CM ON CM.vehicleid = TD.vehicleid
        WHERE T1.customerno = customerNoParam AND
        TD.created_on = (SELECT max(TD2.created_on) FROM tripdroppoints TD2
        INNER JOIN vehicle vehicle2 ON vehicle2.vehicleId = TD2.vehicleId WHERE vehicle2.vehicleId = vehicle.vehicleId)
        AND T1.is_tripend = 0
        AND T1.tripstatusid = 10 ;

    END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_dashboard_vehicles` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_dashboard_vehicles`(
    IN vehicleTypeParam varchar(30),
    IN customerNoParam INT(10),
    IN currentDateParam datetime
)
BEGIN

    DECLARE  istDateTime INT;
    DECLARE  serverTime INT;
    SET @serverTime = now();
    SET @istDateTime = CONVERT_TZ(@serverTime, 'SYSTEM', '+05:30');
 ROLLBACK;
      /*
       GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
       @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
       SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
       SELECT @full_error;
*/
 IF customerNoParam = 0 THEN
	SET customerNoParam = NULL;
END IF;

 IF vehicleTypeParam = '' THEN
    SET vehicleTypeParam = NULL;
END IF;

IF vehicleTypeParam = 'Avail'
THEN
SELECT DISTINCT(v.vehicleId) ,v.vehicleNo
FROM vehicle v
WHERE v.customerno = customerNoParam

AND v.vehicleid NOT IN (select tripdetails.vehicleid from tripdetails where is_tripend = 0 AND isdeleted = 0)
AND v.isdeleted =0;
END IF;

IF vehicleTypeParam = 'Intrans'
THEN
SELECT DISTINCT(td.tripId) ,vehicle.vehicleNo
        FROM tripdetails td
        inner JOIN orderDetails od ON od.tripId = td.tripId
        INNER JOIN deliveryChallan dc ON dc.orderId = od.orderId
        INNER JOIN vehicle ON vehicle.vehicleId = td.vehicleId
        WHERE (td.customerno= customerNoParam OR customerNoParam IS NULL)
        AND od.customerno= customerNoParam
        AND td.is_tripend = 0
        AND td.isdeleted =0
        AND od.isdeleted =0;
END IF;

IF vehicleTypeParam = 'Load'
THEN

SELECT DISTINCT(td.tripId),vehicle.vehicleNo
        FROM tripdetails td
        INNER JOIN orderDetails od ON od.tripId = td.tripId
        INNER JOIN vehicle ON vehicle.vehicleId = td.vehicleId
        WHERE (td.customerno= customerNoParam OR customerNoParam IS NULL)
        AND od.orderId NOT IN (SELECT dc.orderId FROM deliveryChallan dc WHERE dc.orderId = od.orderId AND dc.customerno = td.customerno)
        AND od.customerno= customerNoParam
        AND td.is_tripend = 0
        AND td.isdeleted =0
        AND od.isdeleted =0;

END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_dbpatchNo` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_dbpatchNo`(
IN patchdesc varchar(50),
IN appliedby varchar(20),
OUT currentDBpatch INT
)
BEGIN
    DECLARE latestpatchid INT;
	DECLARE existDBpactId INT;
    DECLARE  istDateTime INT;
    DECLARE  serverTime INT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    SET @serverTime = now();
    SET @istDateTime = CONVERT_TZ(@serverTime, 'SYSTEM', '+05:30');
    BEGIN
        ROLLBACK;
	--
--       GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
--       @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
--       SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
--       SELECT @full_error;
--

    END;
    set currentDBpatch = 0;
		SELECT patchid INTO existDBpactId FROM dbpatches
		ORDER BY patchid DESC LIMIT 1
        ;

	SET latestpatchid = existDBpactId + 1;

	BEGIN
		INSERT INTO dbpatches(
			patchid,
			patchdate,
			appliedby,
			patchdesc,
			isapplied
		)VALUES(
		  latestpatchid,
		   @serverTime,
		   appliedby,
		   patchdesc,
			0
			);
	set currentDBpatch = latestpatchid;
	END;

	BEGIN
			 UPDATE dbpatches
			 SET
				 isapplied = 1,
				 updatedOn = @serverTime
			WHERE patchid = latestpatchid;
	END;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_device_list` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_device_list`(
    IN customeridParam INT(11)
)
BEGIN
SELECT devices.start_date, devices.end_date, devices.device_invoiceno, devices.invoiceno, unit.uid, devices.customerno, devices.expirydate, unit.unitno, trans_status.status, devices.lastupdated, devices.registeredon,
                vehicle.vehicleno,vehicle.vehicleid,vehicle.sms_lock, unit.command, unit.setcom, devices.simcardid,unit.extra_digital,t1.transmitterno as transmitter1,t2.transmitterno as transmitter2
                FROM devices
                INNER JOIN unit ON unit.uid = devices.uid
                LEFT OUTER JOIN simcard ON simcard.id = devices.simcardid
                LEFT OUTER JOIN vehicle ON vehicle.vehicleid = unit.vehicleid
                LEFT JOIN transmitter t1 on vehicle.transmitter1 = t1.transmitterid
                LEFT JOIN transmitter t2 on vehicle.transmitter2 = t2.transmitterid
                INNER JOIN trans_status ON trans_status.id = unit.trans_statusid WHERE unit.customerno = customeridParam
                ORDER BY devices.lastupdated DESC,unit.trans_statusid ASC, devices.simcardid DESC,simcard.trans_statusid ASC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_device_location` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_device_location`()
BEGIN
 
    select 	* from device_location;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_device_loctn_count` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_device_loctn_count`(
IN location_idParam INT)
BEGIN
DECLARE id INT;
SELECT  GROUP_CONCAT(unitno SEPARATOR ', ')as unitno,CONCAT('BOX ',dl.unit_location_box_number) as location ,dl.unit_type as unit_type,count(u.unit_location_box_number) as count from unit u
INNER JOIN unit_location dl on dl.unit_location_box_number = u.unit_location_box_number
where dl.unit_location_box_number=location_idParam AND u.trans_statusid IN(1,2,3,4,17);
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_expired_devices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_expired_devices`(
        IN customernos INT,
        IN today date
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;
    IF(today = '' OR today = '0') THEN
            SET today = NULL;
    END IF;
SELECT unit.unitno 
    FROM vehicle 
    INNER JOIN devices ON devices.uid = vehicle.uid 
    INNER JOIN unit ON devices.uid = unit.uid 
    LEFT OUTER JOIN simcard ON simcard.id = devices.simcardid 
    WHERE vehicle.isdeleted= 0 AND devices.expirydate < today AND unit.customerno NOT IN (-1,1) AND unit.customerno=customernos AND devices.expirydate !='1970-01-01' AND devices.expirydate!='0000-00-00' AND unit.trans_statusid NOT IN(22,23,24,10)
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_filtered_otr` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_filtered_otr`(
	IN inwordIdParam INT
	, IN receivingLocationParam VARCHAR(50)
	, IN sendingLocationParam VARCHAR(50)
	, IN arrivalDateFromParam DATE
	, IN arrivalDateToParam DATE
	, IN lrDateFromParam DATE
	, IN lrDateToParam DATE
	, IN customerNoParam INT
	
)
BEGIN

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
	END;

	SET @serverDateTime = now();
	SET @istDateTime = CONVERT_TZ(@serverDateTime, 'SYSTEM', '+05:30');
	SET @istDate = DATE(@istDateTime);
	
	START TRANSACTION;

		IF (customerNoParam = '' OR customerNoParam = 0) THEN
			SET customerNoParam = NULL;
		END IF;	
		
		IF (inwordIdParam = '' OR inwordIdParam = 0) THEN
			SET inwordIdParam = NULL;
		END IF;	

		IF (receivingLocationParam = '' ) THEN
			SET receivingLocationParam = NULL;
		END IF;	

		IF (sendingLocationParam = '' ) THEN
			SET sendingLocationParam = NULL;
		END IF;

		IF (arrivalDateFromParam = '' OR arrivalDateFromParam = '0000-00-00') THEN
			SET arrivalDateFromParam = NULL;
		END IF;

		IF (arrivalDateToParam = '' OR arrivalDateToParam = '0000-00-00') THEN
			SET arrivalDateToParam = @istDate;
		END IF;

		IF (lrDateFromParam = '' OR lrDateFromParam = '0000-00-00') THEN
			SET lrDateFromParam = NULL;
		END IF;

		IF (lrDateToParam = '' OR lrDateToParam = '0000-00-00') THEN
			SET lrDateToParam = @istDate;
		END IF;

		IF (customerNoParam IS NOT NULL ) THEN 
			SELECT
				inwordId,
				sendingLocation,
				receivingLocation,
				invoiceNo,				
				DATE_FORMAT(arrivalDate,'%d-%m-%Y') AS arrivalDate,
				vehicleNo,
				truckTypeId,
				lrNo,				
				DATE_FORMAT(lrDate,'%d-%m-%Y') AS lrDate,
				transporter,
				modeId,
				seal,
				sealNo,
				customerNo,
				createdBy,
				createdOn,
				updatedBy,
				updatedOn
			FROM inword
			WHERE (inwordId = inwordIdParam OR inwordIdParam IS NULL)
			AND (customerNo = customerNoParam OR customerNoParam IS NUll)
			AND (receivingLocation LIKE CONCAT('%', receivingLocationParam, '%') OR receivingLocationParam IS NULL)
			AND (sendingLocation LIKE CONCAT('%', sendingLocationParam, '%') OR sendingLocationParam IS NULL)
			AND (arrivalDate BETWEEN arrivalDateFromParam AND arrivalDateToParam  OR arrivalDateFromParam IS NULL)
			AND (lrDate BETWEEN lrDateFromParam AND lrDateToParam  OR lrDateFromParam IS NULL)
			AND isDeleted = 0;
					
		END IF;

	COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_hardware_invoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_hardware_invoices`(
IN ledgeridParam INT)
BEGIN
                    SELECT  distinct(lv.`ledgerid`)
                            ,lv.`customerno`
                            ,`customer`.`unitprice`
                            ,count(lv.`customerno`) AS count1
                            ,SUM(`customer`.`unitprice`) AS total
                            ,l.`state_code`
                            ,sgc.`state`
                            FROM    `ledger_veh_mapping` lv
                            INNER JOIN `ledger` l ON l.`ledgerid` = lv.`ledgerid`
                            INNER JOIN `state_gst_code` sgc ON sgc.codeid = l.`state_code`
                            INNER JOIN `customer` ON `customer`.`customerno` = lv.`customerno`
                            INNER JOIN `vehicle` ON `vehicle`.vehicleid = lv.vehicleid AND `vehicle`.invoice_hold = 0
                            INNER JOIN `unit` u ON u.vehicleid = vehicle.vehicleid AND u.trans_statusid IN (5,6)
                            INNER JOIN `devices` d ON d.uid = u.uid
                            WHERE lv.`ledgerid` =ledgeridParam
                            AND lv.`isdeleted` = 0
                            AND d.device_invoiceno = ''
                            group by lv.`customerno`,lv.ledgerid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_invoice_payment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_invoice_payment`(
    IN invoiceidParam INT
    )
BEGIN
SELECT ip.ip_id,ip.invoiceid,ip.customerno,ip.tds_amt,ip.paid_amt,ipm.cheque_no,ipm.bank_name,ipm.bank_branch,ipm.cheque_date,
(SELECT p.mode from payment_mode p where p.pm_id = ip.pay_mode) as payment_mode ,ip.paymentdate
from invoice_payment_mapping ip
INNER JOIN invoice_payment_mapping ipm on ipm.ip_id = ip.ip_id
WHERE ip.invoiceid =  invoiceidParam and ipm.ip_id =  ip.ip_id
GROUP BY ip.ip_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_invoice_payment_old` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_invoice_payment_old`(
    IN invoiceidParam INT
    )
BEGIN
SELECT i.invoiceid,i.ledgerid,i.customerno,i.tds_amt,i.pay_mode,
i.paid_amt,i.paymentdate,ip.chequeno,ip.bank_name,ip.branch
from invoice i 
LEFT JOIN invoice_payment ip on ip.invoiceid=i.invoiceid
WHERE i.invoiceid =  invoiceidParam AND i.paid_amt>0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_ledger` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_ledger`(
    IN ledgeridparam INT
    , IN ledgernameparam VARCHAR(100)
)
BEGIN
    IF(ledgeridparam = '' OR ledgeridparam = '0') THEN
            SET ledgeridparam = NULL;
    END IF;

    IF(ledgernameparam = '' OR ledgernameparam = '0') THEN
            SET ledgernameparam = NULL;
    END IF;

    SELECT  l.ledgerid
            ,l.ledgername
            ,l.address1
            ,l.address2
            ,l.address3
            ,l.state_code
            ,l.email
            ,l.phone
            ,l.pan_no
            ,l.gst_no
            ,l.cst_no
            ,l.st_no
            ,l.vat_no
            ,l.createdby
            ,l.createdon
            ,l.updatedby
            ,l.updatedon
            ,sgc.`state`
    FROM    ledger AS l
    INNER JOIN state_gst_code sgc ON sgc.codeid = l.state_code
    WHERE   (l.ledgerid  = ledgeridparam OR ledgeridparam IS NULL)
    AND     (TRIM(l.ledgername) = TRIM(ledgernameparam) OR ledgernameparam IS NULL)
    AND     l.isdeleted = 0
    ORDER BY l.ledgerid DESC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_ledger_cust_mapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_ledger_cust_mapping`( 
    IN ledgeridparam INT
    ,IN customernoparam INT
    , IN ledgernameparam VARCHAR(100)
)
BEGIN
	IF(ledgeridparam = '' OR ledgeridparam = '0') THEN
		SET ledgeridparam = NULL;
	END IF;

	IF(ledgernameparam = '' OR ledgernameparam = '0') THEN
		SET ledgernameparam = NULL;
	END IF;
    
    IF(customernoparam = '' OR customernoparam = '0') THEN
		SET customernoparam = NULL;
	END IF;
    
SELECT 	l.ledgerid
		,l.ledgername
        ,l.address1
        ,l.address2
        ,l.address3
        ,l.email
        ,l.phone
        ,l.pan_no
        ,l.cst_no
        ,l.st_no
        ,l.vat_no
        ,lc.customerno
FROM ledger_cust_mapping AS lc
INNER JOIN ledger AS l ON l.ledgerid = lc.ledgerid
WHERE (lc.ledgerid  = ledgeridparam OR ledgeridparam IS NULL)
AND (lc.customerno  = customernoparam OR customernoparam IS NULL)
AND (l.ledgername LIKE CONCAT('%', ledgernameparam, '%') OR ledgernameparam IS NULL)
AND lc.isdeleted = 0
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_ledger_for_vehicle_id` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_ledger_for_vehicle_id`(
        IN vehicleids INT
)
BEGIN
    IF(vehicleids = '' OR vehicleids = '0') THEN
		SET vehicleids = NULL;
	END IF;

SELECT l.ledgerid  
    FROM `ledger_veh_mapping` as l
    WHERE l.vehicleid=vehicleids 
    AND l.isdeleted=0
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_ledger_map_cust` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_ledger_map_cust`(
        IN customernos INT
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;
SELECT l.ledgerid 
    FROM `ledger_cust_mapping` as l 
    WHERE l.customerno=customernos AND `isdeleted` = 0
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_ledger_veh_mapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_ledger_veh_mapping`( 
    IN ledger_veh_mapidparam INT
    , IN customernoparam INT
    , IN ledgeridparam INT
    , IN vehiclenoparam VARCHAR(20)
)
BEGIN

    IF(ledger_veh_mapidparam = '' OR ledger_veh_mapidparam = '0') THEN
     SET ledger_veh_mapidparam = NULL;
    END IF;

    IF(customernoparam = '' OR customernoparam = '0') THEN
     SET customernoparam = NULL;
    END IF;

    IF(vehiclenoparam = '' OR vehiclenoparam = '0') THEN
     SET vehiclenoparam = NULL;
    END IF;

    IF(ledgeridparam = '' OR ledgeridparam = '0') THEN
     SET ledgeridparam = NULL;
    END IF;

    SELECT  l.ledger_veh_mapid
            ,l.ledgerid
            ,l.vehicleid
            ,l.customerno
            ,v.vehicleno
            ,l.createdby
            ,l.createdon
            ,l.updatedby
            ,l.updatedon
            ,v.uid
    FROM    ledger_veh_mapping as l
    INNER JOIN vehicle as v ON l.vehicleid = v.vehicleid
    INNER JOIN unit as u ON u.vehicleid = v.vehicleid 
    INNER JOIN devices as d ON d.uid = u.uid
    INNER JOIN `simcard` s ON s.id = d.simcardid AND s.trans_statusid IN (13,14)
    WHERE (l.ledger_veh_mapid  = ledger_veh_mapidparam OR ledger_veh_mapidparam IS NULL)
    AND     (l.customerno = customernoparam OR customernoparam IS NULL)
    AND     (v.customerno = customernoparam OR customernoparam IS NULL)
    AND     (l.ledgerid = ledgeridparam OR ledgeridparam IS NULL)
    AND     (v.vehicleno LIKE CONCAT('%', vehiclenoparam, '%') OR vehiclenoparam IS NULL)
    AND     l.isdeleted = 0
    ORDER BY v.vehicleno ASC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_locations` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_locations`(
	IN custno INT
    , IN locid INT
	)
BEGIN
	IF(custno = '' OR custno = 0) THEN
		SET custno = NULL;
	END IF;
    IF(locid = '' OR locid = 0) THEN
		SET locid = NULL;
	END IF;
	SELECT locationid
			, locationname
			, customerno
			, created_on
			, updated_on
   FROM location
   WHERE (customerno = custno OR custno IS NULL)
   AND	(locationid = locid OR locid IS NULL)
   AND isdeleted = 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_low_sms_left_cust` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_low_sms_left_cust`()
BEGIN
    
SELECT 	c.customerno
        ,c.customercompany
        ,c.smsleft
    FROM customer AS c
    WHERE c.customercompany <> 'Elixia Tech' AND c.use_trace = 0 AND c.smsleft < 50 AND c.renewal NOT IN (-1,-2)
    ORDER BY c.customerno ASC
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_odometer_reading` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_odometer_reading`(
	IN unitnumber VARCHAR(16)
    , IN custno INT
    , IN todaysDate DATE
)
BEGIN
	DECLARE unitId INT DEFAULT NULL;
    SELECT 	uid INTO unitId
    FROM	unit
    WHERE 	LTRIM(RTRIM(unitno)) = unitnumber
    AND		customerno = custno;
    
	SELECT 	first_odometer
			, last_odometer
            , max_odometer 
    FROM 	dailyreport 
    WHERE 	(uid = unitId OR unitId IS NULL)
    AND 	customerno = custno
    AND		daily_date = todaysDate;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_opening_balance` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_opening_balance`(
IN ledgeridParam INT,
IN fromDateParam date)
BEGIN
DECLARE invoiceAmount,pendingAmount INT;
DECLARE totalPendingAmount INT;

SELECT sum(inv_amt) INTO  invoiceAmount from invoice
where inv_date >= '2018-04-01' AND inv_date < fromDateParam AND ledgerid=ledgeridParam;


SELECT sum(pending_amt) INTO  pendingAmount from invoice
where inv_date <= '2018-03-31' AND ledgerid=ledgeridParam;

SET totalPendingAmount=invoiceAmount+pendingAmount;


SELECT (totalPendingAmount - sum(CASE WHEN ipm.`paymentdate`<fromDateParam THEN ipm.`paid_amt` ELSE 0 END)) as Opening_Balance
FROM invoice_payment_mapping ipm
INNER JOIN invoice i on i.invoiceid= ipm.invoiceid
WHERE i.ledgerid = ledgeridParam;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_payment_mapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_payment_mapping`(
IN invoicemapping_idParam INT)
BEGIN
  SELECT ip.invoiceno,ip.customerno,(SELECT customercompany from customer where customerno = ip.customerno)as customercompany,ip.inv_amt,ip.paid_amt,ip.paymentdate,ip.tds_amt,ip.bad_debts,ip.cheque_no,ip.pay_mode,
  ip.cheque_date,ip.bank_name,ip.bank_branch,(SELECT mode from payment_mode where ip.pay_mode = pm_id) as payment_mode 
  
  from invoice_payment_mapping ip
  WHERE ip_id = invoicemapping_idParam;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_payment_mode` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_payment_mode`()
BEGIN
SELECT * from payment_mode;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_payment_sub_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_payment_sub_details`(
    IN invoiceidParam INT
    )
BEGIN
DECLARE InvoiceAmountParam float(10,2);
DECLARE TotalPaidAmountParam float(10,2);
DECLARE TotalPendingAmountParam float(10,2);
DECLARE TotalTdsAmountParam float(10,2);
DECLARE TotalUnpaid_AmountParam float(10,2);
DECLARE InvoiceidVar INT;

SELECT DISTINCT invoiceid INTO InvoiceidVar from invoice_payment_mapping 
where invoiceid = invoiceidParam;
IF(InvoiceidVar IS NULL) THEN
SELECT inv_amt ,paid_amt,(inv_amt-(paid_amt+tds_amt+unpaid_amt)),tds_amt,unpaid_amt
INTO InvoiceAmountParam,TotalPaidAmountParam,TotalPendingAmountParam,TotalTdsAmountParam,TotalUnpaid_AmountParam
from invoice
WHERE invoiceid =  invoiceidParam;
ELSE
SELECT ip.inv_amt ,sum(ip.paid_amt)+(i.paid_amt),(i.inv_amt-((sum(ip.paid_amt)+i.paid_amt)+(sum(ip.tds_amt)+i.tds_amt)+(sum(ip.bad_debts)+i.unpaid_amt))),(i.tds_amt)+sum(ip.tds_amt),(sum(ip.bad_debts)+i.unpaid_amt)
INTO InvoiceAmountParam,TotalPaidAmountParam,TotalPendingAmountParam,TotalTdsAmountParam,TotalUnpaid_AmountParam
from invoice_payment_mapping ip
INNER JOIN invoice i on i.invoiceid = ip.invoiceid
WHERE i.invoiceid =  invoiceidParam;
END IF;
SELECT InvoiceAmountParam,TotalPaidAmountParam,TotalPendingAmountParam,TotalTdsAmountParam,TotalUnpaid_AmountParam;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_pending_invoices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_pending_invoices`(
        IN customernos INT
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;

SELECT count(d.device_invoiceno) AS pending_invoices
    FROM `devices` as d
    WHERE d.customerno=customernos AND d.device_invoiceno=''
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_pending_renewal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_pending_renewal`(
        IN customernos INT,
        IN startdate date,
        IN enddate date
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;

SELECT vehicle.vehicleno FROM vehicle 
INNER JOIN devices ON devices.uid = vehicle.uid 
INNER JOIN driver ON driver.driverid = vehicle.driverid 
INNER JOIN unit ON devices.uid = unit.uid 
LEFT OUTER JOIN simcard ON simcard.id = devices.simcardid 
WHERE vehicle.isdeleted= 0 AND (devices.expirydate BETWEEN startdate AND enddate) AND unit.customerno NOT IN (-1,1) AND unit.customerno=customernos AND devices.expirydate !='1970-01-01' AND devices.expirydate!='0000-00-00' AND unit.trans_statusid NOT IN(23,24,10)
ORDER BY vehicle.vehicleno
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_phoneno_route_chkpt` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_phoneno_route_chkpt`(
	IN routeIdParam INT
    , IN chkPtIdParam INT
    , IN customerNoParam INT
)
BEGIN
	IF(routeIdParam = 0) THEN
		SET routeIdParam = NULL;
	END IF;
	IF(chkPtIdParam = 0) THEN
		SET chkPtIdParam = NULL;
	END IF;
	IF(customerNoParam = 0) THEN
		SET customerNoParam = NULL;
	END IF;

    IF(chkPtIdParam IS NOT NULL AND routeIdParam IS NOT NULL AND customerNoParam IS NOT NULL) THEN
		BEGIN
			SELECT	phoneNo
			FROM 	routeChkPtPhoneMapping
			WHERE 	routeId = routeIdParam
			AND 	checkpointId = chkPtIdParam
            AND 	customerNo = customerNoParam
			AND 	isdeleted = 0;
		END;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_po` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_po`( 
IN customernoparam INT
,IN poidparam VARCHAR(11)
)
BEGIN
IF(customernoparam = '' OR customernoparam = '0') THEN
 SET customernoparam = NULL;
END IF;
IF(poidparam = '') THEN
 SET poidparam = NULL;
END IF;
SELECT
	poid
    ,pono
    ,podate
    ,poamount
    ,poexpiry
    ,description
    ,customerno
    ,createdby
    ,createdon
    ,updatedby
    ,updatedon
FROM po
WHERE 
(customerno = customernoparam OR customernoparam IS NULL)
AND (poid = poidparam OR poidparam IS NULL)
AND isdeleted = 0
;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_profit_loss_analysis` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_profit_loss_analysis`(
IN custNo INT
, IN todaysdate DATE
)
BEGIN

  DECLARE totalUnitCount DECIMAL(11,2);
  DECLARE totalUnitCost DECIMAL(11,2);
  DECLARE totalSimcardCount DECIMAL(11,2);
  DECLARE totalSimcardCost DECIMAL(11,2);
  DECLARE totalPaymentCollected DECIMAL(11,2);
  DECLARE totalPaymentDue DECIMAL(11,2);
  DECLARE totalSimcardInventory DECIMAL(11,2);
  DECLARE totalClosingStockCost DECIMAL(11,2);
  DECLARE totalMaterialCost DECIMAL(11,2);
  DECLARE totalOtherCost DECIMAL(11,2);
  DECLARE totalSalary DECIMAL(11,2);
  DECLARE totalOtherIndirectExp DECIMAL(11,2);
  DECLARE totalExpense DECIMAL(11,2);
  DECLARE plDiff DECIMAL(11,2);
  DECLARE plStatus VARCHAR(20);
  DECLARE varSimcardInventoryDBConstant DECIMAL(11,2);
  DECLARE varSimcardInventory DECIMAL(11,2);

  DECLARE varTotalUnits INT;
  DECLARE varTotalSimcards INT;

  DECLARE varTotalSimcardCost DECIMAL(11,2);

  DECLARE varSimcardTotalCost DECIMAL(11,2);
  DECLARE varPerSimcardCost DECIMAL(11,2);

  DECLARE varPerUnitCost DECIMAL(11,2);

  DECLARE varSalaryPerUnit DECIMAL(11,2);
  DECLARE varIndExpPerUnit DECIMAL(11,2);

  DECLARE varSimcardInventoryFixedConstant INT;
  DECLARE varClosingStockFixedConstant INT;
  DECLARE varSalaryConstantFixedConstant INT;
  DECLARE otherIndirectExpFixedConstant INT;

  DECLARE varCustomerNo INT;
  DECLARE varCustomerName VARCHAR(50);
  DECLARE varCustomerCompany VARCHAR(150);
  DECLARE varCustomerProfit DECIMAL(11,2);

  DECLARE varIndirectExp_13_14  DECIMAL(11,2);
  DECLARE varIndirectExp_14_15  DECIMAL(11,2);
  DECLARE varIndirectExp_15_16  DECIMAL(11,2);
  DECLARE varIndirectExp_16_17  DECIMAL(11,2);

  DECLARE varTotalIndirectExp_13_14  DECIMAL(11,2);
  DECLARE varTotalIndirectExp_14_15  DECIMAL(11,2);
  DECLARE varTotalIndirectExp_15_16  DECIMAL(11,2);
  DECLARE varTotalIndirectExp_16_17  DECIMAL(11,2);


  SET totalMaterialCost = 0;
  SET totalOtherCost = 0;



  SET varSimcardInventoryFixedConstant = 1477000;
  SET varClosingStockFixedConstant = 13364457;
  SET varSalaryConstantFixedConstant = 10203589;
  SET otherIndirectExpFixedConstant = 425365;

  SET varIndirectExp_13_14 = 3300009;
  SET varIndirectExp_14_15 = 7252000;
  SET varIndirectExp_15_16 = 10275000;
  SET varIndirectExp_16_17 = 19800000;



  SELECT customerno,customername,customercompany
  INTO varCustomerNo,varCustomerName,varCustomerCompany
  FROM customer
  WHERE customerno = custNo;


  SELECT SUM(unitcost), count(unit.uid)
  INTO totalUnitCost, totalUnitCount
  FROM unit
  INNER JOIN devices on devices.uid = unit.uid
  WHERE unit.customerno = custNo
  AND devices.simcardid != 0
  AND unit.trans_statusid NOT IN(10,22);

  select count(simcardid) as simcard,
  SUM((period_diff(date_format(todaysdate, '%Y%m'), date_format(installdate, '%Y%m'))) * 50) as exp
  INTO totalSimcardCount, totalSimcardCost
  FROM devices
  INNER JOIN unit on unit.uid = devices.uid
  WHERE devices.customerno = custNo
  AND devices.simcardid != 0
  AND unit.trans_statusid NOT IN(10,22);


  SELECT SUM(inv_amt) INTO totalPaymentCollected
  FROM invoice
  WHERE customerno = custNo
  AND  LOWER(status) = 'paid'
  AND isdeleted = 0;

  SELECT SUM(inv_amt) INTO totalPaymentDue
  FROM invoice
  WHERE customerno = custNo
  AND  LOWER(status) = 'Pending'
  AND isdeleted = 0;



  SELECT count(unit.uid)
  INTO varTotalUnits
  FROM unit
  INNER JOIN devices on devices.uid = unit.uid
  INNER JOIN customer on customer.customerno = unit.customerno
  WHERE customer.renewal NOT IN(-1,-2);


  SELECT count(simcardid) ,
  SUM((period_diff(date_format(todaysdate, '%Y%m'), date_format(installdate, '%Y%m'))) * 50) as exp
  INTO varTotalSimcards ,varTotalSimcardCost
  FROM devices
  INNER JOIN unit on unit.uid = devices.uid
  INNER JOIN customer on customer.customerno = devices.customerno
  INNER JOIN vehicle on vehicle.uid = unit.uid
  WHERE customer.renewal NOT IN(-1,-2)
  AND unit.trans_statusid NOT IN(10,22)
  AND devices.simcardid != 0
  AND vehicle.isdeleted = 0
  AND installdate!='0000-00-00'
  AND installdate !='1970-01-01';

  SET varTotalIndirectExp_13_14 = (varIndirectExp_13_14/varTotalUnits)*totalUnitCount;
  SET varTotalIndirectExp_14_15 = (varIndirectExp_14_15/varTotalUnits)*totalUnitCount;
  SET varTotalIndirectExp_15_16 = (varIndirectExp_15_16/varTotalUnits)*totalUnitCount;
  SET varTotalIndirectExp_16_17 = (varIndirectExp_16_17/varTotalUnits)*totalUnitCount;


  SET varIndExpPerUnit = (otherIndirectExpFixedConstant / varTotalUnits);
  SET totalOtherIndirectExp = (varIndExpPerUnit * totalUnitCount);

  SET totalExpense = (totalUnitCost + totalSimcardCost +  totalMaterialCost + totalOtherCost  + totalOtherIndirectExp + varTotalIndirectExp_13_14+varTotalIndirectExp_14_15+varTotalIndirectExp_15_16+varTotalIndirectExp_16_17);
  SET plDiff = (totalPaymentCollected - totalExpense);
   IF(totalPaymentDue IS NULL) THEN
  SET totalPaymentDue = 0;
   END IF;

  SET varCustomerProfit = (plDiff / (totalPaymentCollected + totalPaymentDue)) * 100;

  IF(plDiff > 0) THEN
    SET plStatus = "Profit";
  ELSE
    SET plStatus = "Loss";
  END IF;

  SELECT
  varCustomerNo
  ,varCustomerName
  ,varCustomerCompany
    ,COALESCE(totalUnitCount,0) as totalUnitCount
    ,COALESCE(totalUnitCost,0) as totalUnitCost
    ,COALESCE(totalSimcardCount,0) as totalSimcardCount
    ,COALESCE(totalSimcardCost,0) as totalSimcardCost
    ,COALESCE(totalPaymentCollected,0) as totalPaymentCollected
    ,COALESCE(totalPaymentDue,0) as totalPaymentDue
    ,COALESCE(varTotalUnits,0) as varTotalUnits
    ,COALESCE(varTotalSimcards,0) as varTotalSimcards
    ,COALESCE(totalMaterialCost,0) as totalMaterialCost
    ,COALESCE(totalOtherCost,0) as totalOtherCost
    ,COALESCE(totalOtherIndirectExp,0) as totalOtherIndirectExp
    ,COALESCE(totalExpense,0) as  totalExpense
    ,COALESCE(varTotalIndirectExp_13_14,0) as  varTotalIndirectExp_13_14
    ,COALESCE(varTotalIndirectExp_14_15,0) as  varTotalIndirectExp_14_15
    ,COALESCE(varTotalIndirectExp_15_16,0) as  varTotalIndirectExp_15_16
    ,COALESCE(varTotalIndirectExp_16_17,0) as  varTotalIndirectExp_16_17
    ,plDiff
   ,COALESCE(varCustomerProfit,0) as varCustomerProfit
    ,plStatus;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_proposed_indent` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_proposed_indent`(
	IN custno INT
    , propindentid INT
    , factoryidparam INT
    , daterequired varchar(15)
	)
BEGIN
	IF(custno = '' OR custno = 0) THEN
		SET custno = NULL;
	END IF;
        IF(propindentid = '' OR propindentid = 0) THEN
		SET propindentid = NULL;
	END IF;
        IF(factoryidparam = '' OR factoryidparam = 0) THEN
		SET factoryidparam = NULL;
	END IF;
        IF(daterequired = '' OR daterequired = 0) THEN
		SET daterequired = NULL;
	END IF;
	SELECT 
    pi.proposedindentid,
    pi.factoryid,
    pi.hasTransporterAccepted,
    pi.isApproved,
    f.factoryname,
    pi.depotid,
    d.depotname,
    t.transporterid,
    t.transportername,
    vehtype.vehiclecode,
    pit.vehicleno,
    pi.date_required,
    pit.proposed_vehicletypeid,
    pit.actual_vehicletypeid,
    pit.isAccepted,
    pit.vehicleno,
    pit.drivermobileno,
    total_weight,
    total_volume,
    pi.customerno,
    pi.created_on,
    pi.updated_on,
    pi.created_by,
    pi.updated_by,
    i.loadstatus,
    i.shipmentno,
    i.remarks
FROM
    proposed_indent pi
        INNER JOIN
    proposed_indent_transporter_mapping pit ON pit.proposedindentid = pi.proposedindentid
        INNER JOIN
    factory f ON f.factoryid = pi.factoryid
        INNER JOIN
    depot d ON d.depotid = pi.depotid
        INNER JOIN
    transporter t ON t.transporterid = pit.proposed_transporterid
        INNER JOIN
    vehicletype vehtype ON vehtype.vehicletypeid = pit.proposed_vehicletypeid
        LEFT JOIN
    indent i ON i.proposedindentid = pi.proposedindentid
WHERE
    (pi.customerno = custno OR custno IS NULL)
        AND (pi.proposedindentid = propindentid
        OR propindentid IS NULL)
        AND (pi.factoryid = factoryidparam
        OR factoryidparam IS NULL)
        AND (pi.date_required = daterequired
        OR daterequired IS NULL)
        AND pi.isdeleted = 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_RealtimeData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_RealtimeData`(
  IN custno INT,
  IN userid INT,
  IN todaysdate DATE
)
BEGIN

  SELECT vehicleno
    ,unitno
    ,groupname
    ,drivername
  ,driverphone
    ,rtd.lastupdated
    ,`status`
    ,rtd.location
    ,rtd.speed
    ,rtd.distance
    ,rtd.power
    ,rtd.ac_status
    ,rtd.door_status
    ,rtd.temperature1
    ,rtd.temperature2
    ,rtd.temperature3
    ,rtd.temperature4
    ,rtd.genset1
    ,rtd.genset2
    ,rtd.humidity
    ,rtd.is_buzzer
    ,rtd.is_mobiliser
    ,rtd.is_freeze
    ,rtd.customerno
    ,rtd.created_by
    ,rtd.created_on

  FROM realtimedata rtd
  INNER JOIN vehicle on vehicle.vehicleid = rtd.vehicleid
  INNER JOIN unit on unit.uid = rtd.uid
  INNER JOIN driver on driver.driverid = rtd.driverid
  LEFT OUTER JOIN `group` on `group`.groupid = rtd.groupid
  WHERE rtd.customerno = custno
  AND rtd.created_by = userid
  AND date(rtd.created_on) = todaysdate
  AND rtd.isdeleted = 0
  Order by vehicle.kind ASC, vehicle.vehicleno ASC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_role` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_role`( 
     IN rid INT
    , IN parentid INT
    , IN mid INT
    , IN custno INT
    
)
BEGIN
        IF(rid = '' OR rid = 0) THEN
		SET rid = NULL;
	END IF;
        IF(parentid = '' OR parentid = 0) THEN
		SET parentid = NULL;
	END IF;
        IF(mid = '' OR mid = 0) THEN
		SET mid = NULL;
	END IF;
        IF(custno = '' OR custno = 0) THEN
		SET custno = NULL;
	END IF;

	SELECT 
            id
            , role
            , parentroleid as pid
            , (select role FROM role where id=pid and pid<>0)as prole
            , role.moduleid
            , customerno
            , modulename
	FROM role
        INNER JOIN modules on modules.moduleid = role.moduleid
        WHERE (id = rid OR rid IS NULL)
        AND (parentroleid = parentid OR parentid IS NULL)
        AND (role.moduleid = mid OR mid IS NULL)
        AND (customerno = custno OR custno IS NULL)
        AND role.isdeleted=0 order by sequenceno ASC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_role_mapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_role_mapping`(
	IN useridparam INT
    ,IN custno INT
    ,IN moduleidparam INT
)
BEGIN

	IF(useridparam = '' OR useridparam = 0) THEN
		SET useridparam = NULL;
    END IF;
	IF(custno = '' OR custno = 0) THEN
		SET custno = NULL;
    END IF;
    IF(moduleidparam = '' OR moduleidparam = 0) THEN
		SET moduleidparam = NULL;
    END IF;
    
    
  IF(moduleidparam = 2)THEN 
	
  SELECT 
    maintenanceroleid as roleid ,
	maintenancerole as role
  FROM rolemapping
  WHERE (userid = useridparam OR useridparam IS NULL)
  AND (customerno = custno OR custno IS NULL)
  AND  isdeleted = 0;
  
  ELSE 
  
  SELECT 
    roleid,
	role
  FROM user
  WHERE (userid = useridparam OR useridparam IS NULL)
  AND (customerno = custno OR custno IS NULL)
  AND  isdeleted = 0;
  END IF;
  
  

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_routecheckpoints` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_routecheckpoints`(
	IN custno INT
    , IN routechkptid INT
	)
BEGIN
	IF(custno = '' OR custno = 0) THEN
		SET custno = NULL;
	END IF;
    IF routechkptid = '' OR routechkptid = 0 THEN
		SET routechkptid = NULL;
    END IF;
	SELECT 	 r.routecheckpointid
			,rm.routename				
			,r.routemasterid
			,r.fromlocationid
            , fact.factoryname
			, r.tolocationid
            , toloc.locationname
            , r.distance
			, r.customerno
   FROM routecheckpoint AS r
   INNER JOIN factory AS fact ON fact.factoryid = r.fromlocationid
   INNER JOIN location AS toloc ON toloc.locationid = r.tolocationid
   INNER JOIN routemaster AS rm ON rm.routemasterid = r.routemasterid
   WHERE 	(r.customerno = custno OR custno IS NULL)
   AND		(r.routecheckpointid = routechkptid OR routechkptid IS NULL)
   AND 		r.isdeleted = 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_routemaster` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_routemaster`(
	IN custno INT
    , IN rtmasterid INT
	)
BEGIN
	IF(custno = '' OR custno = 0) THEN
		SET custno = NULL;
	END IF;
    IF(rtmasterid = '' OR rtmasterid = 0) THEN
		SET rtmasterid = NULL;
	END IF;
	SELECT 	r.routemasterid
			, r.routename
			, r.routedescription
			, r.fromlocationid
            , fact.factoryname
			, r.tolocationid
            , d.depotname
            , r.distance
            , r.travellingtime
			, r.customerno
   FROM routemaster AS r
   INNER JOIN factory AS fact ON fact.factoryid = r.fromlocationid
   INNER JOIN depot AS d ON d.depotid = r.tolocationid
   WHERE 	(r.customerno = custno OR custno IS NULL)
   AND 		(r.routemasterid = rtmasterid OR rtmasterid IS NULL)
   AND 		r.isdeleted = 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_search_clients` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_search_clients`(
	IN clientStringParam VARCHAR(50)
	,IN customerNoParam INT
)
BEGIN
	IF(clientStringParam = '') THEN
		SET clientStringParam = NULL;
	END IF;
	IF(customerNoParam = '' OR customerNoParam = 0) THEN
		SET customerNoParam = NULL;
	END IF;
	
	SELECT 
		clientId
		,clientId as id
		,clientName
		,clientName as name
		,email
		,phone
		,c.segmentId
		,i.segmentName
		,agreementStart
		,agreementEnd
		,address
		,c.customerNo
		,c.createdBy
		,c.createdOn
		,c.updatedBy
		,c.updatedOn
	FROM clients c
	LEFT JOIN industrySegment i on i.segmentId = c.segmentId
	WHERE (c.customerNo = customerNoParam OR customerNoParam IS NULL)
	AND (c.clientName LIKE CONCAT('%', clientStringParam, '%') OR clientStringParam IS NULL)
	AND c.isDeleted = 0
	ORDER BY clientName ASC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_search_vendors` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_search_vendors`(
	IN vendorStringParam VARCHAR(50) ,
	IN customerNoParam int
)
BEGIN
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
	END;
	
	START TRANSACTION;

		IF(vendorStringParam = '' ) THEN
			SET vendorStringParam = NULL;
        END IF;

		IF(customerNoParam = 0 OR customerNoParam = '') THEN
			SET customerNoParam = NULL;
        END IF;	
	
		
		
		IF (customerNoParam IS NOT NULL) THEN 
			SELECT
				vendorId,
			    vendorCode,
				vendorName,
				contactPerson,
				email,
				phone,
				address,
				v.serviceId,
				sm.serviceName,
				v.serviceCost,
				v.customerno,
				v.createdBy,
				v.createdOn,
				v.updatedBy,
				v.updatedOn
			FROM vendors v
			LEFT JOIN serviceTypeMaster as sm on sm.serviceId = v.serviceId
			WHERE (v.customerNo  = customerNoParam OR customerNoParam IS NULL)
			AND (v.vendorName LIKE CONCAT('%', vendorStringParam, '%') OR vendorStringParam IS NULL)
			AND v.isDeleted = 0
			ORDER By vendorName ASC;
		END IF;

	COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_shipments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_shipments`(
	IN shipmentIdParam INT,
	IN customerNoParam int
)
BEGIN
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
	END;
	
	START TRANSACTION;
		IF (shipmentIdParam = '' OR shipmentIdParam = 0) THEN
			SET shipmentIdParam = NULL;
		END IF;
		IF (customerNoParam = '' OR customerNoParam = 0) THEN
			SET customerNoParam = NULL;
		END IF;	
		
		
			SELECT 
				shipmentId,
				shipmentNo,
				pickupDate,
				pickupAddress,
				pickupPincode,
				deliveryDate,
				deliveryAddress,
				deliveryPincode,
				s.clientId,
				awbNo,
				classificationId,
				s.vendorId,
				s.vehicleId,
				s.quantity,
				s.weight,
				s.volume,
				s.statusId,
				s.remarkId,
				actualDeliveryDate,
				s.customerno,
				s.createdBy,
				s.createdOn,
				s.updatedBy,
				s.updatedOn,
				v.vehicleNo,
				c.clientName,
				ven.vendorName,
				sm.statusName,
				rm.remarkName,
				pickupQuantity,
				pickupWeight,
				deliveryQuantity,
				deliveryWeight,
				billingId,
				variableId,
				s.vehTypeId,
				veh.vehicleType,
				veh.capacity,
				comments
			FROM shipment s
			INNER JOIN clients c on c.clientId  = s.clientId
			LEFT JOIN vendors as ven on ven.vendorId = s.vendorId
			LEFT JOIN vehicles v on v.vehicleId = s.vehicleId
			LEFT JOIN statusMaster sm on sm.statusId = s.statusId
			LEFT JOIN remarkMaster rm on rm.remarkId = s.remarkId
			LEFT JOIN billingType bt on bt.billingId = s.billingType
			LEFT JOIN variableType vt on vt.variableId = s.variableType
			LEFT JOIN vehicleType veh on veh.vehTypeId = s.vehTypeId
			WHERE (s.shipmentId  = shipmentIdParam OR shipmentIdParam IS NULL)
			AND (s.customerNo = customerNoParam OR customerNoParam IS NULL)
			AND s.isDeleted = 0
			Order By shipmentId ASC;
	COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_skuweight` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_skuweight`(
    IN custno INT
    , IN did INT
    , IN factid INT
    , IN datereq datetime
)
BEGIN
    IF(custno = '' OR custno = 0) THEN
        SET custno = NULL;
    END IF;
    IF(did = '' OR did = 0) THEN
        SET did = NULL;
    END IF;
    IF(factid = '' OR factid = 0) THEN
        SET factid = NULL;
    END IF;
    IF(datereq = '' OR datereq LIKE '%0000-00-00%') THEN
        SET datereq = NULL;
    END IF;
    SELECT     fd.skuid
            , s.skucode
	    , s.sku_description
	    , s.weight as perunitweight
            , s.volume
            , sum(fd.weight) as skuweight
            , fd.date_required
            , fd.depotid
            , fd.factoryid
    FROM     factory_delivery fd INNER JOIN sku s ON fd.skuid = s.skuid
    WHERE     (fd.customerno = custno OR custno IS NULL)
    AND        (fd.factoryid = factid OR factid IS NULL)
    AND        (fd.depotid = did OR did IS NULL)
    AND        (fd.date_required = datereq OR datereq IS NULL)
    GROUP BY date_required,factoryid, depotid, skuid;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_skuweight_byfactorydepot` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_skuweight_byfactorydepot`(
    IN custno INT
    , IN datereq datetime
)
BEGIN
    IF(custno = '' OR custno = 0) THEN
        SET custno = NULL;
    END IF;
    IF(datereq = '' OR datereq LIKE '%0000-00-00%') THEN
        SET datereq = NULL;
    END IF;
    SELECT     sum(fd.weight) as weight
            , fd.date_required
            , fd.factoryid
            , fd.depotid
            FROM factory_delivery fd
        WHERE     (customerno = custno OR custno IS NULL)
        AND        (fd.date_required = datereq OR datereq IS NULL)
        GROUP BY date_required, factoryid, depotid;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_SMSLogs` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_SMSLogs`(
    IN customernoparam INT
    , IN moduleidparam INT
,IN dateparam DATETIME  	
)
BEGIN
     
    SELECT	mobileno
			,message
			,response
			,inserted_datetime
	FROM 	smslog
	WHERE 	customerno = customernoparam
    AND 	moduleid = moduleidparam
    AND 	isdeleted = 0
AND  inserted_datetime between dateparam and DATE_ADD(dateparam,INTERVAL 24 HOUR);
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_sms_consume_frm_comq` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_sms_consume_frm_comq`(
    IN customernoParam INT,
    IN todaysdateParam DATE
)
BEGIN
    DECLARE todayVar VARCHAR(20);
    IF(customernoParam = '' OR customernoParam = '0') THEN
		SET customernoParam = NULL;
	END IF;
    IF(todaysdateParam = '' OR todaysdateParam = '0') THEN
            SET todaysdateParam = NULL;
    ELSE
            SELECT CONCAT(todaysdateParam,'%') INTO todayVar;
    END IF;
SELECT COUNT(cq.cqhid) AS count1 FROM `comhistory` as cq
    WHERE cq.customerno=customernoParam AND cq.timesent LIKE todayVar AND cq.comtype=1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_sms_consume_frm_smslog` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_sms_consume_frm_smslog`(
    IN customernoParam INT,
    IN todaysdateParam DATE
)
BEGIN
    DECLARE todayVar VARCHAR(20);
    IF(customernoParam = '' OR customernoParam = '0') THEN
        SET customernoParam = NULL;
    END IF;

    IF(todaysdateParam = '' OR todaysdateParam = '0') THEN
        SET todaysdateParam = NULL;
    ELSE 
        SELECT CONCAT(todaysdateParam,'%') INTO todayVar;
    END IF;

    SELECT COUNT(sm.smsid) AS count1 FROM `smslog` AS sm 
    WHERE sm.customerno=customernoParam AND sm.inserted_datetime LIKE todayVar;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_sms_detail_consume_yesterday` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_sms_detail_consume_yesterday`(
    IN customernos INT
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;
SELECT * FROM ((select user.phone,comqueue.message,comhistory.timesent from comhistory
INNER JOIN comqueue on comqueue.cqid=comhistory.comqid
INNER JOIN user on user.userid=comhistory.userid
WHERE comhistory.customerno=customernos AND DATE(comhistory.timesent)=subdate(CURRENT_DATE,1))
UNION ALL
(SELECT mobileno,message,inserted_datetime from smslog WHERE customerno=customernos AND DATE(inserted_datetime)=subdate(CURRENT_DATE,1))
 ) results
 ORDER BY timesent ASC
;     
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_toggleswitch_trips` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_toggleswitch_trips`(
   IN vehicleidparam INT
   ,IN custnoparam INT
   , IN startdateparam DATETIME
   , IN enddateparam DATETIME
   , IN groupidparam INT
)
BEGIN
	IF(vehicleidparam = 0) THEN
		SET vehicleidparam = NULL;
	END IF;
    
    IF(groupidparam = 0) THEN
		SET groupidparam = NULL;
	END IF;
    
    IF(startdateparam = '0000-00-00 00:00:00' OR enddateparam = '0000-00-00 00:00:00') THEN
		SET startdateparam = NULL;
        SET enddateparam = NULL;
	END IF;
    SELECT 		ts.id
				, ts.uid
                , ts.vehicleid
                , ts.starttime
                , ts.endtime
                , ts.startlat
                , ts.startlong
                , ts.endlat
                , ts.endlong
                , veh.vehicleno
                , dev.deviceid
	FROM 		toggle_switch ts
    INNER JOIN	vehicle veh ON veh.vehicleid = ts.vehicleid
    INNER JOIN	devices dev ON dev.uid = ts.uid
    WHERE 		ts.customerno = custnoparam
    AND			(ts.vehicleid = vehicleidparam OR vehicleidparam IS NULL)
    AND 		(veh.groupid = groupidparam OR groupidparam IS NULL)
    AND 		((ts.starttime BETWEEN startdateparam AND enddateparam) OR (startdateparam IS NULL AND enddateparam IS NULL))
	ORDER BY	ts.starttime DESC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_transactionconditions` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_transactionconditions`( 
    IN transtypeidparam INT
    ,IN conditionparam varchar(50)
    ,IN custno INT
)
BEGIN
    IF(transtypeidparam = '' OR transtypeidparam = 0) THEN
        SET transtypeidparam = NULL;
    END IF;
    IF(conditionparam = '' OR conditionparam = 0) THEN
        SET conditionparam = NULL;
    END IF;
    IF(custno = '' OR custno = 0) THEN
        SET custno = NULL;
    END IF;
    
    SELECT 
        conditionid
        ,conditionname
    FROM maintenance_conditions    
    WHERE (transactiontypeid = transtypeidparam OR transtypeidparam IS NULL)
    AND   (conditionname = conditionparam OR conditionparam IS NULL)
    AND   (customerno = custno OR custno IS NULL)
    AND   isdeleted = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_transactionrules` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_transactionrules`( 
    IN custno INT
    , IN ruleidparam INT
    , IN conditionidparam INT
)
BEGIN
    IF(custno = '' OR custno = 0) THEN
        SET custno = NULL;
    END IF;
    IF(ruleidparam = '' OR ruleidparam = 0) THEN
        SET ruleidparam = NULL;
    END IF;
    IF(conditionidparam = '' OR conditionidparam = 0) THEN
        SET conditionidparam = NULL;
    END IF;

    SELECT 
        mr.ruleid
        ,mr.conditionid
        ,mr.minval
        ,mr.maxval
        ,mr.sequenceno
        ,mr.approverid
        ,mc.conditionname
        ,mt.categoryname
        ,roles.role
    FROM maintenance_rules as mr
    INNER JOIN maintenance_conditions as mc on mc.conditionid = mr.conditionid
    INNER JOIN maintenance_transactiontype as mt on mt.transactiontypeid = mc.transactiontypeid
    INNER JOIN `role` as roles on roles.id = mr.approverid
    WHERE (mr.ruleid = ruleidparam OR ruleidparam IS NULL)
    AND   (mr.conditionid = conditionidparam OR conditionidparam IS NULL)
    AND   (mr.customerno = custno OR custno IS NULL)
    AND   mr.isdeleted = 0
    ORDER BY mr.ruleid ASC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_transactiontype` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_transactiontype`( 
    IN transaction_typeid INT
)
BEGIN
    
    SELECT 
        transactiontypeid
        ,categoryname
    FROM maintenance_transactiontype    
    WHERE 
        isdeleted = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_transmitter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_transmitter`( 
    IN transmitteridparam INT
    , IN transmitternoparam VARCHAR(25)
    , IN teamidparam VARCHAR(20)
    , IN trans_statusparam VARCHAR(20)
    , IN customernoparam VARCHAR(20)
)
BEGIN
	IF(transmitteridparam = '' OR transmitteridparam = '0') THEN
		SET transmitteridparam = NULL;
	END IF;

	IF(customernoparam = '') THEN
		SET customernoparam = NULL;
	 ELSE 
		SET customernoparam = CAST(customernoparam AS SIGNED INTEGER);
	END IF;

	IF(trans_statusparam = '') THEN
	 SET trans_statusparam = NULL;
	END IF;

	IF(transmitternoparam = '') THEN
	 SET transmitternoparam = NULL;
	END IF;

	IF(teamidparam = '') THEN
		SET teamidparam = NULL;
	 ELSE 
		SET teamidparam = CAST(teamidparam AS SIGNED INTEGER);
	END IF;

	SELECT t.transmitterid
			,t.transmitterno
			,t.teamid
			,t.comments
			,t.customerno
			,t.trans_status
			,t.created_on
			,t.updated_on
			,t.created_by
			,t.updated_by
			,ts.`status`
	FROM  transmitter as t
	INNER JOIN trans_status AS ts ON ts.id = t.trans_status
	WHERE (t.transmitterno  = transmitteridparam OR transmitteridparam IS NULL)
	AND (t.transmitterno = transmitternoparam OR transmitternoparam IS NULL)
	AND (t.teamid = teamidparam OR teamidparam IS NULL)
	AND (t.customerno IN (customernoparam) OR customernoparam IS NULL)
	AND (FIND_IN_SET(t.trans_status,trans_statusparam) OR trans_statusparam IS NULL)
	AND t.isdeleted = 0
	ORDER BY t.transmitterno ASC
;        
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_transportershare` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_transportershare`(
	IN custno INT
    , IN currenttransporterid INT
    , IN currentfactid INT
    , IN currentzoneid INT
    , IN transhareid INT
	)
BEGIN
	IF(custno = '' OR custno = 0) THEN
		SET custno = NULL;
	END IF;
    IF(currenttransporterid = '' OR currenttransporterid = 0) THEN
		SET currenttransporterid = NULL;
	END IF;
IF(currentfactid = '' OR currentfactid = 0) THEN
		SET currentfactid = NULL;
	END IF;
    IF(currentzoneid = '' OR currentzoneid = 0) THEN
		SET currentzoneid = NULL;
	END IF;
    IF(transhareid = '' OR transhareid = 0) THEN
		SET transhareid = NULL;
	END IF;
    
	SELECT          t.transporterid
			, t. transportername
			, ts.sharepercent
			, ts.transportershareid
			, z.zoneid
            , z.zonename
			, f.factoryid			
			, f.factoryname
			, ts.customerno
   FROM transportershare AS ts
   INNER JOIN transporter AS t ON t.transporterid = ts.transporterid
   INNER JOIN zone AS z ON z.zoneid = ts.zoneid
   INNER JOIN factory AS f ON ts.factoryid = f.factoryid
   WHERE 	(ts.customerno = custno OR custno IS NULL)
   AND		(ts.transporterid = currenttransporterid OR currenttransporterid IS NULL)
   AND		(ts.zoneid = currentzoneid OR currentzoneid IS NULL)
   AND		(ts.transportershareid = transhareid OR transhareid IS NULL)
AND		(ts.factoryid = currentfactid OR currentfactid IS NULL)
   AND 		ts.isdeleted = 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_tripdetails_data` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_tripdetails_data`(
    IN customerNoParam INT,
    IN reportTypeParam VARCHAR(50),
    IN currentDateParam DATE
)
BEGIN
    SET @serverTime = now();
    SET @istDateTime = CONVERT_TZ(@serverTime, 'SYSTEM', '+05:30');
    IF customerNoParam = 0 THEN
        SET customerNoParam = NULL;
    END IF;

    IF reportTypeParam = '' THEN
        SET reportTypeParam = NULL;
    END IF;

    IF(customerNoParam IS NOT NULL AND reportTypeParam IS NOT NULL)THEN

        IF(reportTypeParam = 'volumeDispatched')THEN
            SELECT DISTINCT(td.tripId), td.triplogno, v.vehicleno, od.chitthiNo, od.created_on as chittiCreationDate, od.bags
            #SELECT SUM(od.bags) into disptachVolumeCount
            FROM tripdetails td
            INNER JOIN vehicle v ON v.vehicleid = td.vehicleid
            INNER JOIN orderDetails od ON od.tripId = td.tripId
            WHERE (td.customerno= customerNoParam OR customerNoParam IS NULL)
            AND od.chitthiDate LIKE CONCAT('%',currentDateParam,'%')
            AND od.customerno= customerNoParam
            AND td.is_tripend = 0
            AND td.isdeleted =0
            AND v.isdeleted = 0
            AND od.isdeleted =0
            Order By td.tripid ASC;
        ELSEIF(reportTypeParam = 'lrDelayed')THEN
            SELECT DISTINCT(td.tripId), td.triplogno, vehicle.vehicleno, od.created_on as chittiCreationDate
            FROM tripdetails td
            INNER JOIN orderDetails od ON od.tripId = td.tripId AND od.orderid = (
                select o.orderid from orderDetails o where o.tripid = td.tripid AND o.customerno = td.customerno AND o.isdeleted = 0 Order by o.created_on ASC limit 1
            )
            INNER JOIN vehicle ON vehicle.vehicleId = td.vehicleId
            WHERE (td.customerno= customerNoParam OR customerNoParam IS NULL)
            AND od.created_on < DATE_SUB(@istDateTime, INTERVAL 1 HOUR)
            AND od.orderId NOT IN (SELECT dc.orderId FROM deliveryChallan dc WHERE dc.orderId = od.orderId AND dc.customerno = td.customerno)
            AND od.customerno= customerNoParam
            AND td.is_tripend = 0
            AND td.isdeleted =0
            AND od.isdeleted =0;
        ELSEIF(reportTypeParam = 'yardDetentionDeviation')THEN
            SELECT
            DISTINCT(td.tripId), td.triplogno, vehicle.vehicleno, od.created_on as chittiCreationDate, c.cname as yardName, vehicle.checkpoint_timestamp as yardOutTime
            FROM vehicle
            INNER JOIN tripdetails td on td.vehicleid = vehicle.vehicleid
            INNER JOIN orderDetails od ON od.tripId = td.tripId AND od.orderid = (
                select o.orderid from orderDetails o where o.tripid = td.tripid AND o.customerno = td.customerno AND o.isdeleted = 0 Order by o.created_on ASC limit 1
            )
            INNER JOIN checkpoint c on c.checkpointid = vehicle.checkpointId
            WHERE (vehicle.customerno = customerNoParam OR customerNoParam IS NULL)
            AND vehicle.checkpointId <> 0 AND chkpoint_status = 1 AND vehicle.isdeleted = 0
            AND (vehicle.checkpoint_timestamp > od.created_on )
            AND od.customerno= customerNoParam
            AND TIMESTAMPDIFF(MINUTE, od.created_on, vehicle.checkpoint_timestamp) > 90
            AND td.isdeleted = 0
            AND od.isdeleted = 0
            AND td.is_tripend = 0
            order by td.tripid ASC;
        ELSEIF(reportTypeParam = 'emptyReturnDeviation')THEN
            SELECT
            DISTINCT(td.tripId), td.triplogno, vehicle.vehicleno
            FROM vehicle
            INNER JOIN tripdetails td on td.vehicleid = vehicle.vehicleid
            INNER JOIN tripdroppoints tdp ON tdp.tripid = td.tripid AND tdp.created_on = (
                SELECT max(lastTripDropPoint.created_on) FROM tripdroppoints lastTripDropPoint WHERE lastTripDropPoint.vehicleId = vehicle.vehicleId
            )
            INNER JOIN tripYardLog tyl ON tyl.tripid = td.tripid AND tyl.vehicleid = vehicle.vehicleid
            WHERE (vehicle.customerno = customerNoParam OR customerNoParam IS NULL)
            AND vehicle.checkpointId <> 0 AND chkpoint_status = 1 AND vehicle.isdeleted = 0
            AND (td.statusdate > vehicle.checkpoint_timestamp)
            AND (td.customerno = customerNoParam OR customerNoParam IS NULL)
            AND TIMESTAMPDIFF(MINUTE, vehicle.checkpoint_timestamp, td.statusdate) > 60
            AND td.tripstatusid = 10
            AND tyl.isProcessed = 0
            AND td.isdeleted = 0
            AND td.is_tripend = 0
            Group by td.tripid
            order by td.tripid ASC;
        END IF;

    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_trip_droppoints` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_trip_droppoints`(
    IN tripIdParam INT,
    IN customerNoParam INT
)
BEGIN

    IF(tripIdParam = 0) THEN
        SET tripIdParam = NULL;
    END IF;

    IF(customerNoParam = 0) THEN
        SET customerNoParam = NULL;
    END IF;


    SELECT
            dp.tripid,
            dp.vehicleid,
            dp.lat,
            dp.lng,
            dp.customerno,
            dp.created_on
    FROM    tripdroppoints dp
    WHERE   (dp.tripId = tripIdParam OR tripIdParam IS NULL)
    AND     (dp.customerno = customerNoParam OR customerNoParam IS NULL)
    AND     dp.isdeleted = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_unit_location` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_unit_location`()
BEGIN
 
    select 	* from unit_location;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_users_forparentrole` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_users_forparentrole`( 
    IN roleidparam INT
    , IN moduleidparam INT
    , IN custno INT
    , IN isHigherUser tinyint 
)
BEGIN
	DECLARE parentroleidparam VARCHAR(30);

	SELECT GROUP_CONCAT(T2.id SEPARATOR ',') INTO parentroleidparam
	FROM 	(
				SELECT
					@r AS _id,
					(SELECT @r := parentroleid FROM role WHERE id = _id) AS parent_id,
					@l := @l + 1 AS lvl
				FROM
					(SELECT @r := roleidparam, @l := 0) vars INNER JOIN role WHERE @r <> 0
			) T1
	INNER JOIN role T2	ON T1._id = T2.id
	WHERE 	T2.customerno = custno
	AND  	T2.moduleid = moduleidparam
	AND  	T2.isdeleted = 0 
	AND		CASE  
				WHEN isHigherUser = 1 THEN T1.lvl > 2
				ELSE T1.lvl = 2
			END
	ORDER BY T1.lvl DESC; 
    
    
    IF(parentroleidparam != 0) THEN
		BEGIN
			SELECT 	  userid
					, username
					, realname
					, email
			FROM 	user 
			WHERE 	FIND_IN_SET(roleid,parentroleidparam)
			AND 	TRIM(LOWER(realname)) != 'elixir'
			AND customerno = custno
			AND isdeleted =0;
		END;
    END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_users_groups` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_users_groups`( 
    IN roleidparam INT
    , IN moduleidparam INT
    , IN custno INT
)
BEGIN
    DECLARE hierarchy_id INT DEFAULT 0;
    SELECT 
        heirarchy_id 
    INTO 
        hierarchy_id 
    FROM user
    WHERE userid = roleidparam
    AND   customerno = custno
    AND   isdeleted = 0;
    IF (hierarchy_id != 0) THEN
        SELECT 
              gm.groupid
            , gm.userid
            , gm.customerno
            , g.groupname
        FROM groupman as gm
        INNER JOIN `group` as g on g.groupid = gm.groupid
        WHERE gm.userid = roleidparam
        AND gm.customerno = custno
        AND gm.isdeleted =0 
        ORDER BY groupname ASC;
    ELSE 
        SELECT 
              groupid
            , groupname
        FROM  `group`
        WHERE customerno = custno
        AND isdeleted = 0
        ORDER BY groupname ASC;
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_vehicles_drivers_users` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_vehicles_drivers_users`(
	IN custnoparam INT
)
BEGIN
	SELECT 		vehicleid
				, vehicleno
    FROM 		vehicle
	INNER JOIN	customer ON customer.customerno = vehicle.customerno
    WHERE		vehicle.customerno = custnoparam
    AND 		vehicle.isdeleted = 0;
    
    SELECT 		driverid
				, drivername
    FROM 		driver
	INNER JOIN 	customer ON customer.customerno = driver.customerno
    WHERE		driver.customerno = custnoparam
    AND 		driver.isdeleted = 0
    AND                 driver.drivername <> 'Not Allocated';
    
    SELECT 		userid
				, realname
    FROM 		user
    INNER JOIN 	customer ON customer.customerno = user.customerno
    WHERE		user.customerno = custnoparam
    AND 		LTRIM(RTRIM(user.role)) = 'Viewer'
    AND 		user.isdeleted = 0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_vehicletypes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_vehicletypes`(
	IN custno INT
	,IN vehtypeid INT
	)
BEGIN
	IF(custno = '' OR custno = 0) THEN
		SET custno = NULL;
	END IF;
        IF(vehtypeid = '' OR vehtypeid = 0) THEN
		SET vehtypeid = NULL;
	END IF;
	SELECT 	vehicletypeid
			, vehiclecode
            , vehicledescription
	    , v.skutypeid
	    , st.type
            , volume
			, weight
			, v.customerno
			, v.created_on
			, v.updated_on
   FROM vehicletype as v
   INNER JOIN skutypes as st ON st.tid = v.skutypeid
   WHERE (v.customerno = custno OR custno IS NULL)
   AND (v.vehicletypeid = vehtypeid OR vehtypeid IS NULL)
   AND	v.isdeleted = 0 order by ispreferred DESC;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_vehiclewarehouse_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_vehiclewarehouse_details`(
	 IN pageIndex INT
	 , IN pageSize INT
	 , IN custnoparam INT
	 , IN isWareHouse TINYINT
	 , IN searchstring VARCHAR(40)
	 , IN groupidparam VARCHAR(250)
	 , IN userkeyparam BIGINT
	 , IN isRequiredThirdPartyParam INT
)
BEGIN
    DECLARE recordCount INT;
    DECLARE fromRowNum INT DEFAULT 1;
    DECLARE toRowNum INT DEFAULT 1;
    DECLARE roleIdparam INT;
    DECLARE useridparam INT;
        SET searchstring = LTRIM(RTRIM(searchstring));
        IF searchstring = '' THEN
        SET searchstring = NULL;
    END IF;
        IF groupidparam = '0' ||  groupidparam = '' THEN
        SET groupidparam = NULL;
        END IF;
    IF userkeyparam = '0' ||  userkeyparam = '' THEN
        SET userkeyparam = NULL;
        END IF;
    IF isRequiredThirdPartyParam = '0' THEN
        SET isRequiredThirdPartyParam = NULL;
        END IF;

    IF consigneeidParam = 0 THEN
        SET consigneeidParam = NULL;
        END IF;

    IF (userkeyparam IS NOT NULL) then
        SELECT roleid,userid INTO roleIdparam ,useridparam
        FROM user where user.userkey = userkeyparam
        AND customerno = custnoparam;
    END IF;

    IF(consigneeidParam IS NOT NULL) THEN
    /* consignee query starts here */
       SET recordCount =  (SELECT    COUNT(vehicle.vehicleid)
                        FROM    vehicle
                        INNER JOIN tripdetails ON tripdetails.vehicleid = vehicle.vehicleid /*AND tripdetails.is_tripend = 0 AND tripdetails.tripstatusid NOT IN(9,10) AND tripdetails.consigneeid= consigneeidParam AND tripdetails.isdeleted=0 AND tripdetails.tripstatusid=4*/
                        INNER JOIN  devices ON devices.uid = vehicle.uid
                        INNER JOIN  driver ON driver.driverid = vehicle.driverid
                        INNER JOIN  unit ON devices.uid = unit.uid
                        INNER JOIN  customer ON customer.customerno = vehicle.customerno
                        INNER JOIN  ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid
                        LEFT OUTER JOIN   simcard on simcard.id = devices.simcardid
                        /*INNER JOIN vehicleusermapping as vehmap ON vehmap.vehicleid = vehicle.vehicleid and vehmap.userid = useridparam */
                        WHERE     vehicle.customerno = custnoparam
                        AND     unit.trans_statusid NOT IN (10,22)
                        AND     vehicle.isdeleted = 0
                        AND     driver.isdeleted = 0
                        AND     devices.lastupdated <> '0000-00-00 00:00:00'
                           AND tripdetails.tripstatusid=4 
                           AND tripdetails.is_tripend = 0 
                           AND tripdetails.tripstatusid NOT IN(9,10) 
                           AND tripdetails.`consigneeid`= consigneeidParam  
                           AND tripdetails.isdeleted=0 
                        AND     (
                                    CASE
                                        WHEN isWareHouse = 1 THEN vehicle.kind ='Warehouse'
                                        ELSE vehicle.kind !='Warehouse'
                                    END
                                )
                        AND     (vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
                        /*AND     (FIND_IN_SET(vehmap.groupid, groupidparam) OR groupidparam IS NULL)*/
                        AND     (unit.isRequiredThirdParty = isRequiredThirdPartyParam OR isRequiredThirdPartyParam IS NULL)
                        /*AND     vehmap.isdeleted = 0*/
                          /* GROUP BY vehicle.vehicleid */
                         );


    IF (pageSize = -1) THEN
        SET pageSize = recordCount;
        END IF;

    SET fromRowNum = (pageIndex - 1) * pageSize + 1;
    SET toRowNum = (fromRowNum + pageSize) - 1;
    SET @rownum = 0;

    SELECT  *,recordCount
    FROM  (SELECT  @rownum:=@rownum + 1 AS rownum, vehDetails.*
             FROM (SELECT   vehicle.kind
                                , vehicle.groupid
                                , vehicle.groupid as veh_grpid
                                , vehicle.vehicleid
                                , vehicle.overspeed_limit
                                , vehicle.extbatt
                                , vehicle.vehicleno
                                , vehicle.curspeed
                                , vehicle.odometer
                                , vehicle.temp1_min
                                , vehicle.temp1_max
                                , vehicle.temp2_min
                                , vehicle.temp2_max
                                , vehicle.temp3_min
                                , vehicle.temp3_max
                                , vehicle.temp4_min
                                , vehicle.temp4_max
                                , vehicle.sequenceno
                                , vehicle.stoppage_flag
                                , vehicle.fueltype
                                , vehicle.fuel_balance
                                , vehicle.fuelcapacity
                                , vehicle.fuel_min_volt
                                , vehicle.fuel_max_volt
                                , devices.lastupdated
                                , devices.ignition
                                , devices.inbatt
                                , devices.tamper
                                , devices.powercut
                                , devices.gsmstrength
                                , devices.devicelat
                                , devices.devicelong
                                , devices.directionchange
                                , driver.drivername
                                , driver.driverphone
                                , unit.tempsen1
                                , unit.tempsen2
                                , unit.tempsen3
                                , unit.tempsen4
                                , unit.analog1
                                , unit.analog2
                                , unit.analog3
                                , unit.analog4
                                , unit.unitno
                                , unit.digitalio
                                , unit.acsensor
                                , unit.is_ac_opp
                                , unit.is_freeze
                                , unit.is_mobiliser
                                , unit.is_buzzer
                                , unit.mobiliser_flag
                                , unit.get_conversion
                                , unit.n1
                                , unit.n2
                                , unit.n3
                                , unit.n4
                                , unit.fuelsensor
                                , unit.humidity
                                , customer.temp_sensors
                                , customer.use_humidity
                                , customer.use_geolocation
                                , customer.customercompany
                                , customer.use_immobiliser
                                , customer.use_freeze
                                , customer.use_buzzer
                                , vehicle.customerno as customer_no
                                ,vehicle.routeDirection
                                , simcardid
                                , simcardno
                                , (SELECT customname
                                    FROM customfield
                                    WHERE customerno=vehicle.customerno
                                    AND LTRIM(RTRIM(name)) = 'Digital'
                                    AND usecustom = 1) AS digital
                                , ignitionalert.status AS igstatus
                                , ignitionalert.ignchgtime
                                , vehicle.stoppage_transit_time
                    FROM    vehicle
                    INNER JOIN tripdetails ON tripdetails.vehicleid = vehicle.vehicleid /*AND tripdetails.is_tripend = 0 AND tripdetails.tripstatusid NOT IN(9,10) AND tripdetails.consigneeid= consigneeidParam AND tripdetails.isdeleted=0 AND tripdetails.tripstatusid=4*/
                    INNER JOIN  devices ON devices.uid = vehicle.uid
                    INNER JOIN  driver ON driver.driverid = vehicle.driverid
                    INNER JOIN  unit ON devices.uid = unit.uid
                    INNER JOIN  customer ON customer.customerno = vehicle.customerno
                    INNER JOIN  ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid
                    LEFT OUTER JOIN   simcard on simcard.id = devices.simcardid
                    /*INNER JOIN vehicleusermapping as vehmap ON vehmap.vehicleid = vehicle.vehicleid and vehmap.userid = useridparam*/
                    WHERE     vehicle.customerno = custnoparam
                    AND     unit.trans_statusid NOT IN (10,22)
                    AND     vehicle.isdeleted = 0
                    AND     driver.isdeleted = 0
                    AND     devices.lastupdated <> '0000-00-00 00:00:00'
                   AND tripdetails.tripstatusid=4 
                   AND tripdetails.is_tripend = 0 
                           AND tripdetails.tripstatusid NOT IN(9,10) 
                           AND tripdetails.`consigneeid`= consigneeidParam 
                           AND tripdetails.isdeleted=0 
                    AND     (
                                    CASE
                                        WHEN isWareHouse = 1 THEN vehicle.kind = 'Warehouse'
                                        ELSE vehicle.kind != 'Warehouse'
                                    END
                                )
                    AND     (vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
                    /*AND     (FIND_IN_SET(vehmap.groupid, groupidparam) OR groupidparam IS NULL) */
                    AND     (unit.isRequiredThirdParty = isRequiredThirdPartyParam OR isRequiredThirdPartyParam IS NULL)
                    /*AND     vehmap.isdeleted = 0 */
                   GROUP BY vehicle.vehicleid
                    ORDER BY  CASE WHEN vehicle.sequenceno = 0 THEN 1 ELSE 0 END,
                                vehicle.sequenceno ASC,
                                vehicle.vehicleno ASC
                    ) vehDetails
            ) vehDetails

    WHERE   rownum BETWEEN fromRowNum AND toRowNum
        ORDER BY  rownum; 
    /* consignee query ends here */
       /*select userid from `user` limit 1; */
    ELSE
        IF  EXISTS (SELECT vu.userid FROM vehicleusermapping as vu WHERE vu.userid= useridparam AND vu.customerno=custnoparam AND vu.isdeleted=0) OR (roleIdparam = 43)THEN
        
        SET recordCount =  (SELECT    COUNT(vehicle.vehicleid)
                        FROM    vehicle
                        INNER JOIN  devices ON devices.uid = vehicle.uid
                        INNER JOIN  driver ON driver.driverid = vehicle.driverid
                        INNER JOIN  unit ON devices.uid = unit.uid
                        INNER JOIN  customer ON customer.customerno = vehicle.customerno
                        INNER JOIN  ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid
                        LEFT OUTER JOIN   simcard on simcard.id = devices.simcardid
                        INNER JOIN vehicleusermapping as vehmap ON vehmap.vehicleid = vehicle.vehicleid and vehmap.userid = useridparam
                        WHERE     vehicle.customerno = custnoparam
                        AND     unit.trans_statusid NOT IN (10,22)
                        AND     vehicle.isdeleted = 0
                        AND     driver.isdeleted = 0
                        AND     devices.lastupdated <> '0000-00-00 00:00:00'
                        AND     (
                                    CASE
                                        WHEN isWareHouse = 1 THEN vehicle.kind ='Warehouse'
                                        ELSE vehicle.kind !='Warehouse'
                                    END
                                )
                        AND     (vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
                        AND     (FIND_IN_SET(vehmap.groupid, groupidparam) OR groupidparam IS NULL)
                        AND     (unit.isRequiredThirdParty = isRequiredThirdPartyParam OR isRequiredThirdPartyParam IS NULL)
                        AND     vehmap.isdeleted = 0
                         );


    IF (pageSize = -1) THEN
        SET pageSize = recordCount;
        END IF;

    SET fromRowNum = (pageIndex - 1) * pageSize + 1;
    SET toRowNum = (fromRowNum + pageSize) - 1;
    SET @rownum = 0;

    SELECT  *, recordCount
    FROM  (SELECT  @rownum:=@rownum + 1 AS rownum, vehDetails.*
             FROM (SELECT   vehicle.kind
                                , vehicle.groupid
                                , vehicle.groupid as veh_grpid
                                , vehicle.vehicleid
                                , vehicle.overspeed_limit
                                , vehicle.extbatt
                                , vehicle.vehicleno
                                , vehicle.curspeed
                                , vehicle.odometer
                                , vehicle.temp1_min
                                , vehicle.temp1_max
                                , vehicle.temp2_min
                                , vehicle.temp2_max
                                , vehicle.temp3_min
                                , vehicle.temp3_max
                                , vehicle.temp4_min
                                , vehicle.temp4_max
                                , vehicle.sequenceno
                                , vehicle.stoppage_flag
                                , vehicle.fueltype
                                , vehicle.fuel_balance
                                , vehicle.fuelcapacity
                                , vehicle.fuel_min_volt
                                , vehicle.fuel_max_volt
                                , devices.lastupdated
                                , devices.ignition
                                , devices.inbatt
                                , devices.tamper
                                , devices.powercut
                                , devices.gsmstrength
                                , devices.devicelat
                                , devices.devicelong
                                , devices.directionchange
                                , driver.drivername
                                , driver.driverphone
                                , unit.tempsen1
                                , unit.tempsen2
                                , unit.tempsen3
                                , unit.tempsen4
                                , unit.analog1
                                , unit.analog2
                                , unit.analog3
                                , unit.analog4
                                , unit.unitno
                                , unit.digitalio
                                , unit.acsensor
                                , unit.is_ac_opp
                                , unit.is_freeze
                                , unit.is_mobiliser
                                , unit.is_buzzer
                                , unit.mobiliser_flag
                                , unit.get_conversion
                                , unit.n1
                                , unit.n2
                                , unit.n3
                                , unit.n4
                                , unit.fuelsensor
                                , unit.humidity
                                , customer.temp_sensors
                                , customer.use_humidity
                                , customer.use_geolocation
                                , customer.customercompany
                                , customer.use_immobiliser
                                , customer.use_freeze
                                , customer.use_buzzer
                                , vehicle.routeDirection
                                , vehicle.customerno as customer_no
                                , simcardid
                                , simcardno
                                , (SELECT customname
                                    FROM customfield
                                    WHERE customerno=vehicle.customerno
                                    AND LTRIM(RTRIM(name)) = 'Digital'
                                    AND usecustom = 1) AS digital
                                , ignitionalert.status AS igstatus
                                , ignitionalert.ignchgtime
                                , vehicle.stoppage_transit_time
                    FROM    vehicle
                    INNER JOIN  devices ON devices.uid = vehicle.uid
                    INNER JOIN  driver ON driver.driverid = vehicle.driverid
                    INNER JOIN  unit ON devices.uid = unit.uid
                    INNER JOIN  customer ON customer.customerno = vehicle.customerno
                    INNER JOIN  ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid
                    LEFT OUTER JOIN   simcard on simcard.id = devices.simcardid
                    INNER JOIN vehicleusermapping as vehmap ON vehmap.vehicleid = vehicle.vehicleid and vehmap.userid = useridparam
                    WHERE     vehicle.customerno = custnoparam
                    AND     unit.trans_statusid NOT IN (10,22)
                    AND     vehicle.isdeleted = 0
                    AND     driver.isdeleted = 0
                    AND     devices.lastupdated <> '0000-00-00 00:00:00'
                    AND     (
                                    CASE
                                        WHEN isWareHouse = 1 THEN vehicle.kind = 'Warehouse'
                                        ELSE vehicle.kind != 'Warehouse'
                                    END
                                )
                    AND     (vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
                    AND     (FIND_IN_SET(vehmap.groupid, groupidparam) OR groupidparam IS NULL)
                    AND     (unit.isRequiredThirdParty = isRequiredThirdPartyParam OR isRequiredThirdPartyParam IS NULL)
                    AND     vehmap.isdeleted = 0
                    ORDER BY  CASE WHEN vehicle.sequenceno = 0 THEN 1 ELSE 0 END,
                                vehicle.sequenceno ASC,
                                vehicle.vehicleno ASC
                    ) vehDetails
            ) vehDetails

    WHERE   rownum BETWEEN fromRowNum AND toRowNum
        ORDER BY  rownum;

    ELSE

    SET recordCount =  (SELECT    COUNT(vehicle.vehicleid)
                        FROM    vehicle
                        INNER JOIN  devices ON devices.uid = vehicle.uid
                        INNER JOIN  driver ON driver.driverid = vehicle.driverid
                        INNER JOIN  unit ON devices.uid = unit.uid
                        INNER JOIN  customer ON customer.customerno = vehicle.customerno
                        INNER JOIN  ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid
                        LEFT OUTER JOIN   simcard on simcard.id = devices.simcardid
                        WHERE     vehicle.customerno = custnoparam
                        AND     unit.trans_statusid NOT IN (10,22)
                        AND             vehicle.isdeleted = 0
                        AND     driver.isdeleted = 0
                        AND     devices.lastupdated <> '0000-00-00 00:00:00'
                        AND     (
                                CASE
                                    WHEN isWareHouse = 1 THEN vehicle.kind ='Warehouse'
                                    ELSE vehicle.kind !='Warehouse'
                                END
                                )
                        AND     (vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
                        AND     (FIND_IN_SET(vehicle.groupid, groupidparam) OR groupidparam IS NULL)
                        AND     (unit.isRequiredThirdParty = isRequiredThirdPartyParam OR isRequiredThirdPartyParam IS NULL)
                         );


    IF (pageSize = -1) THEN
        SET pageSize = recordCount;
        END IF;

    SET fromRowNum = (pageIndex - 1) * pageSize + 1;
    SET toRowNum = (fromRowNum + pageSize) - 1;
    SET @rownum = 0;

    SELECT  *, recordCount
    FROM  (SELECT  @rownum:=@rownum + 1 AS rownum, vehDetails.*
             FROM (SELECT   vehicle.kind
                                , vehicle.groupid
                                , vehicle.groupid as veh_grpid
                                , vehicle.vehicleid
                                , vehicle.overspeed_limit
                                , vehicle.extbatt
                                , vehicle.vehicleno
                                , vehicle.curspeed
                                , vehicle.odometer
                                , vehicle.temp1_min
                                , vehicle.temp1_max
                                , vehicle.temp2_min
                                , vehicle.temp2_max
                                , vehicle.temp3_min
                                , vehicle.temp3_max
                                , vehicle.temp4_min
                                , vehicle.temp4_max
                                , vehicle.sequenceno
                                , vehicle.stoppage_flag
                                , vehicle.fueltype
                                , vehicle.fuel_balance
                                , vehicle.fuelcapacity
                                , vehicle.fuel_min_volt
                                , vehicle.fuel_max_volt
                                , devices.lastupdated
                                , devices.ignition
                                , devices.inbatt
                                , devices.tamper
                                , devices.powercut
                                , devices.gsmstrength
                                , devices.devicelat
                                , devices.devicelong
                                , devices.directionchange
                                , driver.drivername
                                , driver.driverphone
                                , unit.tempsen1
                                , unit.tempsen2
                                , unit.tempsen3
                                , unit.tempsen4
                                , unit.analog1
                                , unit.analog2
                                , unit.analog3
                                , unit.analog4
                                , unit.unitno
                                , unit.digitalio
                                , unit.acsensor
                                , unit.is_ac_opp
                                , unit.is_freeze
                                , unit.is_mobiliser
                                , unit.is_buzzer
                                , unit.mobiliser_flag
                                , unit.get_conversion
                                , unit.n1
                                , unit.n2
                                , unit.n3
                                , unit.n4
                                , unit.fuelsensor
                                , unit.humidity
                                , customer.temp_sensors
                                , customer.use_humidity
                                , customer.use_geolocation
                                , customer.customercompany
                                , customer.use_immobiliser
                                , customer.use_freeze
                                , customer.use_buzzer
                                , vehicle.customerno as customer_no
                                , vehicle.routeDirection
                                , simcardid
                                , simcardno
                                , (SELECT customname
                                    FROM customfield
                                    WHERE customerno=vehicle.customerno
                                    AND LTRIM(RTRIM(name)) = 'Digital'
                                    AND usecustom = 1) AS digital
                                , ignitionalert.status AS igstatus
                                , ignitionalert.ignchgtime
                                , vehicle.stoppage_transit_time
                    FROM    vehicle
                    INNER JOIN  devices ON devices.uid = vehicle.uid
                    INNER JOIN  driver ON driver.driverid = vehicle.driverid
                    INNER JOIN  unit ON devices.uid = unit.uid
                    INNER JOIN  customer ON customer.customerno = vehicle.customerno
                    INNER JOIN  ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid
                    LEFT OUTER JOIN   simcard on simcard.id = devices.simcardid
                    WHERE     vehicle.customerno = custnoparam
                    AND     unit.trans_statusid NOT IN (10,22)
                    AND     vehicle.isdeleted = 0
                    AND     driver.isdeleted = 0
                    AND     devices.lastupdated <> '0000-00-00 00:00:00'
                    AND     (
                                    CASE
                                        WHEN isWareHouse = 1 THEN vehicle.kind = 'Warehouse'
                                        ELSE vehicle.kind != 'Warehouse'
                                    END
                                )
                    AND     (vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
                    AND     (FIND_IN_SET(vehicle.groupid, groupidparam) OR groupidparam IS NULL)
                    AND     (unit.isRequiredThirdParty = isRequiredThirdPartyParam OR isRequiredThirdPartyParam IS NULL)
                    ORDER BY  CASE WHEN vehicle.sequenceno = 0 THEN 1 ELSE 0 END,
                                vehicle.sequenceno ASC,
                                vehicle.vehicleno ASC
                    ) vehDetails
            ) vehDetails
        WHERE   rownum BETWEEN fromRowNum AND toRowNum
        ORDER BY  rownum;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_vehiclewarehouse_details_viewer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_vehiclewarehouse_details_viewer`(
   IN pageIndex INT
   , IN pageSize INT   
   , IN custnoparam INT
   , IN userkeyparam INT
   , IN isWareHouse TINYINT
   , IN searchstring VARCHAR(40)
   , IN groupidparam VARCHAR(250)
)
BEGIN
    DECLARE recordCount INT;
	DECLARE fromRowNum INT DEFAULT 1;
	DECLARE toRowNum INT DEFAULT 1;
    SET searchstring = LTRIM(RTRIM(searchstring));
    IF searchstring = '' THEN
		SET searchstring = NULL;
	END IF;
    IF groupidparam = 0 THEN
		SET groupidparam = NULL;
    END IF;
    SET recordCount =  (SELECT 		COUNT(vehicle.vehicleid) 
						FROM 		vehicle 
						INNER JOIN 	devices ON devices.uid = vehicle.uid 
						INNER JOIN 	driver ON driver.driverid = vehicle.driverid 
						INNER JOIN 	unit ON devices.uid = unit.uid 
						INNER JOIN 	customer ON customer.customerno = vehicle.customerno 
						INNER JOIN 	ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid 
						INNER JOIN 	user ON vehicle.customerno = user.customerno     
						INNER JOIN 	simcard on simcard.id = devices.simcardid
						WHERE 		vehicle.customerno = custnoparam 
						AND 		user.userkey = userkeyparam 
						AND 		unit.trans_statusid NOT IN (10,22) 
						AND			vehicle.isdeleted = 0 
						AND 		driver.isdeleted = 0 
						AND 		devices.lastupdated <> '0000-00-00 00:00:00' 
                        AND 		(
										CASE 
											WHEN isWareHouse = 1 THEN vehicle.kind ='Warehouse'
											ELSE vehicle.kind !='Warehouse' 
										END
									)
						AND 		(vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
                        AND			(FIND_IN_SET(vehicle.groupid, groupidparam) OR groupidparam IS NULL)
						ORDER BY	devices.lastupdated DESC);
                        
	/* If pageSize is -1, it means we need to give all the records in a single page */
	IF (pageSize = -1) THEN
		SET pageSize = recordCount;
    END IF;
    
	SET fromRowNum = (pageIndex - 1) * pageSize + 1;
	SET toRowNum = (fromRowNum + pageSize) - 1;
	SET @rownum=0;

	SELECT	*, recordCount
	FROM 	(SELECT  @rownum:=@rownum + 1 AS rownum, vehDetails.*
			 FROM	(SELECT 	vehicle.kind
								, vehicle.groupid
								, vehicle.groupid as veh_grpid
								, vehicle.vehicleid
								, vehicle.overspeed_limit
								, vehicle.extbatt
								, vehicle.vehicleno
								, vehicle.curspeed
								, vehicle.temp1_min
								, vehicle.temp1_max
								, vehicle.temp2_min
								, vehicle.temp2_max
								, vehicle.temp3_min
								, vehicle.temp3_max
								, vehicle.temp4_min
								, vehicle.temp4_max
								, vehicle.sequenceno
								, vehicle.stoppage_flag
								, devices.lastupdated
								, devices.ignition
								, devices.inbatt
								, devices.tamper
								, devices.powercut
								, devices.gsmstrength
								, devices.devicelat
								, devices.devicelong
								, driver.drivername
								, driver.driverphone
								, unit.tempsen1
								, unit.tempsen2
								, unit.tempsen3
								, unit.tempsen4
								, unit.analog1
								, unit.analog2
								, unit.analog3
								, unit.analog4
								, unit.unitno
								, unit.digitalio
								, unit.acsensor
								, unit.is_ac_opp
                                , unit.is_freeze
								, customer.temp_sensors
								, customer.use_humidity
								, customer.use_geolocation
								, user.customerno as customer_no
								, simcardid
								, simcardno
								, (SELECT customname 
									FROM customfield 
									WHERE customerno=user.customerno 
									AND LTRIM(RTRIM(name)) = 'Digital'
									AND usecustom = 1) AS digital
								, ignitionalert.status AS igstatus
								, ignitionalert.ignchgtime
					FROM 		vehicle 
					INNER JOIN 	devices ON devices.uid = vehicle.uid 
					INNER JOIN 	driver ON driver.driverid = vehicle.driverid 
					INNER JOIN 	unit ON devices.uid = unit.uid 
					INNER JOIN 	customer ON customer.customerno = vehicle.customerno 
					INNER JOIN 	ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid 
					INNER JOIN 	user ON vehicle.customerno = user.customerno     
					INNER JOIN 	simcard on simcard.id = devices.simcardid
					WHERE 		vehicle.customerno = custnoparam 
					AND 		user.userkey = userkeyparam 
					AND 		unit.trans_statusid NOT IN (10,22) 
					AND			vehicle.isdeleted = 0 
					AND 		driver.isdeleted = 0 
					AND 		devices.lastupdated <> '0000-00-00 00:00:00'
					AND 		(
									CASE 
										WHEN isWareHouse = 1 THEN vehicle.kind ='Warehouse'
										ELSE vehicle.kind !='Warehouse' 
									END
								)
					AND 		(vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
					AND			(FIND_IN_SET(vehicle.groupid, groupidparam) OR groupidparam IS NULL)
					ORDER BY	CASE WHEN vehicle.sequenceno = 0 THEN 1 ELSE 0 END,
								vehicle.sequenceno ASC, 
								devices.lastupdated DESC
					) vehDetails
			) vehDetails
            
	WHERE		rownum BETWEEN fromRowNum AND toRowNum
    ORDER BY 	rownum;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_vehiclewarehouse_details_vts` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_vehiclewarehouse_details_vts`( 
   IN pageIndex INT
   , IN pageSize INT   
   , IN custnoparam INT
   , IN isWareHouse TINYINT
   , IN searchstring VARCHAR(40)
   , IN groupidparam VARCHAR(250)
   , IN userkeyparam VARCHAR(50)
   , IN isRequiredThirdPartyParam INT  
)
BEGIN
	DECLARE recordCount INT;
	DECLARE fromRowNum INT DEFAULT 1;
	DECLARE toRowNum INT DEFAULT 1;
	DECLARE roleIdparam INT;
	DECLARE useridparam INT;
	SET searchstring = LTRIM(RTRIM(searchstring));
	IF searchstring = '' THEN
		SET searchstring = NULL;
	END IF;
	IF groupidparam = '0' ||  groupidparam = '' THEN
		SET groupidparam = NULL;
	END IF;
	IF userkeyparam = '0' ||  userkeyparam = '' THEN
		SET userkeyparam = NULL;
	END IF;
	IF isRequiredThirdPartyParam = '0' THEN
		SET isRequiredThirdPartyParam = NULL;
	END IF;

	IF (userkeyparam IS NOT NULL) then
		SELECT roleid,userid INTO roleIdparam ,useridparam
		FROM user 
		where CAST(SHA1(user.userkey) AS BINARY) = CAST(userkeyparam AS BINARY)
		AND customerno = custnoparam;
	END IF;	
	IF NOT EXISTS (SELECT vu.userid FROM vehicleusermapping as vu WHERE vu.userid= useridparam AND vu.customerno=custnoparam AND vu.isdeleted=0) THEN
    
		SET recordCount =  (SELECT 		COUNT(vehicle.vehicleid) 
						FROM 		vehicle 
						INNER JOIN 	devices ON devices.uid = vehicle.uid 
						INNER JOIN 	driver ON driver.driverid = vehicle.driverid 
						INNER JOIN 	unit ON devices.uid = unit.uid 
						INNER JOIN 	customer ON customer.customerno = vehicle.customerno 
						INNER JOIN 	ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid 
						INNER JOIN 	simcard on simcard.id = devices.simcardid						
						WHERE 		vehicle.customerno = custnoparam						
						AND 		unit.trans_statusid NOT IN (10,22) 
						AND             vehicle.isdeleted = 0 
						AND 		driver.isdeleted = 0 
						AND 		devices.lastupdated <> '0000-00-00 00:00:00' 
						AND 		(
										CASE 
											WHEN (isWareHouse = 2) THEN 1
											WHEN isWareHouse = 1 THEN vehicle.kind ='Warehouse'
											ELSE vehicle.kind !='Warehouse' 
                                            
										END
									)
						AND 		(vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
						AND			(FIND_IN_SET(vehicle.groupid, groupidparam) OR groupidparam IS NULL)
						AND			(unit.isRequiredThirdParty = isRequiredThirdPartyParam OR isRequiredThirdPartyParam IS NULL)
					   );
						
	
	IF (pageSize = -1) THEN
		SET pageSize = recordCount;
	END IF;
	
	SET fromRowNum = (pageIndex - 1) * pageSize + 1;
	SET toRowNum = (fromRowNum + pageSize) - 1;
	SET @rownum = 0;

	SELECT	*, recordCount
	FROM 	(SELECT  @rownum:=@rownum + 1 AS rownum, vehDetails.*
			 FROM	(SELECT 	vehicle.kind
								, vehicle.groupid
								, vehicle.groupid as veh_grpid
								, vehicle.vehicleid
								, vehicle.overspeed_limit
								, vehicle.extbatt
								, vehicle.vehicleno
								, vehicle.curspeed
								, vehicle.odometer
								, vehicle.temp1_min
								, vehicle.temp1_max
								, vehicle.temp2_min
								, vehicle.temp2_max
								, vehicle.temp3_min
								, vehicle.temp3_max
								, vehicle.temp4_min
								, vehicle.temp4_max
								, vehicle.sequenceno
								, vehicle.stoppage_flag
								, devices.lastupdated
								, devices.ignition
								, devices.inbatt
								, devices.tamper
								, devices.powercut
								, devices.gsmstrength
								, devices.devicelat
								, devices.devicelong
								, devices.directionchange
								, driver.drivername
								, driver.driverphone
								, unit.tempsen1
								, unit.tempsen2
								, unit.tempsen3
								, unit.tempsen4
								, unit.analog1
								, unit.analog2
								, unit.analog3
								, unit.analog4
								, unit.unitno
								, unit.digitalio
								, unit.acsensor
								, unit.is_ac_opp
								, unit.is_freeze
								, unit.get_conversion
								, unit.n1 
								, unit.n2 
								, unit.n3 
								, unit.n4
								, unit.fuelsensor
								, unit.humidity
								, customer.temp_sensors
								, customer.use_humidity
								, customer.use_geolocation
								, customer.customercompany
								, vehicle.customerno as customer_no
								, simcardid
								, simcardno
								, (SELECT customname 
									FROM customfield 
									WHERE customerno=vehicle.customerno 
									AND LTRIM(RTRIM(name)) = 'Digital'
									AND usecustom = 1) AS digital
								, ignitionalert.status AS igstatus
								, ignitionalert.ignchgtime
					FROM 		vehicle 
					INNER JOIN 	devices ON devices.uid = vehicle.uid 
					INNER JOIN 	driver ON driver.driverid = vehicle.driverid 
					INNER JOIN 	unit ON devices.uid = unit.uid 
					INNER JOIN 	customer ON customer.customerno = vehicle.customerno 
					INNER JOIN 	ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid 					     
					INNER JOIN 	simcard on simcard.id = devices.simcardid
					WHERE 		vehicle.customerno = custnoparam					
					AND 		unit.trans_statusid NOT IN (10,22) 
					AND			vehicle.isdeleted = 0 
					AND 		driver.isdeleted = 0 
					AND 		devices.lastupdated <> '0000-00-00 00:00:00'
					AND 		(
									CASE 
											WHEN (isWareHouse = 2) THEN 1
											WHEN isWareHouse = 1 THEN vehicle.kind ='Warehouse'
											ELSE vehicle.kind !='Warehouse'
										END
								)
					AND 		(vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
					AND			(FIND_IN_SET(vehicle.groupid, groupidparam) OR groupidparam IS NULL)
					AND			(unit.isRequiredThirdParty = isRequiredThirdPartyParam OR isRequiredThirdPartyParam IS NULL)
					ORDER BY	CASE WHEN vehicle.sequenceno = 0 THEN 1 ELSE 0 END,
								vehicle.sequenceno ASC, 
								vehicle.vehicleno ASC
					) vehDetails
			) vehDetails
			
	WHERE		rownum BETWEEN fromRowNum AND toRowNum
	ORDER BY 	rownum;


	ELSE 


		SET recordCount =  (SELECT 		COUNT(vehicle.vehicleid) 
						FROM 		vehicle 
						INNER JOIN 	devices ON devices.uid = vehicle.uid 
						INNER JOIN 	driver ON driver.driverid = vehicle.driverid 
						INNER JOIN 	unit ON devices.uid = unit.uid 
						INNER JOIN 	customer ON customer.customerno = vehicle.customerno 
						INNER JOIN 	ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid 
						INNER JOIN 	simcard on simcard.id = devices.simcardid
						INNER JOIN vehicleusermapping as vehmap ON vehmap.vehicleid = vehicle.vehicleid and vehmap.userid = useridparam
						WHERE 		vehicle.customerno = custnoparam						
						AND 		unit.trans_statusid NOT IN (10,22) 
						AND			vehicle.isdeleted = 0 
						AND 		driver.isdeleted = 0 
						AND 		devices.lastupdated <> '0000-00-00 00:00:00' 
						AND 		(
										CASE 
											WHEN (isWareHouse = 2) THEN 1 
											WHEN isWareHouse = 1 THEN vehicle.kind ='Warehouse'
											ELSE vehicle.kind !='Warehouse' 
										END
									)
						AND 		(vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
						AND			(FIND_IN_SET(vehmap.groupid, groupidparam) OR groupidparam IS NULL)
						AND			(unit.isRequiredThirdParty = isRequiredThirdPartyParam OR isRequiredThirdPartyParam IS NULL)
						AND  		vehmap.isdeleted = 0
					   );
						
	
	IF (pageSize = -1) THEN
		SET pageSize = recordCount;
	END IF;
	
	SET fromRowNum = (pageIndex - 1) * pageSize + 1;
	SET toRowNum = (fromRowNum + pageSize) - 1;
	SET @rownum = 0;

	SELECT	*, recordCount
	FROM 	(SELECT  @rownum:=@rownum + 1 AS rownum, vehDetails.*
			 FROM	(SELECT 	vehicle.kind
								, vehicle.groupid
								, vehicle.groupid as veh_grpid
								, vehicle.vehicleid
								, vehicle.overspeed_limit
								, vehicle.extbatt
								, vehicle.vehicleno
								, vehicle.curspeed
								, vehicle.odometer
								, vehicle.temp1_min
								, vehicle.temp1_max
								, vehicle.temp2_min
								, vehicle.temp2_max
								, vehicle.temp3_min
								, vehicle.temp3_max
								, vehicle.temp4_min
								, vehicle.temp4_max
								, vehicle.sequenceno
								, vehicle.stoppage_flag
								, devices.lastupdated
								, devices.ignition
								, devices.inbatt
								, devices.tamper
								, devices.powercut
								, devices.gsmstrength
								, devices.devicelat
								, devices.devicelong
								, devices.directionchange
								, driver.drivername
								, driver.driverphone
								, unit.tempsen1
								, unit.tempsen2
								, unit.tempsen3
								, unit.tempsen4
								, unit.analog1
								, unit.analog2
								, unit.analog3
								, unit.analog4
								, unit.unitno
								, unit.digitalio
								, unit.acsensor
								, unit.is_ac_opp
								, unit.is_freeze
								, unit.get_conversion
								, unit.n1 
								, unit.n2 
								, unit.n3 
								, unit.n4
								, unit.fuelsensor
								, unit.humidity
								, customer.temp_sensors
								, customer.use_humidity
								, customer.use_geolocation
								, customer.customercompany
								, vehicle.customerno as customer_no
								, simcardid
								, simcardno
								, (SELECT customname 
									FROM customfield 
									WHERE customerno=vehicle.customerno 
									AND LTRIM(RTRIM(name)) = 'Digital'
									AND usecustom = 1) AS digital
								, ignitionalert.status AS igstatus
								, ignitionalert.ignchgtime
					FROM 		vehicle 
					INNER JOIN 	devices ON devices.uid = vehicle.uid 
					INNER JOIN 	driver ON driver.driverid = vehicle.driverid 
					INNER JOIN 	unit ON devices.uid = unit.uid 
					INNER JOIN 	customer ON customer.customerno = vehicle.customerno 
					INNER JOIN 	ignitionalert ON ignitionalert.vehicleid = vehicle.vehicleid					     
					INNER JOIN 	simcard on simcard.id = devices.simcardid
					INNER JOIN 	vehicleusermapping as vehmap ON vehmap.vehicleid = vehicle.vehicleid and vehmap.userid = useridparam
					WHERE 		vehicle.customerno = custnoparam					
					AND 		unit.trans_statusid NOT IN (10,22) 
					AND			vehicle.isdeleted = 0 
					AND 		driver.isdeleted = 0 
					AND 		devices.lastupdated <> '0000-00-00 00:00:00'
					AND 		(
									CASE 
											WHEN (isWareHouse = 2) THEN 1 
											WHEN isWareHouse = 1 THEN vehicle.kind ='Warehouse'
											ELSE vehicle.kind !='Warehouse'
									END
								)
					AND 		(vehicle.vehicleno LIKE CONCAT('%', searchstring ,'%') OR searchstring IS NULL)
					AND			(FIND_IN_SET(vehmap.groupid, groupidparam) OR groupidparam IS NULL)
					AND			(unit.isRequiredThirdParty = isRequiredThirdPartyParam OR isRequiredThirdPartyParam IS NULL)
					AND  		vehmap.isdeleted = 0
					ORDER BY	CASE WHEN vehicle.sequenceno = 0 THEN 1 ELSE 0 END,
								vehicle.sequenceno ASC, 
								vehicle.vehicleno ASC
					) vehDetails
			) vehDetails
			
	WHERE		rownum BETWEEN fromRowNum AND toRowNum
	ORDER BY 	rownum;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_vehicle_type` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_vehicle_type`(
	IN vehTypeIdParam INT,
	IN customerNoParam int
)
BEGIN
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
	END;
	
	START TRANSACTION;
		IF (vehTypeIdParam = '' OR vehTypeIdParam = 0) THEN
			SET vehTypeIdParam = NULL;
		END IF;
		IF (customerNoParam = '' OR customerNoParam = 0) THEN
			SET customerNoParam = NULL;
		END IF;	
		
		
			SELECT 
				vehTypeId,
				vehicleCode,
				vehicleType,
				length,
				width,
				volume,
				capacity,
				customerno,
				createdBy,
				createdOn,
				updatedBy,
				updatedOn
			FROM vehicleType
			WHERE (vehTypeId  = vehTypeIdParam OR vehTypeIdParam IS NULL)
			AND (customerNo = customerNoParam OR customerNoParam IS NULL)
			AND isDeleted = 0;
	COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_vehtypetransporter_mapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_vehtypetransporter_mapping`(
	IN custno INT
	,IN transid INT
)
BEGIN
	IF(custno = '' OR custno = 0) THEN
		SET custno = NULL;
	END IF;
	IF(transid = '' OR transid = 0) THEN
		SET transid = NULL;
	END IF;
       
	SELECT 	vtm.vehicletypeid
            ,vtm.vehiclecount
            ,vt.vehiclecode
            ,vt.volume
            ,vt.weight
            ,vtm.transporterid
            FROM vehtypetransmapping vtm
            INNER JOIN vehicletype vt ON vtm.vehicletypeid = vt.vehicletypeid
    	WHERE 	(vtm.customerno = custno OR custno IS NULL)
    	AND (vtm.transporterid = transid OR transid IS NULL) order by vt.weight DESC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_vendors` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_vendors`(
	IN vendorIdParam INT ,
	IN customerNoParam int
)
BEGIN
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
	END;
	
	START TRANSACTION;

		IF(vendorIdParam = 0 OR vendorIdParam = '') THEN
			SET vendorIdParam = NULL;
        END IF;

		IF(customerNoParam = 0 OR customerNoParam = '') THEN
			SET customerNoParam = NULL;
        END IF;	
		
		IF (customerNoParam IS NOT NULL) THEN 
			SELECT
				vendorId,
			    vendorCode,
				vendorName,
				contactPerson,
				email,
				phone,
				v.serviceId,
				sm.serviceName,
				v.serviceCost,
				v.customerno,
				v.createdBy,
				v.createdOn,
				v.updatedBy,
				v.updatedOn
			FROM vendors v
			LEFT JOIN serviceTypeMaster as sm on sm.serviceId = v.serviceId
			WHERE (v.vendorId  = vendorIdParam OR vendorIdParam IS NULL )
			AND (v.customerNo  = customerNoParam OR customerNoParam IS NULL)
			AND v.isDeleted = 0;
		END IF;

	COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_will_expire_devices` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `get_will_expire_devices`(
        IN customernos INT,
        IN today date,
        IN enddate date
)
BEGIN
    IF(customernos = '' OR customernos = '0') THEN
		SET customernos = NULL;
	END IF;
    IF(today = '' OR today = '0') THEN
            SET today = NULL;
    END IF;
    IF(enddate = '' OR enddate = '0') THEN
            SET enddate = NULL;
    END IF;
SELECT vehicle.vehicleno FROM vehicle 
           INNER JOIN devices ON devices.uid = vehicle.uid
           INNER JOIN unit ON devices.uid = unit.uid
           INNER JOIN customer ON customer.customerno = devices.customerno
           WHERE vehicle.isdeleted= 0 AND (devices.expirydate BETWEEN today AND enddate) AND vehicle.customerno=customernos AND devices.expirydate!='0000-00-00' AND unit.trans_statusid IN (5);  
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `gpsprovider_update_device_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `gpsprovider_update_device_details`(
	 IN vehicleNoParam VARCHAR(40)
	, IN devicelatParam DECIMAL(9,6)
	, IN devicelngParam DECIMAL(9,6)
	, IN altitudeParam INT UNSIGNED
	, IN dirChangeParam INT UNSIGNED
	, IN ignitionParam TINYINT(1) UNSIGNED
	, IN odometerParam BIGINT
	, IN curspeedParam TINYINT UNSIGNED
	, IN analog1Param INT
	, IN digitalioParam SMALLINT
    , IN stoppageTransitTimeParam DATETIME
	, IN custnoParam INT
	, IN lastUpdatedParam DATETIME
)
BEGIN
	DECLARE isUpdated TINYINT;
    DECLARE varUid INT;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
		SET isUpdated = 0;
	END;
    
    SET vehicleNoParam = REPLACE(vehicleNoParam, ' ','');
    
    SELECT 	uid INTO varUid
    FROM 	vehicle
    WHERE 	REPLACE(vehicleno, ' ','') = vehicleNoParam
    AND 	customerno = custnoParam 
    AND 	isdeleted = 0
    LIMIT 	1;
    
	START TRANSACTION;
		UPDATE	devices
		SET 	devicelat = devicelatParam
				,devicelong = devicelngParam
				,altitude = altitudeParam
				,directionchange = dirChangeParam
                ,ignition = ignitionParam
				,powercut = 1
				,tamper = 0
				,`online/offline`= 0
				, lastupdated = lastUpdatedParam
		WHERE	uid = varUid;

		UPDATE 	vehicle
		SET 	lastupdated = lastUpdatedParam
				,nodata_alert = 0
				,odometer = odometerParam
				,curspeed = curspeedParam
		WHERE 	uid = varUid;

		UPDATE 	unit
		SET 	analog1 = analog1Param
				,digitalio = digitalioParam
		WHERE 	uid = varUid;

		SET isUpdated = 1;
	COMMIT;
    
    SELECT 		u.uid, u.unitno, v.vehicleid, d.deviceid, dr.driverid, isUpdated
    FROM		unit u
    INNER JOIN	devices d on d.uid = u.uid
    INNER JOIN	vehicle v on v.uid = u.uid
    INNER JOIN	driver dr on dr.vehicleid = v.vehicleid
    WHERE		u.uid = varUid;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertCheckpointException` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insertCheckpointException`(
    In exceptionParam int
	, IN exceptionNameParam varchar(100)
	, IN vehicleParam varchar(100)
	, IN checkpointParam varchar(100)
	, IN startTimeParam varchar(10)
	, IN endTimeParam varchar(10)
	, In custno int
	, IN useridParam int
	, IN todaydate DATETIME
)
BEGIN
	DECLARE exceptionIdParam int;
	DECLARE noOfVehicles INT;
	DECLARE noOfCheckpoints INT;
    DECLARE tempCount INT;
	DECLARE tempCountCheckpoint INT;

	SET  @noOfCommas = 0;
	SET  @noOfCommasCheckpoint = 0;
	SET @vehicleIdParam = 0;
	SET @checkpointIdParam = 0;

    IF(custno = 0) THEN
        SET custno = NULL;
    END IF;

    SELECT max(exceptionId) + 1 into
	exceptionIdParam
	From checkPointException;

	IF(exceptionIdParam IS NULL) THEN
		SET exceptionIdParam = 1;
	END IF;

	IF (exceptionIdParam IS NOT NULL) THEN
		BEGIN
			SELECT LENGTH(vehicleParam) - LENGTH(REPLACE(vehicleParam, ',', '')) INTO @noOfCommas;
            SET noOfVehicles = @noOfCommas + 1;
            SET tempCount = 1;
			WHILE (tempCount  <=  noOfVehicles) DO
				SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(vehicleParam, ',', tempCount), ',', -1 ) INTO @vehicleIdParam;

					SELECT LENGTH(checkpointParam) - LENGTH(REPLACE(checkpointParam, ',', '')) INTO @noOfCommasCheckpoint;
					SET noOfCheckpoints = @noOfCommasCheckpoint + 1;
					SET tempCountCheckpoint = 1;
					WHILE (tempCountCheckpoint  <=  noOfCheckpoints) DO
						SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(checkpointParam, ',', tempCountCheckpoint), ',', -1 ) INTO @checkpointIdParam;
						INSERT INTO checkPointException
						(exceptionId
						, exceptionName
						, checkPointId
						, vehicleId
						, startTime
						, endTime
						, exceptionType
						, customerno
						, created_by
						, created_on
						) VALUES (
						exceptionIdParam
						, exceptionNameParam
						, @checkpointIdParam
						, @vehicleIdParam
						, startTimeParam
						, endTimeParam
						, exceptionParam
						, custno
						, useridParam
						, todaydate
						);
						SET  tempCountCheckpoint = tempCountCheckpoint + 1;
					END WHILE;

			    SET  tempCount = tempCount + 1;
			END WHILE;
		END;
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insertRealtimeData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insertRealtimeData`(
  IN vehicleid INT,
  IN uid INT,
  IN groupid INT,
  IN driverid INT,
  IN lastupdated VARCHAR(50),
  IN statusParam VARCHAR(50),
  IN location VARCHAR(250),
  IN speed INT,
  IN distance DECIMAl(6,2),
  IN power TINYINT,
  IN ac_status VARCHAR(50),
  IN door_status VARCHAR(50),
  IN temperature1 VARCHAR(20),
  IN temperature2 VARCHAR(20),
  IN temperature3 VARCHAR(20),
  IN temperature4 VARCHAR(20),
  IN genset1 VARCHAR(50),
  IN genset2 VARCHAR(50),
  IN humidity VARCHAR(20),
  IN is_buzzer TINYINT,
  IN is_mobiliser TINYINT,
  IN is_freeze TINYINT,
  IN custno INT,
  IN userid INT,
  IN todaysdate DATETIME
)
BEGIN

  INSERT INTO realtimedata(
    vehicleid
    ,uid
    ,groupid
    ,driverid
    ,lastupdated
    ,`status`
    ,location
    ,speed
    ,distance
    ,power
    ,ac_status
    ,door_status
    ,temperature1
    ,temperature2
    ,temperature3
    ,temperature4
    ,genset1
    ,genset2
    ,humidity
    ,is_buzzer
    ,is_mobiliser
    ,is_freeze
    ,customerno
    ,created_by
    ,created_on
  ) VALUES (
    vehicleid
    ,uid
    ,groupid
    ,driverid
    ,lastupdated
    ,statusParam
    ,location
    ,speed
    ,distance
    ,power
    ,ac_status
    ,door_status
    ,temperature1
    ,temperature2
    ,temperature3
    ,temperature4
    ,genset1
    ,genset2
    ,humidity
    ,is_buzzer
    ,is_mobiliser
    ,is_freeze
    ,custno
    ,userid
    ,todaysdate

  );
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_bank_deposit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_bank_deposit`( 
     IN todaysdateParam DATETIME
    ,IN customernoParam INT(11)
    ,IN lteamidParam INT(11)
    ,IN chequenoParam VARCHAR(40)
    ,IN bankParam VARCHAR(40)
    ,IN amountParam float
    ,IN typeParam TINYINT(1)
    ,IN statusParam TINYINT(1)
    ,IN responsibleParam INT(11)
    ,IN bankidParam INT(11)
    ,OUT isexecutedOut TINYINT(1)
)
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            ROLLBACK;
          /*  GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
            @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
            SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
            SELECT @full_error;  */
            SET isexecutedOut = 0;
        END;

        BEGIN
            DECLARE brsidVar INT(11);

            SET isexecutedOut = 0;

            START TRANSACTION;
            BEGIN

                INSERT INTO `bank_reconc_stmt`(`timestamp`
                        , `customerno`
                        , `userid`
                        , `chequeno`
                        , `bank`
                        , `amount`
                        , `type`
                        , `status`
                        , `responsible_id`
                        , `is_deleted`
                        , `bank_id`) 
                VALUES (todaysdateParam
                        ,customernoParam
                        ,lteamidParam
                        ,chequenoParam
                        ,bankParam
                        ,amountParam
                        ,typeParam
                        ,statusParam
                        ,responsibleParam
                        ,0
                        ,bankidParam);

                SELECT  LAST_INSERT_ID()
                INTO    brsidVar;

                INSERT INTO `bank_transaction_history` (
                        `brs_id`
                        ,`timestamp`
                        ,`customerno`
                        ,`userid`
                        ,`chequeno`
                        ,`bank`
                        ,`amount`
                        ,`type`
                        ,`status`
                        ,`responsible_id`
                        ,`bank_id`)
                VALUES(brsidVar
                        ,todaysdateParam
                        ,customernoParam
                        ,lteamidParam
                        ,chequenoParam
                        ,bankParam
                        ,amountParam
                        ,typeParam
                        ,statusParam
                        ,responsibleParam
                        ,bankidParam);

                SET isexecutedOut = 1;
            END;
            COMMIT;
        END;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_bank_statement` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_bank_statement`(
    IN transaction_datetime DATETIME
    ,IN details VARCHAR(50)
  , IN remarks VARCHAR(50)
  , IN transaction_type TINYINT
  , IN categoryid INT
  , IN amount DECIMAL(10,2)
  , IN teamid INT
    ,IN todaysdate DATETIME
    ,OUT statementid INT
)
BEGIN
  INSERT INTO bank_statement
  (
    transaction_datetime
    ,details
    ,remarks
    ,transaction_type
    ,categoryid
    ,amount
    ,created_by
    ,created_on
  )VALUES(
    transaction_datetime
    ,details
    ,remarks
    ,transaction_type
    ,categoryid
    ,amount
    ,teamid
    ,todaysdate
  );
SET statementid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_bank_withdrawal` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_bank_withdrawal`( 
     IN todaysdateParam DATETIME
    ,IN vendoridParam INT(11)
    ,IN lteamidParam INT(11)
    ,IN chequenoParam VARCHAR(40)
    ,IN bankParam VARCHAR(40)
    ,IN amountParam float
    ,IN typeParam TINYINT(1)
    ,IN statusParam TINYINT(1)
    ,IN responsibleParam INT(11)
    ,IN bankidParam INT(11)
    ,OUT isexecutedOut TINYINT(1)
)
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            ROLLBACK;
          /*  GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
            @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
            SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
            SELECT @full_error;  */
            SET isexecutedOut = 0;
        END;

        BEGIN
            DECLARE brsidVar INT(11);

            SET isexecutedOut = 0;

            START TRANSACTION;
            BEGIN

                INSERT INTO `bank_reconc_stmt`(`timestamp`
                        , `vendorid`
                        , `userid`
                        , `chequeno`
                        , `bank`
                        , `amount`
                        , `type`
                        , `status`
                        , `responsible_id`
                        , `is_deleted`
                        , `bank_id`) 
                VALUES (todaysdateParam
                        ,vendoridParam
                        ,lteamidParam
                        ,chequenoParam
                        ,bankParam
                        ,amountParam
                        ,typeParam
                        ,statusParam
                        ,responsibleParam
                        ,0
                        ,bankidParam);

                SELECT  LAST_INSERT_ID()
                INTO    brsidVar;

                INSERT INTO `bank_transaction_history` (
                        `brs_id`
                        ,`timestamp`
                        ,`vendorid`
                        ,`userid`
                        ,`chequeno`
                        ,`bank`
                        ,`amount`
                        ,`type`
                        ,`status`
                        ,`responsible_id`
                        ,`bank_id`)
                VALUES(brsidVar
                        ,todaysdateParam
                        ,vendoridParam
                        ,lteamidParam
                        ,chequenoParam
                        ,bankParam
                        ,amountParam
                        ,typeParam
                        ,statusParam
                        ,responsibleParam
                        ,bankidParam);

                SET isexecutedOut = 1;
            END;
            COMMIT;
        END;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_booking_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_booking_details`( 
	IN bookingrefno VARCHAR (25)
	, IN vehicleno VARCHAR (20) 
    , IN tripstatus TINYINT(1)
	, IN expected_tripstarttime DATETIME
	, IN customerno INT
    , IN userid INT
    , OUT currentbookingid INT
	)
BEGIN
	/* Check whether the booking already exists */
	SET currentbookingid = (SELECT	bookingid 
							FROM 	booking 
							WHERE 	bookingrefno = bookingrefno);
	IF (currentbookingid > 0) THEN
			/* 
				If tripstatus is 0 that is cancelled then soft delete the booking 
				If tripstatus is 1 that is booked again with same refno then reactivate the booking 
            */
				UPDATE 	booking
				SET 	tripstatus = tripstatus
						, isdeleted = NOT tripstatus
						, updated_on = NOW()
                        , updatedby = userid
				WHERE 	bookingrefno = bookingrefno;
    ELSE
        INSERT INTO booking (
								bookingrefno
								, vehicleno
								, tripstatus
								, expected_tripstarttime
								, customerno
								, created_on
                                , createdby
								, updated_on
                                , updatedby
							)
		VALUES ( 
					bookingrefno
					, vehicleno
					, tripstatus
					, expected_tripstarttime
					, customerno
					, now()
					, userid
					, now()
                    , userid
				);
				
		SET currentbookingid = LAST_INSERT_ID();
    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_category` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_category`(
    IN category VARCHAR(50)
    ,IN teamid INT
    ,IN todaydate DATETIME
    ,OUT categoryid INT
)
BEGIN
  INSERT INTO category
  (
    category
    ,created_by
    ,created_on
  )VALUES(
    category
    ,teamid
    ,todaydate
  );
SET categoryid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_chatdetails` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_chatdetails`(
    IN useridParam INT,
    IN restoreidParam varchar(50),
	IN dateParam datetime,
	IN custnoParam int(11)
)
BEGIN
DECLARE externalCount int;
 BEGIN
        ROLLBACK;
        /*
        GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error;
        */
    END;
SET externalCount =0;
IF(useridParam = 0) THEN
	SET useridParam = NULL;
END IF;
    IF(useridParam IS NOT NULL) THEN
        
        SELECT COUNT(external_id) INTO externalCount from chatdetails where external_id = useridParam;
        SET externalCount = externalCount;
        IF(externalCount = 0) THEN
    
            BEGIN
                INSERT INTO chatdetails(
					customerno,
                    external_id,
                    restore_id,
					created_on,
					updated_on
                )VALUES(
				   custnoParam,	
                   useridParam,
                   restoreidParam,
				   dateParam,
				   dateParam	
                );

            END;
		ELSE
        BEGIN
				 UPDATE chatdetails
                 SET
					 restore_id = restoreidParam,
                     updated_on = dateParam
				WHERE external_id = useridParam;
        END;
        END IF;
    END IF;
	COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_clients` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_clients`(
	IN clientNameParam VARCHAR(50)
	,IN emailParam VARCHAR(50)
	,IN phoneParam VARCHAR(15)
	,IN segmentIdParam INT 
	,IN agreementStartParam DATE
	,IN agreementEndParam DATE
	,IN addressParam VARCHAR(250)
	,IN customernNoParam INT
	,IN userIdParam INT 
	,IN todaysDate DATETIME
	,OUT currentClientId INT
)
BEGIN
	SET currentClientId = 0;

	INSERT INTO clients (
		clientName
		,email
		,phone
		,segmentId
		,agreementStart
		,agreementEnd
		,address
		,customerNo
		,createdBy
		,createdOn
		)
	VALUES (
		clientNameParam
		,emailParam
		,phoneParam
		,segmentIdParam
		,agreementStartParam
		,agreementEndParam
		,addressParam
		,customernNoParam
		,userIdParam
		,todaysDate
	);

	SET currentClientId = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_default_menu` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_default_menu`(
IN `moduleidparam` INT, 
IN `customernoparam` INT, 
IN `todaysdate` DATETIME, 
IN `useridparam` INT, 
IN `createdbyparam` INT 
)
BEGIN

INSERT INTO usermenu_mapping (menuid,userid,customerno,created_by,created_on)
SELECT menuid,useridparam,customernoparam,createdbyparam,todaysdate FROM menu_master where moduleid=moduleidparam AND isdeleted=0 OR customerno=customernoparam ;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_depot` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_depot`( 
	IN depotcode VARCHAR (20)
	, IN depotname VARCHAR (50)
    , IN zoneid INT
    , IN customerno INT
    , IN todaysdate DATETIME
    , IN userid INT
    , OUT currentdepotid INT
	)
BEGIN
	INSERT INTO depot(
							depotcode
                            , depotname
                            , zoneid
						
                            , customerno
							, created_on
							, updated_on
                            , created_by
                            , updated_by
						)
	VALUES ( 
				depotcode
                , depotname
                , zoneid
               		, customerno
				, todaysdate
				, todaysdate
                , userid
                , userid
			);
            
	SET currentdepotid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_duplicate_unit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_duplicate_unit`(
	IN unitnoParam VARCHAR(16)
    , IN oldCustnoParam INT
	, IN newCustnoParam INT
    , OUT isDuplicateUnitAdded  INT
    , OUT vehiclenoVar varchar(40)
)
BEGIN

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
		BEGIN
			ROLLBACK;

			/*GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
			@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
			SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
			SELECT @full_error; */


		END;

    SET isDuplicateUnitAdded = 0;

	START TRANSACTION;

		SET @oldUid = (SELECT uid FROM unit WHERE unitno = unitnoParam AND customerno = oldCustnoParam LIMIT 1);

		INSERT INTO `unit` (`unitno`, `repairtat`, `customerno`, `vehicleid`, `analog1`, `analog2`, `analog3`, `analog4`, `digitalio`, `extra_digital`, `digitalioupdated`, `door_digitalioupdated`, `extra_digitalioupdated`, `extra2_digitalioupdated`, `command`, `setcom`, `commandkey`, `commandkeyval`, `acsensor`, `is_ac_opp`, `gensetsensor`, `is_genset_opp`, `transmitterno`, `doorsensor`, `is_door_opp`, `fuelsensor`, `tempsen1`, `tempsen2`, `tempsen3`, `tempsen4`, `n1`, `n2`, `n3`, `n4`, `humidity`, `is_panic`, `is_buzzer`, `is_mobiliser`, `is_twowaycom`, `is_portable`, `mobiliser_flag`, `is_freeze`, `unitprice`, `userid`, `msgkey`, `trans_statusid`, `type_value`, `temp1_intv`, `temp2_intv`, `temp3_intv`, `temp4_intv`, `teamid`, `remark`, `alterremark`, `issue_type`, `comments`, `comments_repair`, `issue`, `onlease`, `isRequiredThirdParty`,`get_conversion`)
		SELECT `unitno`, `repairtat`, `customerno`, `vehicleid`, `analog1`, `analog2`, `analog3`, `analog4`, `digitalio`, `extra_digital`, `digitalioupdated`, `door_digitalioupdated`, `extra_digitalioupdated`, `extra2_digitalioupdated`, `command`, `setcom`, `commandkey`, `commandkeyval`, `acsensor`, `is_ac_opp`, `gensetsensor`, `is_genset_opp`, `transmitterno`, `doorsensor`, `is_door_opp`, `fuelsensor`, `tempsen1`, `tempsen2`, `tempsen3`, `tempsen4`, `n1`, `n2`, `n3`, `n4`, `humidity`, `is_panic`, `is_buzzer`, `is_mobiliser`, `is_twowaycom`, `is_portable`, `mobiliser_flag`, `is_freeze`, `unitprice`, `userid`, `msgkey`, `trans_statusid`, `type_value`, `temp1_intv`, `temp2_intv`, `temp3_intv`, `temp4_intv`, `teamid`, `remark`, `alterremark`, `issue_type`, `comments`, `comments_repair`, `issue`, `onlease`, `isRequiredThirdParty`,`get_conversion`
		FROM 	unit
		WHERE 	uid = @oldUid;

		SET @newUid = LAST_INSERT_ID();

		UPDATE unit		SET customerno = newCustnoParam			WHERE uid = @newUid;
		UPDATE unit		SET vehicleid = 0 						WHERE uid = @newUid;


		INSERT INTO `vehicle` (`vehicleno`, `extbatt`, `odometer`, `lastupdated`, `curspeed`, `driverid`, `customerno`, `uid`, `isdeleted`, `kind`, `userid`, `groupid`, `branchid`, `overspeed_limit`, `average`, `modelid`, `manufacturing_month`, `manufacturing_year`, `purchase_date`, `start_meter_reading`, `fueltype`, `is_insured`, `status_id`, `temp1_min`, `temp1_max`, `temp1_mute`, `temp2_min`, `temp2_max`, `temp2_mute`, `temp3_min`, `temp3_max`, `temp3_mute`, `temp4_min`, `temp4_max`, `temp4_mute`, `no_of_genset`, `genset1`, `genset2`, `transmitter1`, `transmitter2`, `other_upload1`, `other_upload2`, `other_upload3`, `other_upload4`, `timestamp`, `stoppage_odometer`, `stoppage_transit_time`, `nodata_alert`, `stoppage_flag`, `submission_date`, `registration_date`, `approval_date`, `additional_amount`, `description`, `sms_count`, `sms_lock`, `tel_count`, `tel_lock`, `fuel_balance`, `fuelcapacity`, `max_voltage`, `fuel_min_volt`, `fuel_max_volt`, `notes`, `rto_location`, `serial_number`, `expiry_date`, `owner_name`, `invcustid`, `sequenceno`)
		SELECT	`vehicleno`, `extbatt`, `odometer`, `lastupdated`, `curspeed`, `driverid`, `customerno`, `uid`, `isdeleted`, `kind`, `userid`, `groupid`, `branchid`, `overspeed_limit`, `average`, `modelid`, `manufacturing_month`, `manufacturing_year`, `purchase_date`, `start_meter_reading`, `fueltype`, `is_insured`, `status_id`, `temp1_min`, `temp1_max`, `temp1_mute`, `temp2_min`, `temp2_max`, `temp2_mute`, `temp3_min`, `temp3_max`, `temp3_mute`, `temp4_min`, `temp4_max`, `temp4_mute`, `no_of_genset`, `genset1`, `genset2`, `transmitter1`, `transmitter2`, `other_upload1`, `other_upload2`, `other_upload3`, `other_upload4`, `timestamp`, `stoppage_odometer`, `stoppage_transit_time`, `nodata_alert`, `stoppage_flag`, `submission_date`, `registration_date`, `approval_date`, `additional_amount`, `description`, `sms_count`, `sms_lock`, `tel_count`, `tel_lock`, `fuel_balance`, `fuelcapacity`, `max_voltage`, `fuel_min_volt`, `fuel_max_volt`, `notes`, `rto_location`, `serial_number`, `expiry_date`, `owner_name`, `invcustid`, `sequenceno`
		FROM 	vehicle
		WHERE 	uid = @oldUid
		AND 	isdeleted = 0;

		SET @newVehid = LAST_INSERT_ID();



		UPDATE vehicle 		SET customerno = newCustnoParam 	WHERE vehicleid = @newVehid;
		UPDATE vehicle 		SET uid = @newUid 					WHERE vehicleid = @newVehid;
		UPDATE vehicle 		SET driverid = 0					WHERE vehicleid = @newVehid;

		UPDATE unit			SET vehicleid = @newVehid 			WHERE uid = @newUid;


		SET @oldVehid = (SELECT vehicleid FROM vehicle WHERE uid = @oldUid);
		INSERT INTO `driver` (`drivername`, `driverlicno`, `driverphone`, `customerno`, `vehicleid`, `isdeleted`, `userid`, `birthdate`, `age`, `bloodgroup`, `licence_validity`, `licence_issue_auth`, `local_address`, `local_contact`, `local_contact_mob`, `emergency_contact1`, `emergency_contact2`, `emergency_contact_no1`, `emergency_contact_no2`, `native_address`, `native_contact`, `native_contact_mob`, `native_emergency_contact1`, `native_emergency_contact2`, `native_emergency_contact_no1`, `native_emergency_contact_no2`, `previous_employer`, `service_period`, `service_contact_person`, `service_contact_no`, `upload`, `username`, `password`, `userkey`, `trip_email`, `trip_phone`, `istripstarted`)
		SELECT	`drivername`, `driverlicno`, `driverphone`, `customerno`, `vehicleid`, `isdeleted`, `userid`, `birthdate`, `age`, `bloodgroup`, `licence_validity`, `licence_issue_auth`, `local_address`, `local_contact`, `local_contact_mob`, `emergency_contact1`, `emergency_contact2`, `emergency_contact_no1`, `emergency_contact_no2`, `native_address`, `native_contact`, `native_contact_mob`, `native_emergency_contact1`, `native_emergency_contact2`, `native_emergency_contact_no1`, `native_emergency_contact_no2`, `previous_employer`, `service_period`, `service_contact_person`, `service_contact_no`, `upload`, `username`, `password`, `userkey`, `trip_email`, `trip_phone`, `istripstarted`
		FROM 	driver
		WHERE 	vehicleid = @oldVehid
		AND		isdeleted = 0;

		SET @newDriverId = LAST_INSERT_ID();

		UPDATE driver 		SET customerno = newCustnoParam 	WHERE driverid = @newDriverId;
		UPDATE driver 		SET vehicleid = @newVehid 			WHERE driverid = @newDriverId;
		UPDATE vehicle 		SET driverid = @newDriverId			WHERE vehicleid = @newVehid;


		INSERT INTO `ignitionalert` (`vehicleid`, `last_status`, `last_check`, `count`, `idleignon_count`, `running_count`, `status`, `customerno`, `ignchgtime`, `ignontime`, `prev_odometer_reading`, `prev_odometer_time`)
		SELECT `vehicleid`, `last_status`, `last_check`, `count`, `idleignon_count`, `running_count`, `status`, `customerno`, `ignchgtime`, `ignontime`, `prev_odometer_reading`, `prev_odometer_time`
		FROM	ignitionalert
		WHERE 	vehicleid = @oldVehid;

		SET @newIgalertId = LAST_INSERT_ID();

		UPDATE ignitionalert 	SET customerno = newCustnoParam WHERE igalertid = @newIgalertId;
		UPDATE ignitionalert	SET vehicleid = @newVehid 		WHERE igalertid = @newIgalertId;


		INSERT INTO `eventalerts` (`vehicleid`, `overspeed`, `tamper`, `powercut`, `temp`, `temp2`, `temp3`, `temp4`, `ac`, `customerno`, `ac_count`, `ac_time`, `door`, `door_time`)
		SELECT `vehicleid`, `overspeed`, `tamper`, `powercut`, `temp`, `temp2`, `temp3`, `temp4`, `ac`, `customerno`, `ac_count`, `ac_time`, `door`, `door_time`
		FROM	eventalerts
		WHERE 	vehicleid = @oldVehid;

		SET @newEaId = LAST_INSERT_ID();

		UPDATE eventalerts 		SET customerno = newCustnoParam WHERE eaid = @newEaId;
		UPDATE eventalerts 		SET vehicleid = @newVehid 		WHERE eaid = @newEaId;


		INSERT INTO `devices` (`customerno`, `devicekey`, `devicelat`, `devicelong`, `baselat`, `baselng`, `installlat`, `installlng`, `lastupdated`, `registeredon`, `altitude`, `directionchange`, `inbatt`, `hwv`, `swv`, `msgid`, `uid`, `status`, `ignition`, `powercut`, `tamper`, `gpsfixed`, `online/offline`, `gsmstrength`, `gsmregister`, `gprsregister`, `aci_status`, `satv`, `device_invoiceno`, `inv_generatedate`, `installdate`, `expirydate`, `invoiceno`, `po_no`, `po_date`, `warrantyexpiry`, `simcardid`, `inv_device_priority`, `inv_deferdate`)
		SELECT 	`customerno`, `devicekey`, `devicelat`, `devicelong`, `baselat`, `baselng`, `installlat`, `installlng`, `lastupdated`, `registeredon`, `altitude`, `directionchange`, `inbatt`, `hwv`, `swv`, `msgid`, `uid`, `status`, `ignition`, `powercut`, `tamper`, `gpsfixed`, `online/offline`, `gsmstrength`, `gsmregister`, `gprsregister`, `aci_status`, `satv`, `device_invoiceno`, `inv_generatedate`, `installdate`, `expirydate`, `invoiceno`, `po_no`, `po_date`, `warrantyexpiry`, `simcardid`, `inv_device_priority`, `inv_deferdate`
		FROM	devices
		WHERE 	uid = @oldUid;

		SET @newDeviceId = LAST_INSERT_ID();

		UPDATE devices 			SET customerno = newCustnoParam WHERE deviceid = @newDeviceId;
		UPDATE devices 			SET uid = @newUid 				WHERE deviceid = @newDeviceId;
		UPDATE devices			SET	simcardid = 0				WHERE deviceid = @newDeviceId;


		SET @oldsimcardId = (SELECT simcardid FROM devices WHERE uid = @oldUid);

		INSERT INTO `simcard` (`simcardno`, `vendorid`, `trans_statusid`, `customerno`, `teamid`, `comments`)
		SELECT 	`simcardno`, `vendorid`, `trans_statusid`, `customerno`, `teamid`, `comments`
		FROM	simcard
		WHERE	id = @oldsimcardId;

		SET @newSimcardId = LAST_INSERT_ID();

		UPDATE simcard 			SET customerno = newCustnoParam WHERE id = @newSimcardId;
		UPDATE devices			SET	simcardid = @newSimcardId	WHERE deviceid = @newDeviceId;


		INSERT INTO `dailyreport` (`customerno`, `vehicleid`, `uid`, `harsh_break`, `sudden_acc`, `towing`, `flag_harsh_break`, `flag_sudden_acc`, `flag_towing`, `first_odometer`, `last_odometer`, `max_odometer`, `average_distance`, `total_tracking_days`, `overspeed`, `topspeed`, `topspeed_lat`, `topspeed_long`, `fenceconflict`, `acusage`, `runningtime`, `idleignitiontime`, `first_lat`, `first_long`, `end_lat`, `end_long`, `last_online_updated`, `offline_data_time`, `topspeed_time`, `night_first_odometer`, `weekend_first_odometer`, `daily_date`)
		(SELECT 	`customerno`, `vehicleid`, `uid`, `harsh_break`, `sudden_acc`, `towing`, `flag_harsh_break`, `flag_sudden_acc`, `flag_towing`, `first_odometer`, `last_odometer`, `max_odometer`, `average_distance`, `total_tracking_days`, `overspeed`, `topspeed`, `topspeed_lat`, `topspeed_long`, `fenceconflict`, `acusage`, `runningtime`, `idleignitiontime`, `first_lat`, `first_long`, `end_lat`, `end_long`, `last_online_updated`, `offline_data_time`, `topspeed_time`, `night_first_odometer`, `weekend_first_odometer`, `daily_date`
		FROM	dailyreport
		WHERE	uid = @oldUid
		ORDER BY daily_date DESC
		LIMIT 1);


		SET @newDailyreportId = LAST_INSERT_ID();

		UPDATE dailyreport		SET customerno = newCustnoParam WHERE dailyreport_id = @newDailyreportId;
		UPDATE dailyreport		SET	uid = @newUid				WHERE dailyreport_id = @newDailyreportId;
		UPDATE dailyreport		SET	vehicleid = @newVehid		WHERE dailyreport_id = @newDailyreportId;



        SET isDuplicateUnitAdded = 1;

		SELECT `vehicleno`
        INTO vehiclenoVar
        FROM vehicle
        WHERE `vehicleid` = @newVehid;


    COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_duplicate_unit_log` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_duplicate_unit_log`(
    IN original_customerParam INT
    ,IN new_customerParam INT
    ,IN unitnoParam VARCHAR(16)
    ,IN created_byParam INT
    ,IN created_on datetime
)
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
       /*
        GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error;
        */

    END;
	INSERT INTO speed.duplicate_unit_log (
         `original_customer` ,`new_customer`,`unitno`, `created_by`, `created_on`)
	VALUES (original_customerParam, new_customerParam, unitnoParam, created_byParam,created_on);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_factory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_factory`( 
	IN factorycode VARCHAR (10)	
	,IN factoryname VARCHAR (50)
    ,IN zoneid INT
	,IN customerno INT
    ,IN todaysdate DATETIME
    ,IN userid INT
    , OUT currentfactoryid INT
	)
BEGIN
	INSERT INTO factory (
							factorycode							
							,factoryname
							, zoneid
                            				, customerno
							, created_on
							, updated_on
							, created_by
							, updated_by
						)
	VALUES ( 
				factorycode
				,factoryname                		
				, zoneid
				, customerno
				, todaysdate
				, todaysdate
                		, userid
                		, userid
			);
            
	SET currentfactoryid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_forgot_password_request` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_forgot_password_request`(
	IN useridparam INT
	, IN todaysdate datetime
	, OUT otpparam INT
    , OUT otpvaliduptoparam DATETIME
)
BEGIN
	DECLARE request_counterparam INT;
	DECLARE username_param varchar(50);
	DECLARE phone_param varchar(15);
    DECLARE minotp INT DEFAULT 100000;
    DECLARE maxotp INT DEFAULT 999999;
    
	IF EXISTS (	SELECT 	userid 
				FROM 	forgot_password_request  
				WHERE 	userid = useridparam 
				AND 	isused = 0 
				AND 	isdeleted = 0
				AND 	validupto BETWEEN todaysdate AND DATE_ADD(todaysdate,INTERVAL 24 HOUR) 
				LIMIT 1) THEN 
		BEGIN
			SELECT 	otp,request_counter, validupto 
			INTO 	otpparam, request_counterparam, otpvaliduptoparam
			FROM 	forgot_password_request 
			WHERE 	userid = useridparam 
			AND 	isused = 0 
			AND 	isdeleted = 0
			AND 	validupto between todaysdate AND DATE_ADD(todaysdate,INTERVAL 24 HOUR) LIMIT 1;
            
			IF(request_counterparam = 3) THEN
				SET otpparam = -1; 
			ELSE
				UPDATE 	forgot_password_request 
				SET 	request_counter = request_counterparam + 1 
						, updated_on = todaysdate
				WHERE 	userid = useridparam 
				AND 	isused = 0 
				AND 	isdeleted = 0
				AND 	validupto BETWEEN todaysdate AND DATE_ADD(todaysdate,INTERVAL 24 HOUR);
			END IF;
		END;
	ELSE
		BEGIN
			SELECT 	phone, username 
			INTO 	phone_param, username_param  
			FROM 	user 
			WHERE 	userid = useridparam 
			AND 	isdeleted = 0;
            
            SET otpparam = FLOOR(RAND() * (maxotp - minotp + 1)) + minotp;
            SET otpvaliduptoparam = DATE_ADD(todaysdate,INTERVAL 24 HOUR);
			
			INSERT INTO forgot_password_request (
						  userid
						, username
						, phone
						, otp
						, validupto
						, isused
						, request_counter
                        , created_on
                        , updated_on
						) 
					VALUES	(
						 useridparam
						, username_param
						, phone_param
						, otpparam
						, otpvaliduptoparam
						, 0
						, 1
                        , todaysdate
                        , todaysdate
					);
		END;
	END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_groups_for_user` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_groups_for_user`(
	IN useridParam INT
    , IN districtidParam INT
    , IN cityidParam INT
    , IN groupidParam INT
    , IN custnoParam INT
    , IN todaysdate DATETIME
    , OUT isInserted TINYINT(1) 
)
BEGIN
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
        /*
        GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, 
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
        */
        SET isInserted = 0;
	END;
    
	IF cityidParam = 0 OR cityidParam = '' THEN
		SET cityidParam = NULL;
    END IF;
    
	IF groupidParam = 0 OR groupidParam = '' THEN
		SET groupidParam = NULL;
    END IF;
    
	START TRANSACTION;
		UPDATE 	groupman
        SET 	isdeleted = 1
        WHERE 	userid = useridParam
        AND 	customerno = custnoParam;
        
		INSERT INTO groupman (groupid, userid, customerno, `timestamp`, vehicleid, isdeleted)
		SELECT  	g.groupid, useridParam, custnoParam, todaysdate, 0, 0
		FROM 		`group` AS g
		INNER JOIN 	city AS c on g.cityid = c.cityid
		INNER JOIN 	district AS d on c.districtid = d.districtid
		WHERE 		d.districtid = districtidParam
		AND 		(cityidParam IS NULL OR c.cityid = cityidParam)
        AND 		(groupidParam IS NULL OR g.groupid = groupidParam)
		AND			d.isdeleted = 0
        AND 		d.customerno = custnoParam
		AND			c.isdeleted = 0
		AND 		c.customerno = custnoParam
        AND			g.isdeleted = 0
		AND 		g.customerno = custnoParam;
        
		SET isInserted = 1;
	COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_into_ticketusermapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_into_ticketusermapping`(
IN ticketid INT(50),
IN userid INT(200),
IN username VARCHAR(500)
)
BEGIN
    DECLARE  istDateTime INT;
    DECLARE  serverTime INT;
    SET @serverTime = now();
    SET @istDateTime = CONVERT_TZ(@serverTime, 'SYSTEM', '+05:30');
 ROLLBACK;
    /*
       GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
       @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
       SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
       SELECT @full_error;
*/
    INSERT INTO ticket_user_mapping
    (
        ticketid,
        userid,
        username,
        updatedOn
    )
    VALUES (
    ticketid,
    userid,
    username,
    @istDateTime
    );
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_invoice_payments` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_invoice_payments`(
IN customernoParam INT,
IN invoiceidParam INT,
IN invoicenoParam VARCHAR(50),
IN payment_modeParam tinyint,
IN payment_dateParam date,
IN cheque_noParam INT,
IN bank_nameParam VARCHAR(255),
IN bank_branchParam VARCHAR(50),
IN cheque_dateParam date,
IN new_payment_amountParam float,
IN new_tdsParam float,
IN new_unpaid_amountParam float,
IN teamidParam INT,
IN created_onParam datetime,
OUT isExecutedOutParam INT)
BEGIN
DECLARE invoice_amountVar FLOAT;
DECLARE totalPaid_AmountVar FLOAT;
DECLARE InvoiceidVar INT;
DECLARE ip_idVar INT;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
       BEGIN
       /*
           ROLLBACK;
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
           @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
           SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
           SELECT @full_error; */
		END;



SET isExecutedOutParam = 0;

SELECT inv_amt INTO invoice_amountVar 
from `invoice` 
where invoiceid = invoiceidParam;


INSERT INTO `invoice_payment_mapping`(`invoiceid`
		,`invoiceno`			
		, `customerno`
        ,`inv_amt`
		, `pay_mode`
		, `paid_amt`
		, `paymentdate`
		, `tds_amt`
        ,`bad_debts`
		, `cheque_no`
		, `cheque_date`
		, `bank_name`
		, `bank_branch`
        ,`created_by`
		, `created_on`) 
VALUES (invoiceidParam
		,invoicenoParam
		,customernoParam
        ,invoice_amountVar
		,payment_modeParam
		,new_payment_amountParam
		,payment_dateParam
		,new_tdsParam
        ,new_unpaid_amountParam
		,cheque_noParam
		,cheque_dateParam
		,bank_nameParam
		,bank_branchParam
        ,teamidParam
		,created_onParam);
        
        SELECT  LAST_INSERT_ID()
		INTO    ip_idVar;
        
SELECT DISTINCT invoiceid INTO InvoiceidVar from invoice_payment_mapping 
where invoiceid = invoiceidParam;

IF(InvoiceidVar IS NULL) THEN
SELECT (i.paid_amt+i.tds_amt+i.unpaid_amt)
INTO totalPaid_AmountVar
from invoice i
where i.invoiceid=invoiceidParam;      
ELSE
SELECT (sum(ip.paid_amt)+sum(ip.tds_amt)+sum(ip.bad_debts))+(i.paid_amt+i.tds_amt+i.unpaid_amt)
INTO totalPaid_AmountVar
from invoice_payment_mapping ip
INNER JOIN invoice i on i.invoiceid = ip.invoiceid
where i.invoiceid=invoiceidParam; 
END IF;

IF(totalPaid_AmountVar<invoice_amountVar OR totalPaid_AmountVar>invoice_amountVar)THEN
UPDATE `invoice_payment_mapping`
SET `pending_amt`=(invoice_amountVar-totalPaid_AmountVar)
where ip_id=ip_idVar; 
UPDATE `invoice`
SET `status`='Pending',
	`pending_amt`=(invoice_amountVar-totalPaid_AmountVar)
where invoiceid=invoiceidParam; 
ELSE
UPDATE `invoice_payment_mapping`
SET `pending_amt`=(invoice_amountVar-totalPaid_AmountVar)
where ip_id=ip_idVar; 
UPDATE `invoice`
SET `status`='Paid',
	`pending_amt`=(invoice_amountVar-totalPaid_AmountVar)
where invoiceid=invoiceidParam; 
END IF;
 
SET isExecutedOutParam = 1; 

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_ledger` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_ledger`( 
    IN ledgernameParam VARCHAR(100)
    , IN address1Param VARCHAR(100)
    , IN address2Param VARCHAR(100)
    , IN address3Param VARCHAR(100)
    , IN stateParam VARCHAR(100)
    , IN emailParam VARCHAR(40)
    , IN phoneParam VARCHAR(20)
    , IN pan_noParam VARCHAR(30)
    , IN gst_noParam VARCHAR(30)
    , IN createdbyParam INT(11)
    , IN createdonParam DATETIME
    , IN updatedbyParam INT(11)
    , IN updatedonParam DATETIME
    , OUT isexecutedOut TINYINT(2)
    , OUT lastinsertidOut  INT(11)
)
BEGIN
    

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
            ROLLBACK;
			
            SET isexecutedOut = 0;
	END;
    BEGIN  

        SET isexecutedOut = 0;

        START TRANSACTION;	 
        BEGIN
            INSERT INTO ledger(ledgername
                , address1 
                , address2 
                , address3
                , state_code
                , email 
                , phone 
                , pan_no 
                , gst_no
                , createdby 
                , createdon 
                , updatedby 
                , updatedon) 
            VALUES(ledgernameParam 
                , address1Param 
                , address2Param 
                , address3Param
                , stateParam
                , emailParam 
                , phoneParam 
                , pan_noParam 
                , gst_noParam
                , createdbyParam 
                , createdonParam 
                , updatedbyParam 
                , updatedonParam);

            SELECT  LAST_INSERT_ID()
            INTO    lastinsertidOut; 

            SET isexecutedOut = 1;

        END;
        COMMIT; 
    
    END;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_ledger_cust_mapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_ledger_cust_mapping`(
	IN ledgerid INT
    , IN customerno INT
    , IN createdby INT
    , IN createdon DATETIME
    , IN updatedby INT
    , IN updatedon DATETIME
)
BEGIN
INSERT INTO ledger_cust_mapping
(
	ledgerid
    ,customerno
    , createdby 
    , createdon 
    , updatedby 
	, updatedon 
) VALUES
(
	ledgerid
    ,customerno
    , createdby 
    , createdon 
    , updatedby 
	, updatedon 
)
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_ledger_veh_mapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_ledger_veh_mapping`( 
    IN vehicleid INT
    , IN ledgerid INT
	, IN customerno INT
    , IN createdby INT
    , IN createdon DATETIME
    , IN updatedby INT
    , IN updatedon DATETIME
)
BEGIN
INSERT INTO ledger_veh_mapping
(
	ledgerid
    ,vehicleid
    ,customerno
    , createdby 
    , createdon 
    , updatedby 
	, updatedon 
) VALUES
(
	ledgerid
    ,vehicleid
    ,customerno
    , createdby 
    , createdon 
    , updatedby 
	, updatedon 
)
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_login_history` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_login_history`(
	IN pageMasterIdParam int,
	IN loginTypeParam tinyint, 
	IN custno INT,
	IN todaysdate DATETIME,
	IN userid INT,
	OUT logHistoryId int
)
BEGIN
	

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error;
		*/
		ROLLBACK;
	END;
	START TRANSACTION;

	IF(custno = 0) THEN
		SET custno = NULL;
    END IF;
	IF(pageMasterIdParam = 0) THEN
		SET pageMasterIdParam = NULL;
    END IF;

	
		BEGIN
			INSERT INTO login_history_details(
				page_master_id,
				`type`,
				customerno,
				created_on,
				created_by
			)VALUES(				
				pageMasterIdParam,
				loginTypeParam,
				custno,
				todaysdate,
				userid
			);
		END;

		SET logHistoryId = LAST_INSERT_ID();
	COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_maintenance_conditions` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_maintenance_conditions`( 
     IN transtypeid INT
    , IN conditionname varchar(50)
    , IN minval INT
    , IN maxval INT
    , IN custno INT
    , IN todaysdate DATETIME
    , IN userid INT
    , OUT currentconditionid INT
)
BEGIN
	INSERT INTO maintenance_conditions(
                            transactiontypeid
                            , conditionname
                            , minval
                            , maxval
                            , customerno
                            , created_on
                            , updated_on
                            , created_by
                            , updated_by
			)
	VALUES ( 
		transtypeid
                , conditionname
                , minval
                , maxval
                , customerno
                , todaysdate
		, todaysdate
                , userid
                , userid
                );
            
	SET currentconditionid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_maintenance_rules` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_maintenance_rules`( 
     IN conditionid INT
    , IN minval varchar(25)
    , IN maxval varchar(25)
    , IN sequenceno INT
    , IN approverid INT
    , IN customerno INT
    , IN todaysdate DATETIME
    , IN userid INT
    , OUT currentruleid INT
)
BEGIN
	INSERT INTO maintenance_rules(
                            conditionid
                            , minval
                            , maxval
                            , sequenceno
                            , approverid
                            , customerno
                            , created_on
                            , updated_on
                            , created_by
                            , updated_by
			)
	VALUES ( 
		conditionid
                , minval
                , maxval
                , sequenceno
                , approverid
                , customerno
                , todaysdate
		, todaysdate
                , userid
                , userid
                );
            
	SET currentruleid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_multiauth_request` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_multiauth_request`(
  IN useridparam INT,
  IN todaysdate DATETIME,
  OUT otpparam INT,
  OUT otpvaliduptoparam DATETIME
)
BEGIN
  DECLARE request_counterparam INT;
  DECLARE username_param varchar(50);
  DECLARE phone_param varchar(15);
    DECLARE minotp INT DEFAULT 100000;
    DECLARE maxotp INT DEFAULT 999999;

  IF EXISTS ( SELECT  userid
        FROM  multiauth_request
        WHERE   userid = useridparam
        AND   isused = 0
        AND   isdeleted = 0
        AND   validupto BETWEEN todaysdate AND DATE_ADD(todaysdate,INTERVAL 24 HOUR)
        LIMIT 1) THEN
    BEGIN
      SELECT  otp,request_counter, validupto
      INTO  otpparam, request_counterparam, otpvaliduptoparam
      FROM  multiauth_request
      WHERE   userid = useridparam
      AND   isused = 0
      AND   isdeleted = 0
      AND   validupto between todaysdate AND DATE_ADD(todaysdate,INTERVAL 24 HOUR) LIMIT 1;

      IF(request_counterparam = 3) THEN
        SET otpparam = -1;
      ELSE
        UPDATE  multiauth_request
        SET   request_counter = request_counterparam + 1
            , updated_on = todaysdate
        WHERE   userid = useridparam
        AND   isused = 0
        AND   isdeleted = 0
        AND   validupto BETWEEN todaysdate AND DATE_ADD(todaysdate,INTERVAL 24 HOUR);
      END IF;
    END;
  ELSE
    BEGIN
      SELECT  phone, username
      INTO  phone_param, username_param
      FROM  user
      WHERE   userid = useridparam
      AND   isdeleted = 0;

            SET otpparam = FLOOR(RAND() * (maxotp - minotp + 1)) + minotp;
            SET otpvaliduptoparam = DATE_ADD(todaysdate,INTERVAL 24 HOUR);

      INSERT INTO multiauth_request   (
              userid
            , username
            , phone
            , otp
            , validupto
            , isused
            , request_counter
                        , created_on
                        , updated_on
            )
          VALUES  (
             useridparam
            , username_param
            , phone_param
            , otpparam
            , otpvaliduptoparam
            , 0
            , 1
                        , todaysdate
                        , todaysdate
          );
    END;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_overspeed_alert` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_overspeed_alert`(
    IN vehicleidParam INT
    , IN custnoParam INT
    , IN speedParam TINYINT UNSIGNED
    , IN overspeedLimitParam TINYINT UNSIGNED
    , IN devicelatParam DECIMAL(9,6)
    , IN devicelongParam DECIMAL(9,6)
    , IN overspeedStatusParam TINYINT(1) UNSIGNED
    , IN vehicleNoParam VARCHAR(40)
    , IN todaysDate DATETIME
)
BEGIN

    DECLARE osalertidVar INT(11) DEFAULT NULL;
    DECLARE countVar INT;
    DECLARE last_checkVar DATETIME;
    DECLARE last_statusVar TINYINT;
    DECLARE email_statusVar TINYINT;
    DECLARE lastupdatedVar DATETIME;
    DECLARE currstatusVar TINYINT;

    DECLARE overspeedMsg VARCHAR(100) DEFAULT '';
    DECLARE isOverspeed TINYINT(1) DEFAULT NULL;
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        /*
        GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error;
        */
    END;

    SET @overspeedYesMsg = CONCAT(vehicleNoParam, ' overspeed');
    SET @overspeedNormalMsg = CONCAT(vehicleNoParam, ' is running normal');
    SET @overspeedAlertType = 5;

    SELECT  osalertid
    INTO    osalertidVar
    FROM    overspeedalert
    WHERE   vehicleid = vehicleidParam
    limit   1;
	    
    START TRANSACTION;
	
        IF (osalertidVar IS NULL) THEN
        BEGIN
            INSERT INTO overspeedalert(`vehicleid`
                ,`last_status`
                ,`last_check`
                ,`count`
                ,`status`
                ,`customerno`)
            VALUES(vehicleidParam
                ,0
                ,todaysDate
                ,0
                ,0
                ,custnoParam);
        END;
        END IF;
		
        SELECT  osa.count 
                , osa.last_check
                , osa.last_status
                , osa.`status`
                , d.lastupdated 
        INTO	countVar
                ,last_checkVar
                ,last_statusVar
                ,email_statusVar
                ,lastupdatedVar
        FROM    devices AS d
        INNER JOIN unit u ON u.uid = d.uid
        INNER JOIN vehicle v on v.vehicleid = u.vehicleid
        INNER JOIN overspeedalert osa ON osa.vehicleid = v.vehicleid
        where   u.trans_statusid NOT IN (10,22)
        AND	v.vehicleid = vehicleidParam
        LIMIT   1;

        IF (speedParam >= overspeedLimitParam) THEN
            SET currstatusVar = 1;
        END IF;

        IF (speedParam < overspeedLimitParam) THEN
            SET currstatusVar = 0;
        END IF;

        IF (lastupdatedVar > last_checkVar) THEN
        BEGIN

            IF (last_statusVar = currstatusVar AND countVar < 5) THEN
                SET countVar = countVar + 1;
            ELSE
                SET countVar = 1;
            END IF;

            UPDATE  overspeedalert 
            Set     `count` = countVar
                    ,`last_status` = currstatusVar
            WHERE   vehicleid = vehicleIdParam 
            AND     customerno = custnoParam;

        END;
        END IF;

        Update  overspeedalert 
        SET     last_check = lastupdatedVar 
        WHERE   vehicleid = vehicleIdParam 
        AND     customerno = custnoParam;

        IF (currstatusVar = 1 AND countVar = 5 AND email_statusVar = 0) THEN
        BEGIN
            SET overspeedMsg = @overspeedYesMsg;
            SET isOverspeed = 1;
        END;
        END IF;
        
        IF (currstatusVar = 0 AND countVar = 5 AND email_statusVar = 1) THEN    
        BEGIN
            SET overspeedMsg = @overspeedNormalMsg;
            SET isOverspeed = 0;
        END;
        END IF;

        IF (overspeedMsg != '') THEN
        BEGIN
            INSERT INTO comqueue(customerno
                    , vehicleid
                    , devlat
                    , devlong
                    , `type`
                    , `status`
                    , message
                    , timeadded)
            VALUES(custnoParam
                    , vehicleidParam
                    , devicelatParam
                    , devicelongParam
                    , @overspeedAlertType
                    , overspeedStatusParam
                    , overspeedMsg
                    , todaysDate);

            UPDATE  eventalerts
            SET     overspeed =	isOverspeed
            WHERE   vehicleid =	vehicleIdParam
            AND     customerno = custnoParam;

            Update  overspeedalert 
            Set     `count` = 0
                    , status = isOverspeed 
            WHERE   vehicleid = vehicleIdParam
            AND     customerno = custnoParam;

            IF isOverspeed = 1 THEN
            BEGIN
                UPDATE  dailyreport
                SET 	overspeed = overspeed + 1
                WHERE 	vehicleid = vehicleIdParam
                AND 	customerno = custnoParam;
            END;
            END IF;
        END;
        END IF;
       
    COMMIT;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_po` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_po`( 
    IN pono VARCHAR(30)
    ,IN podate DATE
    ,IN poamount INT
    ,IN poexpiry DATE
    ,IN description VARCHAR(50)
    ,IN customerno INT
    ,IN createdby INT
    ,IN createdon DATETIME
    ,IN updatedby INT
    ,IN updatedon DATETIME
)
BEGIN
INSERT INTO po
(
    pono
    ,podate
    ,poamount
    ,poexpiry
    ,description
    ,customerno
    ,createdby
    ,createdon
    ,updatedby
    ,updatedon
)VALUES(
pono
    ,podate
    ,poamount
    ,poexpiry
    ,description
    ,customerno
    ,createdby
    ,createdon
    ,updatedby
    ,updatedon
)
;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_role` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_role`( 
     IN rolename varchar(50)
    , IN parentid INT
    , IN moduleid INT
    , IN custno INT
    , IN todaysdate DATETIME
    , IN userid INT
    , OUT currentroleid INT
)
BEGIN
    INSERT INTO `role`(
                        role
                        , parentroleid
                        , moduleid
                        , customerno
                        , created_on
                        , updated_on
                        , created_by
                        , updated_by
                    )
    VALUES ( 
            rolename
            , parentid
            , moduleid
            , custno
            , todaysdate
            , todaysdate
            , userid
            , userid
            );
            
    SET currentroleid = LAST_INSERT_ID();

    IF(parentid IS NOT NULL && parentid != 0) THEN
            Update role
            SET     parentroleid = currentroleid
            Where   parentroleid = parentid 
            AND id NOT IN(0, currentroleid);
    END IF;

    /* Re-sequencing hierarachy */
    CALL sequence_role(custno);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_roledefault_menu` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_roledefault_menu`(
IN `moduleidparam` INT, 
IN `customernoparam` INT, 
IN `todaysdate` DATETIME, 
IN `roleidparam` INT, 
IN `createdbyparam` INT 
)
BEGIN

INSERT INTO role_menumapping (menuid,roleid,customerno,created_by,created_on)
SELECT menuid,roleidparam,customernoparam,createdbyparam,todaysdate FROM menu_master where moduleid=moduleidparam AND isdeleted=0 OR customerno=customernoparam ;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_routecheckpoint` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_routecheckpoint`( 
	IN routemasterid INT	  
	,IN fromlocationid INT
    , IN tolocationid INT
    , IN distance INT
	, IN customerno INT
    , IN todaysdate DATETIME
    , IN userid INT
    , OUT currentroutecheckpointid INT
	)
BEGIN
	INSERT INTO routecheckpoint(
							routemasterid
                            , fromlocationid
                            , tolocationid
                            , distance
                            , customerno
							, created_on
							, updated_on
                            , created_by
                            , updated_by
						)
	VALUES ( 
				routemasterid
				, fromlocationid
				, tolocationid
				, distance
				, customerno
				, todaysdate
				, todaysdate
                , userid
                , userid
			);
            
	SET currentroutecheckpointid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_routemaster` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_routemaster`( 
	IN routename VARCHAR(20)
	,IN routedescription VARCHAR(50)
	, IN fromlocationid INT
    , IN tolocationid INT
    , IN distance INT
    , IN travellingtime INT
	, IN customerno INT
    , IN todaysdate DATETIME
    , IN userid INT
    , OUT currentroutemasterid INT
	)
BEGIN
	INSERT INTO routemaster(
							routename
				, routedescription                            
				, fromlocationid
                            , tolocationid
                            , distance
                            , travellingtime
                            , customerno
							, created_on
							, updated_on
                            , created_by
                            , updated_by
						)
	VALUES ( 
				routename
				, routedescription				
				, fromlocationid
				, tolocationid
				, distance
                , travellingtime
				, customerno
				, todaysdate
				, todaysdate
                , userid
                , userid
			);
            
	SET currentroutemasterid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_shipment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_shipment`(
	IN shipmentNoParam BIGINT ,
	IN pickupDateParam DATE,
	IN pickupAddressParam VARCHAR(100),
	IN pickupPincodeParam INT,
	IN deliveryDateParam DATE,
	IN deliveryAddressParam VARCHAR(100),
	IN deliveryPincodeParam INT,
	IN clientIdParam INT,
	IN awbNoParam VARCHAR(25),
	IN classificationIdParam INT,
	IN vendorIdParam INT,
	IN vehicleIdParam INT,
	IN vehicleNoParam VARCHAR(25),
	IN quantityParam INT,
	IN weightParam DECIMAL(8,3),
	IN volumeParam DECIMAL(8,3),
	IN statusIdParam INT,
	IN remarkIdParam INT,
	IN actualDeliveryDateParam DATE,
	IN pickupQuantityParam DECIMAL(8,2),
	IN pickupWeightParam DECIMAL(8,2),
	IN deliveryQuantityParam DECIMAL(8,2),
	IN deliveryWeightParam DECIMAL(8,2),
	IN billingIdParam INT,
	IN variableIdParam INT,
	IN vehTypeIdParam INT,
	IN commentsParam VARCHAR(200),
	IN customerNoParam int,
	IN userid int,
    IN todaysdate datetime,    
	OUT currentShipmentId INT
)
BEGIN
	DECLARE varVehicleId INT ;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
	END;
	
	START TRANSACTION;

		IF(customerNoParam = 0 OR customerNoParam = '') THEN
			SET customerNoParam = NULL;
        END IF;	

		IF(vendorIdParam = 0 OR vendorIdParam = '') THEN
			SET vendorIdParam = NULL;
        END IF;
		
		IF(vehicleIdParam = 0 OR vehicleIdParam = '') THEN
			SET vehicleIdParam = NULL;
        END IF;	
		
		
		IF(vendorIdParam IS NOT NULL AND vehicleIdParam IS NULL AND vehicleNoParam IS NOT NULL) THEN 
			SELECT vehicleId INTO varVehicleId 
			FROM vehicles
			WHERE trim(vehicleNo) = trim(vehicleNoParam) AND customerNo = customerNoParam AND isDeleted = 0 LIMIT 1;
		
			IF(varVehicleId IS NULL ) THEN 
				INSERT INTO vehicles (
				vehicleNo,
				vendorId,
				customerNo,
				createdBy,
				createdOn
				) VALUES(
				vehicleNoParam,
				vendorId,
				customerNoParam,
				userid,
				todaysdate
				);
				SET varVehicleId = LAST_INSERT_ID();
			
			END IF;
			
		ELSE 
			SET varVehicleId = vehicleIdParam;
		END IF;
	
		
		IF (customerNoParam IS NOT NULL) THEN 
			INSERT INTO shipment(
				shipmentNo,
				pickupDate,
				pickupAddress,
				pickupPincode,
				deliveryDate,
				deliveryAddress,
				deliveryPincode,
				clientId,
				awbNo,
				classificationId,
				vendorId,
				vehicleId,
				quantity,
				weight,
				volume,
				statusId,
				remarkId,
				actualDeliveryDate,
				pickupQuantity,
				pickupWeight,
				deliveryQuantity,
				deliveryWeight,
				billingtype,
				variableType,
				vehTypeId,
				comments,
				customerno,
				createdBy,
				createdOn,
				updatedBy,
				updatedOn
			) VALUES (
				shipmentNoParam,
				pickupDateParam,
				pickupAddressParam,
				pickupPincodeParam,
				deliveryDateParam,
				deliveryAddressParam,
				deliveryPincodeParam,
				clientIdParam,
				awbNoParam,
				classificationIdParam,
				vendorIdParam,
				varVehicleId,
				quantityParam,
				weightParam,
				volumeParam,
				statusIdParam,
				remarkIdParam,
				actualDeliveryDateParam,
				pickupQuantityParam,
				pickupWeightParam,
				deliveryQuantityParam,
				deliveryWeightParam,
				billingIdParam,
				variableIdParam,
				vehTypeIdParam,
				commentsParam,
				customerNoParam,
				userid,
				todaysdate,
				userid,
				todaysdate
			);	
			SET currentShipmentId = LAST_INSERT_ID();
		END IF;

	COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_sku` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_sku`( 
	IN skucode varchar(100)
	, IN sku_description varchar(250)
	, IN type varchar(25)
	, IN volume float (6,2)
	, IN weight float (6,2)
	, IN customerno INT
	, IN todaysdate DATETIME
    , IN userid INT
    , OUT currentskuid INT
)
BEGIN
	INSERT INTO sku 
				(
					skucode
					, sku_description
					, skutypeid
					, volume
					, weight
					, customerno
					, created_on
					, updated_on
                    , created_by
                    , updated_by
				) 
	VALUES 		(
					skucode
					, sku_description
					, type
					, volume
					, weight
					, customerno
					, todaysdate
					, todaysdate
                    , userid
                    , userid
				);

        
	SET currentskuid = LAST_INSERT_ID();
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_smslog` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_smslog`(
IN mobilenoparam VARCHAR(10)
, IN messageparam VARCHAR(250)
, IN responseparam VARCHAR(250)
, IN vehicleidparam INT
, IN useridparam INT
, IN customernoparam INT
, IN isSmsSentParam TINYINT(1)
, IN todaysdate DATETIME
, IN moduleidparam TINYINT(1)
, IN cqidParam INT(11)
, OUT smsid INT
)
BEGIN

INSERT INTO smslog (mobileno
                    , message
                    , response
                    , vehicleid
                    , userid
                    , moduleid	
                    , customerno
                    , issmssent
                    , inserted_datetime
                    , cqid
                    ) 
		VALUES (
                    mobilenoparam
                    , messageparam
                    , responseparam
                    , vehicleidparam
                    , useridparam
                    , moduleidparam
                    , customernoparam
                    , isSmsSentParam
                    , todaysdate
                    , cqidParam
                );
SET smsid = LAST_INSERT_ID();
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_start_trip` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_start_trip`( 
	IN 	driverid INT(11)
	, IN trip_start DATETIME
	, IN start_odometer BIGINT(20)
	, IN start_lat FLOAT
	, IN start_long FLOAT
	, IN createdby INT(11)
	, IN  createdon DATETIME
    , OUT currenttripid INT
)
BEGIN
	INSERT INTO trip_driver 
				(
					driverid 
					, trip_start 
					, start_odometer 
					, start_lat 
					, start_long 
					, createdby 
					, createdon 
					
				) 
	VALUES 		(
					driverid 
					, trip_start 
					, start_odometer 
					, start_lat 
					, start_long 
					, createdby 
					, createdon 
				);

        
	SET currenttripid = LAST_INSERT_ID();
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_tax_invoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_tax_invoice`( 
     IN invnoParam VARCHAR(40)
    ,IN customernoParam INT(11)
    ,IN ledgeridParam INT(11)
    ,IN inv_dateParam DATE
    ,IN inv_amtParam float
    ,IN statusParam VARCHAR(40)
    ,IN pending_amtParam float
    ,IN taxnameParam VARCHAR(40)
    ,IN cgstParam float
    ,IN sgstParam float
    ,IN igstParam float
    ,IN duedateParam DATE
    ,IN quantityParam INT(11)
    ,IN todaysdateParam DATETIME
    ,IN productidParam INT(11)
    ,IN startdateParam DATE
    ,IN enddateParam DATE
    ,IN miscParam VARCHAR(255)
    ,IN uidlistParam VARCHAR(255)
    ,OUT isexecutedOut TINYINT(1)
)
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            ROLLBACK;
          /*  GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
            @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
            SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
            SELECT @full_error;  */
            SET isexecutedOut = 0;
        END;

		SET isexecutedOut = 0;
        
        START TRANSACTION;
        BEGIN

            INSERT INTO invoice (`invoiceno`,
                `customerno`,
                `ledgerid`,
                `inv_date`,
                `inv_amt`,
                `status`,
                `pending_amt`,
                `tax`,
                `cgst`,
                `sgst`,
                `igst`,
                `inv_expiry`,
                `product_id`,
                `quantity`,
                `timestamp`,
                `start_date`,
                `end_date`,
                `is_mail_sent`,
                `misc`)
            VALUES (invnoParam
                ,customernoParam
                ,ledgeridParam
                ,inv_dateParam
                ,inv_amtParam
                ,statusParam
                ,pending_amtParam
                ,taxnameParam
                ,cgstParam
                ,sgstParam
                ,igstParam
                ,duedateParam
                ,productidParam
                ,quantityParam
                ,todaysdateParam
                ,startdateParam
                ,enddateParam
                ,1
                ,miscParam);

            UPDATE  `devices`
            SET     `device_invoiceno` = invnoParam
                    ,`inv_generatedate` = inv_dateParam
                    ,`start_date` = startdateParam
                    ,`end_date` = enddateParam
                    ,`expirydate` = duedateParam
            WHERE   find_in_set(`uid`,uidlistParam);

            SET isexecutedOut = 1;
        END;
        COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_transmitter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_transmitter`( 
    IN transmitterno VARCHAR(25)
    , IN teamid INT
    , IN customerno INT
    , IN trans_status INT
    , IN created_on DATETIME
    , IN created_by INT
    , IN comments VARCHAR(50)
)
BEGIN
INSERT INTO transmitter(
							transmitterno
                            ,teamid
                            ,comments
                            ,customerno
                            ,trans_status
                            ,created_on
                            ,updated_on
                            ,created_by
                            ,updated_by
                            
						)
                        VALUES(
							transmitterno
                            ,teamid
                            ,comments
                            ,customerno
                            ,trans_status
                            ,created_on
                            ,created_on
                            ,created_by
                            ,created_by
                        )
        ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_transporter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_transporter`( 
	IN transportercode VARCHAR (20)
	, IN transportername VARCHAR (50)
    , IN transportermail VARCHAR (150)
    , IN transportermobileno VARCHAR (50)
	, IN customerno INT
    , IN todaysdate DATETIME
    , IN userid INT
    , OUT currenttransporterid INT
	)
BEGIN
	INSERT INTO transporter(
							transportercode
                            , transportername
                            , transportermail
							, transportermobileno
                            , customerno
							, created_on
							, updated_on
                            , created_by
                            , updated_by
						)
	VALUES ( 
				transportercode
                , transportername
                , transportermail
				, transportermobileno
				, customerno
				, todaysdate
				, todaysdate
                , userid
                , userid
			);
            
	SET currenttransporterid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_transportershare` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_transportershare`( 
	IN transporterid INT
	, IN factoryid INT
	, IN zoneid INT
    , IN sharepercent decimal(6, 2)
	, IN customerno INT
    , IN todaysdate DATETIME
    , IN userid INT
    , OUT currenttransportershareid INT
	)
BEGIN
	INSERT INTO transportershare(
							transporterid
                            , factoryid
				, zoneid
                            , sharepercent
                            , customerno
							, created_on
							, updated_on
                            , created_by
                            , updated_by
						)
	VALUES ( 
				transporterid
                , factoryid
		, zoneid
                , sharepercent
				, customerno
				, todaysdate
				, todaysdate
                , userid
                , userid
			);
            
	SET currenttransportershareid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_trip_consignee` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_trip_consignee`(
    IN consigneeNameParam VARCHAR(50)
    , IN emailParam VARCHAR(50)
    , IN phoneParam VARCHAR(15)
    , IN chkPtIdParam INT
    , IN customerNoParam INT
    , OUT currentConsigneeId INT
    )
BEGIN
    DECLARE isConsigneeExists INT;

    SELECT consid
    INTO isConsigneeExists
    FROM tripconsignee
    WHERE TRIM(REPLACE(consigneename, " ", "")) = TRIM(REPLACE(REPLACE(UPPER(consigneeNameParam), " ", ""),"'",""))
    AND customerno = customerNoParam
    AND isdeleted = 0 LIMIT 1;


    IF(isConsigneeExists IS NULL)THEN
        INSERT INTO tripconsignee(
            consigneename
            , email
            , phone
            , checkpointid
            , customerno
        )
        VALUES (
            consigneeNameParam
            , emailParam
            , phoneParam
            , chkPtIdParam
            , customerNoParam
        );

        SET currentConsigneeId = LAST_INSERT_ID();

    ELSE
        SET currentConsigneeId = isConsigneeExists;
    END IF;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_trip_consignor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_trip_consignor`(
    IN consignorNameParam VARCHAR(50)
    , IN emailParam VARCHAR(50)
    , IN phoneParam VARCHAR(15)
    , IN chkPtIdParam INT
    , IN customerNoParam INT
    , OUT currentConsignorId INT
    )
BEGIN
    DECLARE isConsignorExists INT;

    SELECT consrid
    INTO isConsignorExists
    FROM tripconsignor
    WHERE TRIM(REPLACE(consignorname, " ", "")) = TRIM(REPLACE(REPLACE(UPPER(consignorNameParam), " ", ""),"'",""))
    AND customerno = customerNoParam
    AND isdeleted = 0 LIMIT 1;


    IF(isConsignorExists IS NULL)THEN
        INSERT INTO tripconsignor(
            consignorname
            , email
            , phone
            , checkpointid
            , customerno
        )
        VALUES (
            consignorNameParam
            , emailParam
            , phoneParam
            , chkPtIdParam
            , customerNoParam
        );

        SET currentConsignorId = LAST_INSERT_ID();

    ELSE
        SET currentConsignorId = isConsignorExists;
    END IF;



END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_trip_lr_mapping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_trip_lr_mapping`(
    IN tripIdParam INT
    , IN lrNoParam VARCHAR(25)
    , IN triplognoParam VARCHAR(20)
    , IN lrDateTimeParam DATETIME
    , IN consignorIdParam INT
    , IN consigneeIdParam INT
    , IN customerNoParam INT
    , IN userIdParam INT
    , IN todaysDate DATETIME
    )
BEGIN




        INSERT INTO triplrmapping(
            tripid
            , lrno
            , orderno
            , lrdatetime
            , lrconsignorid
            , lrconsigneeid
            , customerno
            , created_by
            , created_on
        )
        VALUES (
            tripIdParam
            , lrNoParam
            , triplognoParam
            , lrDateTimeParam
            , consignorIdParam
            , consigneeIdParam
            , customerNoParam
            , userIdParam
            , todaysDate
        );


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_vehicletype` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_vehicletype`( 
	IN vehiclecode VARCHAR (20)
	, IN vehicledescription VARCHAR (50)
, IN tid INT (11)
    , IN volume VARCHAR (50)
    , IN weight VARCHAR (15)
	, IN customerno INT
    , IN todaysdate DATETIME
    , IN userid INT
    , OUT currentvehicletypeid INT
	)
BEGIN
	INSERT INTO vehicletype(
							vehiclecode
                            , vehicledescription
		 	    , skutypeid
                            , volume
							, weight
                            , customerno
							, created_on
							, updated_on
                            , created_by
                            , updated_by
						)
	VALUES ( 
				vehiclecode
                , vehicledescription
		, tid
                , volume
				, weight
				, customerno
				, todaysdate
				, todaysdate
                , userid
                , userid
			);
            
	SET currentvehicletypeid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_vendor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_vendor`(
	IN vendorCodeParam VARCHAR(20) ,
	IN vendorNameParam VARCHAR(50),
	IN contactPersonParam VARCHAR(50),
	IN emailParam VARCHAR(100),
	IN phoneParam VARCHAR(15),
	IN serviceIdParam INT, 
	IN serviceCostParam DECIMAL(9,2),
	IN customerNoParam int,
	IN userid int,
    IN todaysdate datetime,    
	OUT currentVendorId INT
)
BEGIN
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
	END;
	
	START TRANSACTION;

		IF(customerNoParam = 0 OR customerNoParam = '') THEN
			SET customerNoParam = NULL;
        END IF;	
		
		IF (customerNoParam IS NOT NULL) THEN 
			INSERT INTO vendors(
				vendorCode,
				vendorName,
				contactPerson,
				email,
				phone,
				serviceId,
				serviceCost,
				customerno,
				createdBy,
				createdOn
			) VALUES (
				vendorCodeParam,
				vendorNameParam,
				contactPersonParam,
				emailParam,
				phoneParam,
				serviceIdParam,
				serviceCostParam,
				customerNoParam,
				userid,
				todaysdate
			);	
			SET currentVendorId = LAST_INSERT_ID();
		END IF;

	COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_zone` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `insert_zone`( 
	IN zonename VARCHAR (25)
	, IN customerno INT
    , IN todaysdate DATETIME
    , IN userid INT 
    , OUT currentzoneid INT
	)
BEGIN

	INSERT INTO zone(
						zonename
						, customerno
						, created_on
						, updated_on
                        , created_by
                        , updated_by
					)
	VALUES ( 
				zonename
				, customerno
				, todaysdate
				, todaysdate
                , userid
                , userid
			);
            
	SET currentzoneid = LAST_INSERT_ID();

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `listener_insertupdate_alerts` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `listener_insertupdate_alerts`(
	IN timeDiffParam INT
	, IN devicelatParam DECIMAL(9,6)
	, IN devicelongParam DECIMAL(9,6)
	, IN tamperParam TINYINT(1) UNSIGNED
	, IN tamperStatusParam TINYINT(1) UNSIGNED
	, IN powercutParam TINYINT(1) UNSIGNED
	, IN powercutStatusParam TINYINT(1) UNSIGNED
	, IN speedParam TINYINT UNSIGNED
	, IN overspeedLimitParam TINYINT UNSIGNED
	, IN overspeedStatusParam TINYINT(1) UNSIGNED
	, IN commandkeyParam TINYINT(1) UNSIGNED
	, IN statusParam VARCHAR(2)
	, IN acsensorParam TINYINT(1) UNSIGNED
	, IN is_ac_oppParam TINYINT(1) UNSIGNED
	, IN acStatusParam TINYINT(1) UNSIGNED
	, IN acCountParam TINYINT(1) UNSIGNED
	, IN acTimeParam DATETIME
	, IN digitalioParam TINYINT(1) UNSIGNED
	, IN digitalioupdatedParam DATETIME
	, IN doorsensorParam TINYINT(1) UNSIGNED
	, IN is_door_oppParam TINYINT(1) UNSIGNED
	, IN door_statusParam TINYINT(1) UNSIGNED
	, IN swvParam VARCHAR(15)
	, IN analog4Param INT
	, IN simcardnoParam VARCHAR(20)
	, IN vehicleNoParam VARCHAR(40)
	, IN vehicleidParam INT
	, IN custnoParam INT
	, IN todaysDate DATETIME
	, OUT isUpdated TINYINT(1)
)
BEGIN
	DECLARE tamperMsg VARCHAR(100) DEFAULT '';
	DECLARE isTampered TINYINT(1) DEFAULT NULL;

	DECLARE powercutMsg VARCHAR(100) DEFAULT '';
	DECLARE isPowercut TINYINT(1) DEFAULT NULL;

	DECLARE overspeedMsg VARCHAR(100) DEFAULT '';
	DECLARE isOverspeed TINYINT(1) DEFAULT NULL;

	DECLARE isVehicleImmobilized TINYINT(1) DEFAULT NULL;

	DECLARE acMsg VARCHAR(100) DEFAULT '';
	DECLARE isAcOn TINYINT(1) DEFAULT NULL;
	DECLARE acUsageInMins INT;

	DECLARE doorMsg VARCHAR(100) DEFAULT '';
	DECLARE isDoorOpen TINYINT(1) DEFAULT NULL;
	DECLARE doorSelect INT;
	DECLARE doorTime DATETIME;
	DECLARE isExtBattDoorVar, doorDigitalIOVar TINYINT(1);
	DECLARE extBattAnalogValue INT;

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
		SET isUpdated = 0;
	END;
	/*
		@Var are loosely typed variables that may be initialized somewhere in a session and keep their value until the session ends
		According to stackoverflow article, they are similar to static variables and have scope upto the program ends.
		We are using them to define the SMS message templates and other static values like event type.
	*/
	SET @tamperYesMsg = CONCAT(vehicleNoParam, ' underwent tampering');
	SET @tamperNormalMsg = CONCAT(vehicleNoParam, ' is back to normal');
	SET @tamperAlertType = 7;

	SET @powercutYesMsg = CONCAT(vehicleNoParam, ' underwent powercut');
	SET @powercutNormalMsg = CONCAT(vehicleNoParam, ' regained power');
	SET @powercutAlertType = 6;

	SET @overspeedYesMsg = CONCAT(vehicleNoParam, ' oversped');
	SET @overspeedNormalMsg = CONCAT(vehicleNoParam, ' is running normal');
	SET @overspeedAlertType = 5;

	SET @acOnMsg = CONCAT(vehicleNoParam, ' has switched on AC at ');
	SET @acOffMsg = CONCAT(vehicleNoParam, ' has switched off AC at ');
	SET @acAlertType = 1;

	SET @doorOpenMsg = CONCAT(vehicleNoParam, ' has opened the door at ');
	SET @doorClosedMsg = CONCAT(vehicleNoParam, ' has closed the door at ');
	SET @doorAlertType = 16;

	SET @panicMsg =  CONCAT(vehicleNoParam, ' has sent a panic alarm. To immobilize, send ttysms,STOPV to ', simcardnoParam, '. To restart, send ttysms,STARTV');
	SET @panicAlertType = 15;

	IF digitalioupdatedParam = '0000-00-00 00:00:00' THEN
		SET digitalioupdatedParam = NULL;
	END IF;


	START TRANSACTION;
		/******************** <TAMPER> *********************/
		IF tamperParam = 1 AND tamperStatusParam = 0 THEN
			SET tamperMsg 	= 	@tamperYesMsg;
			SET isTampered  = 	1;
		ELSEIF tamperParam = 0 AND tamperStatusParam = 1 THEN
			SET tamperMsg 	= 	@tamperNormalMsg;
			SET isTampered  = 	0;
		END IF;
		IF tamperMsg != '' THEN
			BEGIN
				INSERT INTO comqueue
					(customerno, vehicleid, devlat, devlong, `type`, `status`, message, timeadded)
				VALUES
					(custnoParam, vehicleidParam, devicelatParam, devicelongParam, @tamperAlertType, tamperStatusParam, tamperMsg, todaysDate);

				UPDATE 	eventalerts
				SET 	tamper		= 	isTampered
				WHERE 	vehicleid	=	vehicleIdParam
				AND 	customerno	=	custnoParam;
			END;
		END IF;
		/******************** </TAMPER> *********************/

		/******************** <POWERCUT> *********************/
		IF powercutParam = 0 AND powercutStatusParam = 0 THEN
			SET powercutMsg 	= 	@powercutYesMsg;
			SET isPowercut 		= 	1;
		ELSEIF powercutParam = 1 AND powercutStatusParam = 1 THEN
			SET powercutMsg 	= 	@powercutNormalMsg;
			SET isPowercut 		= 	0;
		END IF;
		IF powercutMsg != '' THEN
			BEGIN
				INSERT INTO comqueue
					(customerno, vehicleid, devlat, devlong, `type`, `status`, message, timeadded)
				VALUES
					(custnoParam, vehicleidParam, devicelatParam, devicelongParam, @powercutAlertType, powercutStatusParam, powercutMsg, todaysDate);

				UPDATE 	eventalerts
				SET 	powercut	= 	isPowercut
				WHERE 	vehicleid	=	vehicleIdParam
				AND 	customerno	=	custnoParam;
			END;
		END IF;
		/******************** </POWERCUT> *********************/

		/******************** <OVERSPEED> *********************/
		IF speedParam >= overspeedLimitParam AND overspeedStatusParam = 0 THEN
			SET overspeedMsg 	= 	@overspeedYesMsg;
			SET isOverspeed		=	1;
		ELSEIF speedParam < overspeedLimitParam AND overspeedStatusParam = 1 THEN
			SET overspeedMsg 	= 	@overspeedNormalMsg;
			SET isOverspeed		=	0;
		END IF;
		IF overspeedMsg != '' THEN
			BEGIN
				INSERT INTO comqueue
					(customerno, vehicleid, devlat, devlong, `type`, `status`, message, timeadded)
				VALUES
					(custnoParam, vehicleidParam, devicelatParam, devicelongParam, @overspeedAlertType, overspeedStatusParam, overspeedMsg, todaysDate);

				UPDATE 	eventalerts
				SET 	overspeed	= 	isOverspeed
				WHERE 	vehicleid	=	vehicleIdParam
				AND 	customerno	=	custnoParam;

				IF isOverspeed = 1 THEN
					UPDATE 	dailyreport
					SET 	overspeed 	= 	overspeed + 1
					WHERE 	vehicleid 	=	vehicleIdParam
					AND 	customerno	=	custnoParam;
				END IF;
			END;
		END IF;
		/******************** </OVERSPEED> *********************/

		/******************** <IMMOBILIZER> *********************/
		IF commandkeyParam = 21 THEN
			#IMMOBILIZER - START
			SET isVehicleImmobilized	=	1;
		ELSEIF commandkeyParam = 20 THEN
			#IMMOBILIZER - STOP
			SET isVehicleImmobilized	=	0;
		END IF;
		IF isVehicleImmobilized IS NOT NULL THEN
			BEGIN
				UPDATE 	unit
				SET 	mobiliser_flag 	= 	isVehicleImmobilized
				WHERE 	vehicleid		=	vehicleIdParam
				AND 	customerno		=	custnoParam;
			END;
		END IF;
		/******************** </IMMOBILIZER> *********************/

		/******************** <AC SENSOR> *********************/
		IF acsensorParam = 1 AND statusParam != 'F'	AND digitalioupdatedParam IS NOT NULL THEN
			BEGIN
				IF digitalioParam = 0 and acStatusParam = 0 THEN
					BEGIN
						SET acCountParam	= 	acCountParam + 1;
						IF acCountParam = 1 THEN
							SET acTimeParam = todaysdate;
						ELSEIF acCountParam = 5 THEN
							SET acCountParam = 0;
							IF is_ac_oppParam = 0 THEN
								BEGIN
									SET acMsg 	= 	CONCAT(@acOnMsg, DATE_FORMAT(acTimeParam, '%I:%m %p'));
									SET isAcOn	=	1;
								END;
							ELSEIF is_ac_oppParam = 1 THEN
								BEGIN
									SET acMsg 	= 	CONCAT(@acOffMsg, DATE_FORMAT(acTimeParam, '%I:%m %p'));
									SET isAcOn	=	0;
								END;
							END IF;
						END IF;
					END;
				ELSEIF digitalioParam = 1 and acStatusParam = 1 THEN
					BEGIN
						SET acCountParam	= 	acCountParam + 1;
						IF acCountParam = 1 THEN
							SET acTimeParam = todaysdate;
						ELSEIF acCountParam = 5 THEN
							SET acCountParam = 0;
							IF is_ac_oppParam = 0 THEN
								BEGIN
									SET acMsg 	= 	CONCAT(@acOffMsg, DATE_FORMAT(acTimeParam, '%I:%m %p'));
									SET isAcOn	=	0;
								END;
							ELSEIF is_ac_oppParam = 1 THEN
								BEGIN
									SET acMsg 	= 	CONCAT(@acOnMsg, DATE_FORMAT(acTimeParam, '%I:%m %p'));
									SET isAcOn	=	1;
								END;
							END IF;
						END IF;
					END;
				ELSEIF (digitalioParam = 0 and acStatusParam = 1) OR (digitalioParam = 1 and acStatusParam = 0) THEN
					BEGIN
						SET acCountParam = 0;
						SET acTimeParam = todaysdate;
					END;
				END IF;

				IF digitalioParam = 0 OR digitalioParam = 1 OR acStatusParam = 0 OR acStatusParam = 1 THEN
					BEGIN
						IF acMsg != "" THEN
							BEGIN
								INSERT INTO comqueue
								(customerno, vehicleid, devlat, devlong, `type`, `status`, message, timeadded)
								VALUES
								(custnoParam, vehicleidParam, devicelatParam, devicelongParam, @acAlertType, isAcOn, acMsg, todaysDate);

								IF isAcOn = 0 THEN
									BEGIN
										SET acUsageInMins = CAST(ROUND(TIMESTAMPDIFF(MINUTE, digitalioupdatedParam, todaysDate)) AS SIGNED);
										UPDATE 	dailyreport
										SET 	acusage = acusage + acUsageInMins
										WHERE 	vehicleid = vehicleidParam
										AND 	customerno = custnoParam;
									END;
								END IF;

								UPDATE 	eventalerts
								SET 	ac = NOT acStatusParam
								WHERE 	vehicleid = vehicleidParam
								AND 	customerno = custnoParam;

								UPDATE 	unit
								SET 	digitalioupdated = acTimeParam
								WHERE 	vehicleid = vehicleidParam
								AND 	customerno = custnoParam;
							END;
						END IF;

						UPDATE 	eventalerts
						SET 	ac_count = acCountParam
								, ac_time = acTimeParam
						WHERE 	vehicleid = vehicleidParam
						AND 	customerno = custnoParam;
					END;
				END IF;
			END;
		END IF;
		/******************** </AC SENSOR> *********************/

		/******************** <DOOR SENSOR> *********************/
		IF doorsensorParam = 1 and statusParam != 'F' THEN
			BEGIN
				/* Door sensor value comes as analog value in external battery for some units */
				/* If external battery gives the door value and if door digital io is 1, then door is open */
				SET isExtBattDoorVar = 0;
				SELECT 	isDoorExt, door_digitalio
				INTO	isExtBattDoorVar, doorDigitalIOVar
				FROM 	unit
				WHERE 	vehicleid = vehicleidParam
				AND 	customerno = custnoParam
				LIMIT 	1;

				IF swvParam = 'E10.14TCAD' THEN
					SET doorSelect = analog4;
				ELSEIF isExtBattDoorVar = 1 THEN
					SET doorSelect = CAST(doorDigitalIOVar AS SIGNED);
				ELSE
					SET doorSelect = CAST(digitalioParam AS SIGNED);
				END IF;

				IF doorSelect = 0 AND door_statusParam = 0 THEN
					BEGIN
						SET doorTime = todaysDate;
						IF is_door_oppParam = 0 THEN
							SET doorMsg = CONCAT(@doorClosedMsg, DATE_FORMAT(doorTime, '%I:%m %p'));
							SET isDoorOpen = 0;
						ELSEIF is_door_oppParam = 1 THEN
							SET doorMsg = CONCAT(@doorOpenMsg, DATE_FORMAT(doorTime, '%I:%m %p'));
							SET isDoorOpen = 1;
						END IF;
					END;
				ELSEIF doorSelect = 1 and door_statusParam = 1 THEN
					BEGIN
						SET doorTime = todaysDate;
						IF is_door_oppParam = 0 THEN
							SET doorMsg = CONCAT(@doorOpenMsg, DATE_FORMAT(doorTime, '%I:%m %p'));
							SET isDoorOpen = 1;
						ELSEIF is_door_oppParam = 1 THEN
							SET doorMsg = CONCAT(@doorClosedMsg, DATE_FORMAT(doorTime, '%I:%m %p'));
							SET isDoorOpen = 0;
						END IF;
					END;
				END IF;

				IF doorSelect = 0 OR doorSelect = 1 OR door_statusParam = 0 OR door_statusParam = 1 THEN
					BEGIN
						IF doorMsg != "" THEN
							BEGIN
								INSERT INTO comqueue
								(customerno, vehicleid, devlat, devlong, `type`, `status`, message, timeadded)
								VALUES
								(custnoParam, vehicleidParam, devicelatParam, devicelongParam, @doorAlertType, isDoorOpen, doorMsg, todaysDate);

								UPDATE 	eventalerts
								SET 	door = NOT door_statusParam
								WHERE 	vehicleid = vehicleidParam
								AND 	customerno = custnoParam;

								UPDATE 	unit
								SET 	door_digitalioupdated = doorTime
								WHERE 	vehicleid = vehicleidParam
								AND 	customerno = custnoParam;
							END;
						END IF;

						UPDATE 	eventalerts
						SET 	door_time = doorTime
						WHERE 	vehicleid = vehicleidParam
						AND 	customerno = custnoParam;
					END;
				END IF;
			END;
		END IF;

		/******************** </DOOR SENSOR> *********************/

		/******************** <PANIC> *********************/

		IF statusParam = 'N' AND simcardnoParam IS NOT NULL AND simcardnoParam != '' THEN
			INSERT INTO comqueue
			(customerno, vehicleid, devlat, devlong, `type`, `status`, message, timeadded)
			VALUES
			(custnoParam, vehicleidParam, devicelatParam, devicelongParam, @panicAlertType, 1, @panicMsg, todaysDate);
		END IF;

		/******************** </PANIC> *********************/

		SET isUpdated = 1;
	COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `listener_insert_trip_droppoints` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `listener_insert_trip_droppoints`(
    IN vehicleIdParam INT
    ,IN latParam DECIMAL(9,6)
    ,IN lngParam DECIMAL(9,6)
    ,IN isDroppointParam TINYINT(1)
    ,IN isTripEndParam TINYINT
    ,IN customerNoParam INT
    ,IN todaysDateParam DATETIME
    ,OUT insertedIdParam INT
)
BEGIN
    DECLARE tripIdVar, elixirUserIdVar INT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        /*
        GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error;
        */
        SET insertedIdParam = 0;
    END;

    SELECT  tripid
    INTO    tripIdVar
    FROM    tripdetails
    WHERE   vehicleid = vehicleIdParam
    AND     customerno = customerNoParam
    AND     tripstatusid != 10
    AND     isdeleted = 0
    AND     is_tripend = 0
    ORDER BY tripid DESC
    LIMIT 1;

    SELECT  userId
    INTO    elixirUserIdVar
    FROM    user
    WHERE   TRIM(role) = 'elixir'
    AND     customerno = customerNoParam;

    START TRANSACTION;
        IF tripIdVar IS NOT NULL THEN
            IF isDroppointParam = 1 THEN
                BEGIN
                    INSERT INTO tripdroppoints
                    (
                        tripid
                        ,vehicleid
                        ,lat
                        ,lng
                        ,customerno
                        ,created_on
                        ,updated_on
                    )
                    VALUES
                    (
                        tripIdVar
                        ,vehicleIdParam
                        ,latParam
                        ,lngParam
                        ,customerNoParam
                        ,todaysDateParam
                        ,todaysDateParam
                    );

                    SET insertedIdParam = LAST_INSERT_ID();
                END;
            END IF;
            IF isTripEndParam = 1 THEN
                BEGIN
                    UPDATE tripdetails
                    SET tripstatusid = 10
                        , statusdate = todaysDateParam
                        , updatedtime = todaysDateParam
                    WHERE tripid = tripIdVar;

                    INSERT INTO tripYardLog
                    (
                        vehicleId,
                        tripId,
                        checkpointId,
                        customerNo,
                        createdBy,
                        createdOn,
                        updatedBy,
                        updatedOn
                    )
                    SELECT  vehicleIdParam
                            , tripIdVar
                            , checkpointid
                            , customerNoParam
                            , elixirUserIdVar
                            , todaysDateParam
                            , elixirUserIdVar
                            , todaysDateParam
                    FROM    checkpointmanage
                    WHERE   vehicleid = vehicleIdParam
                    AND     customerno = customerNoParam
                    AND     isdeleted = 0;

                END;
            END IF;
        END IF;
    COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `listener_update_device_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `listener_update_device_details`(
	 IN uidParam INT
	, IN vehicleidParam INT
	, IN devicelatParam DECIMAL(9,6)
	, IN devicelngParam DECIMAL(9,6)
	, IN altitudeParam INT UNSIGNED
	, IN dirChangeParam INT UNSIGNED
	, IN satvParam TINYINT UNSIGNED
	, IN inbattParam INT UNSIGNED
	, IN hwvParam VARCHAR(5)
	, IN swvParam VARCHAR(15)
	, IN msgidParam INT UNSIGNED
	, IN statusParam VARCHAR(2)
	, IN ignitionParam TINYINT(1)
	, IN powercutParam TINYINT(1)
	, IN tamperParam TINYINT(1) UNSIGNED
	, IN onoffParam TINYINT(1) UNSIGNED
	, IN gpsfixedParam VARCHAR(2)
	, IN gsmstrengthParam TINYINT UNSIGNED
	, IN gsmregisterParam TINYINT(1) UNSIGNED
	, IN gprsregisterParam TINYINT(1) UNSIGNED
	, IN extbattParam INT UNSIGNED
	, IN odometerParam BIGINT
	, IN stoppageodometerParam BIGINT
	, IN stoppageflagParam TINYINT(1) UNSIGNED
	, IN curspeedParam TINYINT UNSIGNED
	, IN analog1Param INT
	, IN analog2Param INT
	, IN analog3Param INT
	, IN analog4Param INT
	, IN digitalioParam SMALLINT
	, IN commandkeyParam TINYINT UNSIGNED
	, IN commandkeyvalParam VARCHAR(30)
	, IN alterremarkParam TEXT
	, IN custnoParam INT
	, IN todaysdate DATETIME
	, OUT isUpdated TINYINT(1)
)
BEGIN
	DECLARE useFuelSensorVar, fuelsensorVar, isDoorExtVar, doorDigitalIOVar TINYINT(1);
	DECLARE fuelBalanceVar, oldFuelBalanceVar, fuelMinVoltVar, fuelMaxVoltVar DECIMAL(6,2);
	DECLARE fuelMaxVoltCapacityVar, fuelPrevAnalogValue, fuelAnalogValue INT;
	DECLARE fuelAnalogColumnVar VARCHAR(20);
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
		SET isUpdated = 0;
	END;

	IF onoffParam = 1 and (custnoParam = 69 or custnoParam = 73 or custnoParam = 81) THEN
		BEGIN
			INSERT INTO chk_offline(customerno,lastupdated,vehicleid,latitude,longitude)
			VALUES  (custnoParam,todaysdate,vehicleidParam, devicelatParam,devicelngParam);
		END;
	END IF;

	SELECT  use_fuel_sensor
	INTO    useFuelSensorVar
	FROM    customer
	WHERE   customerno = custnoParam
	LIMIT 1;

	SELECT 	isDoorExt
	INTO	isDoorExtVar
	FROM 	unit
	WHERE	uid = uidParam
	LIMIT	1;

	/* Assuming default door is closed for doorDigital value 0 */
	SET doorDigitalIOVar = 0;
	IF isDoorExtVar = 1 THEN
		IF FLOOR(extbattParam / 100) = 0 THEN
			/*
				4 digit value - door close , 2 digit value - door open.
				Hence, int division would be 0 in case door is open.
			*/
			SET doorDigitalIOVar = 1;
		END IF;
	END IF;
	START TRANSACTION;
		SET fuelBalanceVar = 0;
		IF useFuelSensorVar = 1 THEN
		BEGIN
			SELECT  fuelsensor, fuelMaxVoltCapacity, fuel_min_volt, fuel_max_volt, old_fuel_balance
			INTO    fuelsensorVar, fuelMaxVoltCapacityVar, fuelMinVoltVar, fuelMaxVoltVar, oldFuelBalanceVar
			FROM    unit u
			INNER JOIN vehicle v ON u.uid = v.uid
			WHERE   u.uid = uidParam
			AND     u.customerno = custnoParam
			AND     v.customerno = custnoParam
			LIMIT 1;
			/*SELECT fuelsensorVar, fuelMaxVoltCapacityVar, fuelMinVoltVar, fuelMaxVoltVar, oldFuelBalanceVar;*/
			IF fuelsensorVar IS NOT NULL AND fuelsensorVar >= 1 AND fuelsensorVar <= 4 THEN
				/*
				SET @fuelPrevAnalogValue = '';
				SET fuelAnalogColumnVar = CONCAT('analog', fuelsensorVar);
				SET @sqlQuery = CONCAT('SELECT ', fuelAnalogColumnVar, ' INTO @fuelPrevAnalogValue FROM unit WHERE uid = ', uidParam);
				PREPARE stmt FROM @sqlQuery;
				EXECUTE stmt;
				DEALLOCATE PREPARE stmt;
				SET fuelPrevAnalogValue = @fuelPrevAnalogValue;
				*/
				IF fuelsensorVar = 1 THEN
					SET fuelAnalogValue = analog1Param;
				ELSEIF fuelsensorVar = 2 THEN
					SET fuelAnalogValue = analog2Param;
				ELSEIF fuelsensorVar = 3 THEN
					SET fuelAnalogValue = analog3Param;
				ELSEIF fuelsensorVar = 4 THEN
					SET fuelAnalogValue = analog4Param;
				END IF;
				IF  fuelMaxVoltCapacityVar IS NOT NULL AND fuelMinVoltVar IS NOT NULL AND fuelMaxVoltVar IS NOT NULL
					AND fuelMinVoltVar > 0 AND fuelMaxVoltVar > 0 AND fuelMinVoltVar != fuelMaxVoltVar THEN
					BEGIN
						DECLARE floorNValue INT;
						DECLARE voltageValue, floorFuelVoltageValue, voltageNthPart DECIMAL(6,2);
						DECLARE fuelInaccuracyPercentVar TINYINT;

						SET voltageValue = fuelAnalogValue / 100;
						IF voltageValue >= fuelMaxVoltVar THEN
							SET voltageValue = fuelMaxVoltVar;
						ELSEIF voltageValue <= fuelMinVoltVar THEN
							SET voltageValue = fuelMinVoltVar;
						END IF;

						SET fuelInaccuracyPercentVar = 2;
						SET voltageNthPart = TRUNCATE((fuelMaxVoltVar - fuelMinVoltVar) / (100 / fuelInaccuracyPercentVar), 2);
						SET floorNValue = FLOOR((voltageValue - fuelMinVoltVar) / voltageNthPart);
						SET floorFuelVoltageValue = (floorNValue * voltageNthPart) + fuelMinVoltVar;
						SET fuelBalanceVar = (fuelMaxVoltCapacityVar / (fuelMaxVoltVar - fuelMinVoltVar)) * (floorFuelVoltageValue - fuelMinVoltVar);
						/*SELECT fuelAnalogValue, voltageNthPart, floorNValue,floorFuelVoltageValue,fuelBalanceVar;*/
					END;
				END IF;

			END IF;
		END;
		END IF;

		IF gpsfixedParam = 'A' THEN
			BEGIN
				UPDATE  devices
				SET     devicelat = devicelatParam
						,devicelong = devicelngParam
						,altitude = altitudeParam
						,directionchange = dirChangeParam
				WHERE   uid = uidParam;

				UPDATE  vehicle
				SET     nodata_alert = 0
						,extbatt = extbattParam
						,odometer = odometerParam
						,curspeed = curspeedParam
						,fuel_balance = fuelBalanceVar
				WHERE   uid = uidParam;
			END;
		END IF;

		UPDATE  devices
		SET     satv = satvParam
				,inbatt = inbattParam
				,hwv = hwvParam
				,swv = swvParam
				,msgid = msgidParam
				,`status` = statusParam
				,ignition = ignitionParam
				,powercut = powercutParam
				,tamper = tamperParam
				,`online/offline`= onoffParam
				, gpsfixed = gpsfixedParam
				, gsmstrength = gsmstrengthParam
				, gsmregister = gsmregisterParam
				, gprsregister = gprsregisterParam
				, lastupdated = todaysDate
		WHERE   uid = uidParam;

		UPDATE  vehicle
		SET     lastupdated = todaysdate
				,fuel_balance = fuelBalanceVar
		WHERE   uid = uidParam;

		UPDATE  unit
		SET     analog1 = analog1Param
				,analog2 = analog2Param
				,analog3 = analog3Param
				,analog4 = analog4Param
				,digitalio = digitalioParam
				,door_digitalio = doorDigitalIOVar
				,commandkey = commandkeyParam
				,commandkeyval = commandkeyvalParam
				,remark = 0
				,alterremark = alterremarkParam
				,issue_type = 0
		WHERE   uid = uidParam;

		IF gpsfixedParam = 'A' THEN
		BEGIN
			IF (odometerParam - stoppageodometerParam > 50 ) and stoppageflagParam = 0 and ignitionParam = 1 THEN
				BEGIN
					UPDATE  vehicle
					SET     stoppage_flag = 1
							,stoppage_odometer = odometerParam
							,stoppage_transit_time = todaysDate
					WHERE   uid = uidParam;

					UPDATE  stoppage_alerts
					SET     alert_sent = 0
					WHERE   vehicleid = vehicleidParam
					AND     customerno = custnoParam;
				END;
			END IF;

			IF  ( (odometerParam - stoppageodometerParam < 50 ) and stoppageflagParam = 1) OR (ignitionParam = 0 AND stoppageflagParam = 1) THEN
				BEGIN
					UPDATE  vehicle
					SET     stoppage_flag = 0
							,stoppage_odometer = odometerParam
							,stoppage_transit_time = todaysDate
					WHERE   uid = uidParam;
				END;
			END IF;

			IF (odometerParam - stoppageodometerParam > 50 ) and stoppageflagParam = 1 and ignitionParam = 1 THEN
				BEGIN
					UPDATE  vehicle
					SET     stoppage_odometer = odometerParam
					WHERE   uid = uidParam;
				END;
			END IF;

			IF (odometerParam < stoppageodometerParam) THEN
				BEGIN
					UPDATE  vehicle
					SET     stoppage_odometer = odometerParam
							,stoppage_transit_time = todaysDate
					WHERE   uid = uidParam;
				END;
			END IF;
		END;
		END IF;
		SET isUpdated = 1;
	COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `map_vehicle_user_driver` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `map_vehicle_user_driver`(
	IN custnoparam INT
	, IN vehicleidparam INT
	, IN useridparam VARCHAR(50)
	, IN driveridparam INT
    , IN drivernameparam varchar(40)
    , IN todaysdate DATETIME
)
BEGIN
    DECLARE tempVehicleId INT;
    DECLARE tempDriverId INT;
    DECLARE notAllocatedDriverId INT;
    DECLARE tempGroupId INT;
    DECLARE tempUserId INT;
    DECLARE noOfUsers INT;
    DECLARE tempCount INT;
    
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
	END;
    IF(driveridparam = 0) THEN
		SET driveridparam = NULL;
	END IF;
    IF(vehicleidparam = 0) THEN
		SET vehicleidparam = NULL;
	END IF;
    IF(useridparam = '') THEN
		SET useridparam = NULL;
	END IF;

    START TRANSACTION;
		IF (driveridparam IS NULL AND drivernameparam != '' ) THEN
			BEGIN
				/* Check if the driver name already exists */
				SELECT	driverid
				INTO	driveridparam
				FROM	driver
				WHERE 	drivername = TRIM(drivernameparam)
                LIMIT 1;
                
				IF driveridparam IS NULL THEN
					BEGIN
						INSERT INTO driver(
										drivername
										,customerno
										)
									values(
										drivernameparam
										,custnoparam
										);
						SET driveridparam = LAST_INSERT_ID();
					END;
				END IF;
			END;
		END IF;
		IF (driveridparam IS NOT NULL AND vehicleidparam IS NOT NULL AND useridparam IS NOT NULL) THEN 
        BEGIN
		
        /* Check whether any driver is assigned to passed vehicle */
		SELECT 	driverid
		INTO 	tempDriverId
		FROM	driver
		WHERE 	vehicleid = vehicleidparam
		AND		customerno = custnoparam
        LIMIT 	1;
		
        /* If any driver is assigned to that vehicle, we need to unmap that vehicle from the existing driver */
        IF (tempDriverId IS NOT NULL) THEN
			UPDATE 	driver
			SET 	vehicleid = 0
			WHERE	driverid = tempDriverId
			AND		customerno = custnoparam;
		END IF;

        /* Check whether any vehicle has the passed driver assigned */
		SELECT 	vehicleid
		INTO 	tempVehicleId
		FROM	vehicle
		WHERE 	driverid = driveridparam
		AND		customerno = custnoparam
        LIMIT 	1;
        
		/* If any vehicle has that driver, we need to unmap that driver from the existing vehicle */
		IF (tempVehicleId IS NOT NULL) THEN
        BEGIN
            SELECT 	driverid 
            INTO 	notAllocatedDriverId
            FROM 	driver 
            WHERE 	drivername ='Not Allocated' 
            AND 	customerno = custnoparam 
            AND 	vehicleid = 0 
            AND 	isdeleted= 0
            LIMIT 1;
            
            IF(notAllocatedDriverId IS NULL) THEN 
				BEGIN
					INSERT INTO driver(
									drivername
									,customerno
									,vehicleid
									,driverphone
									)
								values(
									'Not Allocated'
									,custnoparam
									,0
									,'8888888888'
									);
					SET notAllocatedDriverId = LAST_INSERT_ID();
				END;
            END IF;
            
            IF(notAllocatedDriverId IS NOT NULL) THEN 
				UPDATE 	vehicle
				SET 	driverid = notAllocatedDriverId
				WHERE	vehicleid = tempVehicleId
				AND		customerno = custnoparam;

				UPDATE 	driver
				SET 	vehicleid = tempVehicleId
				WHERE	driverid = notAllocatedDriverId
				AND		customerno = custnoparam;
            END IF;
  
        END;
		END IF;

        /* Assign the driver to passed vehicle param */
		UPDATE 	vehicle
		SET 	driverid = driveridparam
		WHERE	vehicleid = vehicleidparam;
		
        /* Assign the vehicle in driver table */
        UPDATE 	driver
		SET 	vehicleid = vehicleidparam
		WHERE	driverid = driveridparam;
        
		/* 
			Please note that 1 group is related to 1 vehicle. We are mapping the same group to user.
			Hence, we are making the relationship between vehicle and user
		*/
		/* Check the group for passed vehicle */
		SELECT 	groupid
		INTO 	tempGroupId
		FROM	vehicle
		WHERE	vehicleid = vehicleidparam
		AND		customerno = custnoparam
        LIMIT 1;
		
		 /* Check whether any existing user has the group */
		IF(tempGroupId IS NOT NULL AND tempGroupId != 0) THEN
			/* Remove all the users mapped to the group */
			UPDATE 	groupman
			SET 	isdeleted = 1
					, timestamp = todaysdate
			WHERE 	groupid = tempGroupId
			AND		customerno = custnoparam
			AND 	isdeleted = 0;
            
            /* Loop around the each user and insert in groupman table */
			SELECT LENGTH(useridparam) - LENGTH(REPLACE(useridparam, ',', '')) INTO @noOfCommas;
            SET noOfUsers = @noOfCommas + 1;
            SET tempCount = 1;
			WHILE (tempCount  <=  noOfUsers) DO
				SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(useridparam, ',', tempCount), ',', -1 ) INTO @userid;

				/* Assign the group to passed user param */
				INSERT INTO groupman
									(
										groupid
										,vehicleid
										,customerno
										,userid
										,isdeleted
										,timestamp
									)
				VALUES
						(
							tempGroupId
							,vehicleidparam
							,custnoparam
							,@userid
							,0
							,todaysdate
						);
			   SET  tempCount = tempCount + 1;
			END WHILE;
		END IF;
		
		SELECT 	user.realname AS username
				, user.userid AS userid
				, user.email AS useremail
				, user.phone AS userphone
				, vehicle.vehicleno AS vehicleno
				, driver.drivername AS drivername
				, driver.driverphone AS driverphone
		FROM	vehicle 
		INNER JOIN	driver 	ON 	vehicle.driverid = driver.driverid
		INNER JOIN	groupman ON groupman.groupid = vehicle.groupid
		INNER JOIN	user	ON	user.userid = groupman.userid
		WHERE	vehicle.vehicleid = vehicleidparam
		AND 	FIND_IN_SET(user.userid, useridparam)
		AND 	driver.driverid = driveridparam
		AND 	vehicle.customerno = custnoparam
		AND		user.isdeleted = 0
		AND		driver.isdeleted = 0
        AND 	groupman.isdeleted = 0;
        END;
        END IF;
    COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `merge_delivery_challan` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `merge_delivery_challan`(
    IN orderIdParam INT,
    IN delNoParam VARCHAR(10),
    IN delDateParam DATETIME,
    IN chlNoParam VARCHAR(15),
    IN chlDateParam DATETIME,
    IN diNoParam VARCHAR(10),
    IN sapNoParam VARCHAR(10),
    IN sapDateParam DATETIME,
    IN lrNoParam VARCHAR(10),
    IN invNoParam VARCHAR(12),
    IN delFromParam VARCHAR(6),
    IN qtyTypeParam VARCHAR(7),
    IN delTypeParam VARCHAR(6),
    IN bCoCodeParam VARCHAR(6),
    IN delSiteParam VARCHAR(6),
    IN saleTypeParam VARCHAR(10),
    IN endoCodeParam VARCHAR(6),
    IN salesProCodeParam VARCHAR(6),
    IN stockyCodeParam VARCHAR(6),
    IN clientCodeParam VARCHAR(6),
    IN siteCodeParam VARCHAR(6),
    IN frgtRateParam float,
    IN placeCodeParam VARCHAR(6),
    IN loadingParam VARCHAR(12),
    IN tpvPlacecodeParam VARCHAR(6),
    IN rem1Param TEXT,
    IN transpBillNoParam VARCHAR(15),
    IN customerNoParam INT,
    IN userIdParam INT,
    IN todaysDate DATETIME,
    OUT insertChallanId INT
)
BEGIN
    DECLARE isLrNoExists VARCHAR(8);
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        /*
        GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error;
        */
    END;
    IF (customerNoParam = 0) THEN
        SET customerNoParam = NULL;
    END IF;
    IF (orderIdParam = 0) THEN
        SET orderIdParam = NULL;
    END IF;
    IF (delNoParam = '') THEN
        SET delNoParam = NULL;
    END IF;
    IF (chlNoParam = '') THEN
        SET chlNoParam = NULL;
    END IF;
    IF ( diNoParam = '') THEN
        SET diNoParam = NULL;
    END IF;
    IF (sapNoParam = '') THEN
        SET sapNoParam = NULL;
    END IF;
    IF ( lrNoParam = '') THEN
        SET lrNoParam = NULL;
    END IF;
    IF ( invNoParam = '') THEN
        SET invNoParam = NULL;
    END IF;
    IF (delFromParam = '') THEN
        SET delFromParam = NULL;
    END IF;
    IF (qtyTypeParam = '') THEN
        SET qtyTypeParam = NULL;
    END IF;
    IF (delTypeParam = '') THEN
        SET delTypeParam = NULL;
    END IF;

    IF ( bCoCodeParam= '') THEN
        SET bCoCodeParam = NULL;
    END IF;
    IF ( delSiteParam= '') THEN
        SET  delSiteParam= NULL;
    END IF;
    IF ( saleTypeParam= '') THEN
        SET  saleTypeParam= NULL;
    END IF;
    IF ( stockyCodeParam = '') THEN
        SET  stockyCodeParam = NULL;
    END IF;
    IF (clientCodeParam = '') THEN
        SET clientCodeParam = NULL;
    END IF;
    IF (siteCodeParam = '') THEN
        SET siteCodeParam = NULL;
    END IF;
    IF (placeCodeParam = '') THEN
        SET placeCodeParam = NULL;
    END IF;
    IF ( loadingParam = '') THEN
        SET loadingParam = NULL;
    END IF;
    IF (tpvPlacecodeParam = '') THEN
        SET tpvPlacecodeParam = NULL;
    END IF;
    IF ( rem1Param= '') THEN
        SET  rem1Param= NULL;
    END IF;

    IF ( transpBillNoParam= '') THEN
        SET  transpBillNoParam= NULL;
    END IF;

    /* Check If Chitti No Already Exists Or Not  */
    SELECT  deliveryChallanId
    INTO    isLrNoExists
    FROM    deliveryChallan
    WHERE   customerno = customerNoParam
    AND     orderId = orderIdParam
    AND     lrNo = lrNoParam
    AND     isDeleted = 0
    LIMIT 1;
    START TRANSACTION;
    IF (customerNoParam IS NOT NULL ) THEN
        IF(isLrNoExists IS NOT NULL)THEN
            # To Do
            # Merge Order Details Code Here
            SET insertChallanId = isLrNoExists;
        ELSE
            INSERT INTO deliveryChallan(
                orderId,
                delNo,
                delDate,
                chlNo,
                chlDate,
                diNo,
                sapNo,
                sapDate,
                lrNo,
                invNo,
                delFrom,
                qtyType,
                delType,
                bCoCode,
                delSite,
                saleType,
                endoCode,
                salesProCode,
                stockyCode,
                clientCode,
                siteCode,
                frgtRate,
                placeCode,
                loading,
                tpvPlaceCode,
                rem1,
                transpBillNo,
                customerno,
                created_by,
                created_on
            )VALUES(
                orderIdParam,
                delNoParam,
                delDateParam,
                chlNoParam,
                chlDateParam,
                diNoParam,
                sapNoParam,
                sapDateParam,
                lrNoParam,
                invNoParam,
                delFromParam,
                qtyTypeParam,
                delTypeParam,
                bCoCodeParam,
                delSiteParam,
                saleTypeParam,
                endoCodeParam,
                salesProCodeParam,
                stockyCodeParam,
                clientCodeParam,
                siteCodeParam,
                frgtRateParam,
                placeCodeParam,
                loadingParam,
                tpvPlaceCodeParam,
                rem1Param,
                transpBillNoParam,
                customerNoParam,
                userIdParam,
                todaysDate

            );

            SET insertChallanId = LAST_INSERT_ID();

        END IF;
    END IF;

    COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `merge_order_details` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `merge_order_details`(
    IN tripIdParam INT,
    IN chitthiNoParam VARCHAR(8),
    IN chitthiDateParam DATETIME,
    IN tokenNoParam VARCHAR(6),
    IN custCodeParam VARCHAR(6),
    IN rakeNoParam VARCHAR(15),
    IN brandCodeParam VARCHAR(6),
    IN bagsParam float,
    IN truckNoParam VARCHAR(15),
    IN delTypeParam VARCHAR(6),
    IN qtyTypeParam VARCHAR(7),
    IN stockyCodeParam VARCHAR(6),
    IN customerNoParam INT,
    IN userIdParam INT,
    IN todaysDate DATETIME,
    OUT insertedOrderId INT
)
BEGIN
    DECLARE isChitthiNoExists VARCHAR(8);
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        /*
        GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error;
        */
    END;
    IF (customerNoParam = 0) THEN
        SET customerNoParam = NULL;
    END IF;
    IF (tripIdParam = 0) THEN
        SET tripIdParam = NULL;
    END IF;
    IF (chitthiNoParam = '') THEN
        SET chitthiNoParam = NULL;
    END IF;
    IF (tokenNoParam = '') THEN
        SET tokenNoParam = NULL;
    END IF;
    IF ( custCodeParam = '') THEN
        SET custCodeParam = NULL;
    END IF;
    IF (rakeNoParam = '') THEN
        SET rakeNoParam = NULL;
    END IF;
    IF ( brandCodeParam = '') THEN
        SET brandCodeParam = NULL;
    END IF;
    IF ( truckNoParam = '') THEN
        SET truckNoParam = NULL;
    END IF;
    IF (delTypeParam = '') THEN
        SET delTypeParam = NULL;
    END IF;
    IF (qtyTypeParam = '') THEN
        SET qtyTypeParam = NULL;
    END IF;
    IF (stockyCodeParam = '') THEN
        SET stockyCodeParam = NULL;
    END IF;
    /* Check If Chitti No Already Exists Or Not  */
    SELECT  orderId
    INTO    isChitthiNoExists
    FROM    orderDetails
    WHERE   customerno = customerNoParam
    AND     tripId = tripIdParam
    AND     chitthiNo = chitthiNoParam
    AND     isDeleted = 0
    LIMIT 1;
    START TRANSACTION;
    IF (customerNoParam IS NOT NULL ) THEN
        IF(isChitthiNoExists IS NOT NULL)THEN

            SET insertedOrderId = isChitthiNoExists;
            # To Do
            # Merge Order Details Code Here
        ELSE
            INSERT INTO orderDetails(
                tripId,
                chitthiNo,
                chitthiDate,
                tokenNo,
                custCode,
                rakeNo,
                brandCode,
                bags,
                truckNo,
                delType,
                qtyType,
                stockCode,
                customerno,
                created_by,
                created_on
            )VALUES(
                tripIdParam,
                chitthiNoParam,
                chitthiDateParam,
                tokenNoParam,
                custCodeParam,
                rakeNoParam,
                brandCodeParam,
                bagsParam,
                truckNoParam,
                delTypeParam,
                qtyTypeParam,
                stockyCodeParam,
                customerNoParam,
                userIdParam,
                todaysDate

            );
            SET insertedOrderId = LAST_INSERT_ID();
        END IF;
    END IF;

    COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `multiauth_request` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `multiauth_request`(
  IN userparam INT,
  IN todaysdate DATETIME
)
BEGIN
  DECLARE otpparam INT;
  DECLARE otpvalidupto DATETIME;
    DECLARE useremail VARCHAR(50);
    DECLARE userphone VARCHAR(15);
    DECLARE custno INT;
  DECLARE useridparam INT;

  SELECT  userid, COALESCE(email, username, ''), COALESCE(phone, ''), customerno
    INTO  useridparam, useremail, userphone, custno
    FROM  user
    WHERE   (userid=userparam)
    AND   isdeleted = 0;

  IF (useridparam IS NOT NULL)THEN
    CALL insert_multiauth_request(useridparam, todaysdate, @otpparam, @otpvaliduptoparam);
    SELECT @otpparam, @otpvaliduptoparam INTO otpparam, otpvalidupto;

        SELECT  useridparam
        , otpparam
        , otpvalidupto
                , useremail
                , userphone
                , custno;

  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `new_install_request` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `new_install_request`(
        IN todaysdateParam DATETIME
        ,IN aptDateParam DATE
        ,IN priorityParam INT(4)
        ,IN locationParam VARCHAR(50)
        ,IN timeslotParam INT(4)
        ,IN detailsParam VARCHAR(100)
        ,IN coordinatorParam INT(11)
        ,IN conameParam VARCHAR(30)
        ,IN cophoneParam VARCHAR(15)
        ,IN installCountParam TINYINT(2)
        ,IN customernoParam INT(11)
        ,IN lteamidParam INT(11)
        ,OUT isexecutedOut TINYINT(2))
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
            ROLLBACK;
            /* GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
            @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
            SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
            SELECT @full_error;   */
            SET isexecutedOut = 0;
	END;
    BEGIN 

        DECLARE counterVar INT UNSIGNED DEFAULT 0;
        
        START TRANSACTION;	 
        BEGIN

            IF conameParam <> '' AND conameParam IS NOT NULL THEN

                INSERT INTO contactperson_details (`typeid`
                        ,`person_name`
                        ,`cp_phone1`
                        , `customerno`
                        , `insertedby`
                        , `insertedon`)
                VALUES (3
                        ,conameParam
                        ,cophoneParam
                        ,customernoParam
                        ,lteamidParam
                        ,todaysdateParam);

                SELECT  LAST_INSERT_ID() 
                INTO    coordinatorParam;

            END IF;

            WHILE counterVar < installCountParam DO

                INSERT INTO bucket (`apt_date` 
                    ,`customerno`
                    ,`created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    , `create_timestamp`
                    , status)
                VALUES (aptDateParam
                    ,customernoParam
                    ,lteamidParam
                    ,priorityParam
                    ,0
                    ,locationParam
                    ,timeslotParam
                    ,1
                    ,detailsParam
                    ,coordinatorParam
                    ,todaysdateParam
                    ,0);

                set counterVar = counterVar + 1;

            END WHILE;

            SET isexecutedOut = 1;
        
        END;
        COMMIT;
END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pullBucketList` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `pullBucketList`(
     IN dateParam VARCHAR(100))
BEGIN
        
        SELECT  b.bucketid
                , b.customerno
                , c.customercompany
                , b.priority
                , v.vehicleno
                , v.uid
                , b.location
                , b.purposeid
                , cp.person_name
                , cp.cp_phone1
                , t.`name` as fe_name
                , b.vehicleno as vehno
                , b.vehicleid
                , b.details
                , sp.timeslot
                , b.created_by
                , te.`name` as created_by_name
                , b.apt_date
                , b.fe_id
                , b.status
        FROM    bucket b
        INNER JOIN customer c ON c.customerno = b.customerno
        LEFT OUTER JOIN vehicle v ON v.vehicleid = b.vehicleid
        LEFT OUTER JOIN contactperson_details cp ON cp.cpdetailid = b.coordinatorid
        LEFT OUTER JOIN team t ON t.teamid = b.fe_id
        LEFT OUTER JOIN team te ON te.teamid = b.created_by
        LEFT OUTER JOIN sp_timeslot sp ON sp.tsid = b.timeslotid                                        
        LEFT OUTER JOIN unit u ON u.uid = b.unitid
        LEFT OUTER JOIN simcard s ON s.id = b.simcardid
        WHERE   b.apt_date LIKE dateParam  
        ORDER BY sp.tsid;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pullCoordinator` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `pullCoordinator`(
     IN customernoParam INT(11)
     )
BEGIN

    SELECT  cpdetailid
            , person_name 
    FROM    contactperson_details 
    WHERE   customerno = customernoParam 
    AND     typeid = 3;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pullemail` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `pullemail`(
    IN customernoParam INT(11)
)
BEGIN

    SELECT  `eid`
            ,`email_id` 
    FROM    `report_email_list`
    WHERE   `customerno` IN (customernoParam,0);

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pullMyTicket` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `pullMyTicket`(
    IN teamidParam INT(11)
)
BEGIN
 
    select 	* 
    from 	(select  (CASE  WHEN stde.status=1 THEN 'Inprogress' 
                                WHEN stde.status= 2 THEN 'Closed' 
                                WHEN stde.status= 3 THEN 'Pipeline' 
                                WHEN stde.status= 4 THEN 'On Hold' 
                                WHEN stde.status= 5 THEN 'Waiting for client' 
                                WHEN stde.status= 6 THEN 'Resolved' 
                                WHEN stde.status= 7 THEN 'Reopen' 
                                ELSE 'Open' END)as ticketstatus
                            , stde.uid
                            , st.ticketid
                            , st.title
                            , st.ticket_type
                            , sttype.tickettype
                            , st.sub_ticket_issue
                            , st.customerid
                            , st.eclosedate
                            , st.priority
                            , sp.priority as prname
                            , st.create_on_date
                            , st.create_by
                            , stde.status
                            , stde.allot_to 
                            , stde.description
                    from 	sp_ticket_details stde 
            left join sp_ticket as st on st.ticketid = stde.ticketid 
            left join sp_tickettype as sttype on sttype.typeid = st.ticket_type 
            left join sp_priority as sp on sp.prid = st.priority   
            order by stde.uid desc ) as main 
    group by main.ticketid having main.allot_to = teamidParam 
    AND 	main.create_by<> -1 
    AND 	main.status <> 2 
    order by main.eclosedate asc, main.priority asc, main.ticketid asc;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pullNote` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `pullNote`(
    IN ticketidParam INT(11)
)
BEGIN

    SELECT  sn.note
            , team.`name`
            , `user`.realname
            , sn.create_on_date
    FROM    sp_note sn 
    LEFT JOIN team ON team.teamid = sn.create_by AND sn.is_customer = 0
    LEFT JOIN `user` ON `user`.userid = sn.create_by AND sn.is_customer = 1
    WHERE   sn.ticketid = ticketidParam 
    ORDER BY sn.noteid DESC;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pullReason` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `pullReason`()
BEGIN

    SELECT  reasonid
            ,reason 
    FROM    nc_reason 

END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pullTicketPriority` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `pullTicketPriority`()
BEGIN

    SELECT  prid
            ,priority 
    FROM    sp_priority
    WHERE   isdeleted = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pullTicketStatus` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `pullTicketStatus`()
BEGIN

    SELECT  id
            ,status 
    FROM    ticket_status
    WHERE   isdeleted = 0 AND id <> '7';

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pullTicketType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `pullTicketType`()
BEGIN

    SELECT  typeid
            ,tickettype 
    FROM    sp_tickettype
    WHERE   isdeleted = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pull_pickups` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `pull_pickups`(
	IN custnoparam INT
    , IN pickupidparam INT
    , IN clientidparam INT
    , IN vendornoparam INT
    , IN pickupboyidparam INT
    , IN pickupdateparam DATE
    , IN statusparam INT
)
BEGIN

IF(custnoparam = 0 OR custnoparam = '') THEN
		SET custnoparam = NULL;
END IF;
IF(pickupidparam = 0 OR pickupidparam = '') THEN
		SET pickupidparam = NULL;
END IF;
IF(clientidparam = 0 OR clientidparam = '') THEN
		SET clientidparam = NULL;
END IF;
IF(vendornoparam = 0 OR vendornoparam = '') THEN
		SET vendornoparam = NULL;
END IF;
IF(pickupboyidparam = 0 OR pickupboyidparam = '') THEN
		SET pickupboyidparam = NULL;
END IF;
IF(pickupdateparam = 0 OR pickupdateparam = '') THEN
		SET pickupdateparam = NULL;
END IF;
IF(statusparam = '') THEN
		SET statusparam = NULL;
END IF;




SELECT   
   oid
  ,po.orderid 
  ,awbno
  ,fulfillmentid
  ,po.customerno
  ,po.customerid
  ,po.vendorno
  ,pv.vendorid
  ,pv.vendorname
  ,ps.sname
  ,po.pickupboyid
  ,pc.customername
  ,po.pickupdate
  ,pv.address
FROM pickup_order as po
INNER JOIN vendormapping as vm on vm.customerid = po.customerid AND vm.vendor_no = po.vendorno AND vm.isdeleted = 0
LEFT JOIN pickup_customer as pc on po.customerid=pc.customerid and po.customerno = pc.customerno
LEFT JOIN pickup_vendor as pv on  vm.vendorid = pv.vendorid and po.customerno=pv.customerno
LEFT JOIN pickup_shiper as ps on po.shipperid=ps.sid and  po.customerno = ps.customerno
WHERE (po.customerno = custnoparam OR custnoparam IS NULL) 
AND  (po.oid = pickupidparam OR pickupidparam IS NULL) 
AND  (po.customerid = clientidparam OR clientidparam IS NULL) 
AND  (po.vendorno = vendornoparam OR vendornoparam IS NULL) 
AND  (po.pickupboyid = pickupboyidparam OR pickupboyidparam IS NULL) 
AND  (po.pickupdate = pickupdateparam OR pickupdateparam IS NULL) 
AND  (po.status = statusparam OR statusparam IS NULL) 
AND  po.isdeleted=0; 

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pull_team` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `pull_team`()
BEGIN
SELECT teamid,name FROM team;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `purchase_unit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `purchase_unit`(
     IN unitnoParam varchar(16)
    ,IN commentParam varchar(50)
    ,IN acsParam TINYINT(1)
    ,IN acoppParam TINYINT(1)
    ,IN gssParam TINYINT(1)
    ,IN gssoppParam TINYINT(1)
    ,IN dosParam TINYINT(1)
    ,IN dooroppParam TINYINT(1)
    ,IN todayParam DATETIME
    ,IN transmitnoParam varchar(20)
    ,IN devicetypeParam TINYINT(2)
    ,IN fsParam TINYINT(2)
    ,IN fuelanalogParam INT(11)
    ,IN tempsenParam TINYINT(2)
    ,IN analog1Param INT(11)
    ,IN analog2Param INT(11)
    ,IN analog3Param INT(11)
    ,IN analog4Param INT(11)
    ,IN typevalueParam INT(11)
    ,IN panicParam TINYINT(1)
    ,IN buzzerParam TINYINT(1)
    ,IN immobilizerParam TINYINT(1)
    ,IN twowaycomParam TINYINT(1)
    ,IN portableParam TINYINT(1)
    ,IN acesensorParam TINYINT(1)
    ,IN acdigitaloppParam TINYINT(1)
    ,IN chalaannoParam varchar(20)
    ,IN lteamidParam INT(11)
    ,IN chalaandateParam DATE
    ,IN vendornoParam varchar(20)
    ,IN vendordateParam DATE
    ,IN device_loctnParam INT(11)
    ,OUT isexecutedOut TINYINT(2)
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
            
            SET isexecutedOut = 0;
	END;
    BEGIN  
           
        DECLARE unitidVar INT(11);
        DECLARE devicekeyVar BIGINT;
        DECLARE expiryVar date;
        DECLARE vehiclenoVar VARCHAR(40);
        DECLARE vehicleidVar INT(11);
        DECLARE driverlicnoVar VARCHAR(40);
        DECLARE driveridVar INT(11);


        SELECT  CONCAT('V',unitnoParam) 
        INTO    vehiclenoVar;

        SELECT  FLOOR(RAND() * 100000000) + 1000000000 
        INTO 	devicekeyVar;

        WHILE(SELECT devicekey FROM `devices` WHERE devicekey = devicekeyVar) DO
                SELECT  FLOOR(RAND() * 100000000) + 1000000000 
                INTO 	devicekeyVar;
        END WHILE;

        SELECT  date(DATE_ADD(todayParam, INTERVAL 1 YEAR)) 
        INTO    expiryVar;

        SELECT  CONCAT('LIC',unitnoParam) 
        INTO    driverlicnoVar;

        SET     isexecutedOut = 0;

        START TRANSACTION;	 
        BEGIN

            IF devicetypeParam = 1 THEN

                INSERT INTO unit(`customerno`
                    ,`unitno`
                    ,`trans_statusid`
                    ,`comments`
                    ,`get_conversion`
                    ,`unit_location_box_number`) 
                VALUES (1
                    ,unitnoParam
                    ,1
                    ,commentParam
                    ,1
                    ,device_loctnParam);

            ELSE

                INSERT INTO unit(`customerno`
                    ,`unitno`
                    ,`acsensor`
                    ,`is_ac_opp`
                    ,`gensetsensor`
                    ,`is_genset_opp`
                    ,`doorsensor`
                    ,`is_door_opp`
                    ,`trans_statusid`
                    , `comments`
                    ,`digitalioupdated`
                    ,`transmitterno`
                    ,`get_conversion`
                    ,`unit_location_box_number`)
            VALUES (1
                    ,unitnoParam
                    ,acsParam
                    ,acoppParam
                    ,gssParam
                    ,gssoppParam
                    ,dosParam
                    ,dooroppParam
                    ,1
                    ,commentParam
                    ,todayParam
                    ,transmitnoParam
                    ,1
                    ,device_loctnParam);
            END IF;

            SELECT  LAST_INSERT_ID() 
            INTO    unitidVar;

            
            UPDATE  unit 
            SET     digitalioupdated = NOW()
                    ,door_digitalioupdated = NOW()
                    ,extra_digitalioupdated = NOW()
                    ,extra2_digitalioupdated = NOW() 
            WHERE   uid = unitidVar;

            
            IF devicetypeParam = 2 AND (fsParam = 1 AND fuelanalogParam <> 0) THEN

                UPDATE  unit 
                SET     fuelsensor = fuelanalogParam 
                WHERE   unitno = unitnoParam;

            END IF;

            
            IF devicetypeParam = 2 AND tempsenParam = 2 AND analog1Param <> 0 AND analog2Param <> 0 THEN

                UPDATE  unit 
                SET     tempsen1 = analog1Param 
                        ,tempsen2 = analog2Param 
                WHERE   unitno = unitnoParam;

            ELSEIF devicetypeParam = 2 AND tempsenParam = 1 AND analog1Param <> 0 THEN

                UPDATE  unit 
                SET     tempsen1 = analog1Param 
                WHERE   unitno = unitnoParam;

            ELSEIF devicetypeParam = 2 AND tempsenParam = 3 AND analog1Param <> 0 AND analog2Param <> 0 AND analog3Param <> 0 THEN

                UPDATE  unit 
                SET     tempsen1 = analog1Param 
                        , tempsen2 = analog2Param
                        , tempsen3 = analog3Param 
                WHERE   unitno = unitnoParam;

            ELSEIF devicetypeParam = 2 AND tempsenParam = 4 AND analog1Param <> 0 AND analog2Param <> 0 AND analog3Param <> 0 AND analog4Param <> 0 THEN

                UPDATE  unit 
                SET     tempsen1 = analog1Param
                        ,tempsen2 = analog2Param
                        ,tempsen3 = analog3Param 
                        ,tempsen4 = analog4Param 
                WHERE   unitno = unitnoParam;

            END IF;

            

            UPDATE  unit 
            SET     type_value = typevalueParam 
            WHERE   uid = unitidVar;

            
            IF devicetypeParam = 2 AND panicParam = 1 THEN

                UPDATE  unit 
                SET     is_panic = 1 
                WHERE   unitno = unitnoParam ;

                UPDATE  customer 
                SET     use_panic = 1 
                WHERE   customerno = 1;

            END IF;

            
            IF devicetypeParam = 2 AND buzzerParam = 1 THEN

                UPDATE  unit 
                SET     is_buzzer = 1 
                WHERE   unitno = unitnoParam;

                UPDATE  customer 
                SET     use_buzzer = 1 
                WHERE   customerno = 1;

            END IF;

            
            IF devicetypeParam = 2 AND immobilizerParam = 1 THEN

                UPDATE  unit 
                SET     is_mobiliser = 1 
                WHERE   unitno = unitnoParam;

                UPDATE  customer 
                SET     use_immobiliser = 1 
                WHERE   customerno = 1;

            END IF;

            
            IF devicetypeParam = 2 AND twowaycomParam = 1 THEN

                UPDATE  unit 
                SET     is_twowaycom = 1 
                WHERE   unitno = unitnoParam;

            END IF;

            
            IF devicetypeParam = 2 AND portableParam = 1 THEN

                UPDATE  unit 
                SET     is_portable = 1 
                WHERE   unitno = unitnoParam;

            END IF;

            
            INSERT INTO `devices`(`customerno`
                    , `devicekey`
                    , `devicelat`
                    , `devicelong`
                    , `baselat`
                    , `baselng`
                    , `installlat`
                    , `installlng`
                    , `lastupdated`
                    , `registeredon`
                    , `altitude`
                    , `directionchange`
                    , `inbatt`
                    , `hwv`
                    , `swv`
                    , `msgid`
                    , `uid`
                    , `status`
                    , `ignition`
                    , `powercut`
                    , `tamper`
                    , `gpsfixed`
                    , `online/offline`
                    , `gsmstrength`
                    , `gsmregister`
                    , `gprsregister`
                    , `aci_status`
                    , `satv`
                    , `device_invoiceno`
                    , `inv_generatedate`
                    , `installdate`
                    , `expirydate`
                    , `invoiceno`
                    , `po_no`
                    , `po_date`
                    , `warrantyexpiry`
                    , `simcardid`
                    , `inv_device_priority`
                    , `inv_deferdate`
                    , `start_date`
                    , `end_date`) 
            VALUES (1
                    ,devicekeyVar
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,todayParam
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,unitidVar
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,expiryVar
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,''
                    ,'');
            
            
            






            
            INSERT INTO vehicle (vehicleno
                    , customerno
                    , uid
                    , kind) 
            VALUES  ( vehiclenoVar
                    , '1'
                    , unitidVar
                    , 'Truck');


            SELECT  LAST_INSERT_ID() 
            INTO    vehicleidVar;

            
            UPDATE  unit 
            SET     vehicleid = vehicleidVar 
            WHERE   uid = unitidVar;

            
            INSERT INTO driver (drivername
                    ,driverlicno
                    ,customerno
                    ,vehicleid) 
            VALUES ('Not Allocated',driverlicnoVar,1,vehicleidVar);

            SELECT  LAST_INSERT_ID() 
            INTO    driveridVar;

            
            UPDATE  vehicle 
            SET     driverid = driveridVar 
            WHERE   vehicleid = vehicleidVar;


            
            INSERT INTO eventalerts (vehicleid
                    ,overspeed
                    , tamper
                    , powercut
                    , temp
                    , ac
                    , customerno) 
            VALUES (vehicleidVar
                    ,0
                    ,0
                    ,0
                    ,0
                    ,0
                    ,1);


            
            INSERT INTO ignitionalert (vehicleid
                    ,last_status
                    ,last_check
                    ,`count`
                    ,`status`
                    ,customerno) 
                    VALUES (vehicleidVar
                    ,0
                    ,0
                    ,0
                    ,0
                    ,1);

            
            IF acesensorParam = 1 AND acdigitaloppParam <> 0 THEN

                INSERT INTO acalerts (last_ignition
                    , customerno
                    , vehicleid
                    , aci_status) 
                VALUES (0
                    ,1
                    ,vehicleidVar
                    ,0);

            END IF;

            INSERT INTO trans_history (`customerno`
                ,`unitid`
                ,`teamid`
                , `type`
                , `trans_time`
                , `statusid`
                , `transaction`
                , `simcardno`
                , `invoiceno`
                , `expirydate`
                , `comments`)
            VALUES (1
                ,unitidVar
                ,lteamidParam
                , 0
                ,todayParam
                , 1
                , 'New Purchase'
                ,''
                ,''
                ,''
                ,commentParam);

            IF chalaannoParam <> '' THEN

                INSERT INTO chalaan (uid 
                    , chalaan_no
                    , chalaan_date 
                    , vendor_invno 
                    , vendor_invdate 
                    , insertedby 
                    , insertedon)
                VALUES(unitidVar
                    ,chalaannoParam
                    ,chalaandateParam
                    ,vendornoParam
                    ,vendordateParam
                    ,lteamidParam
                    ,todayParam);

            END IF;
            
            SET isexecutedOut = 1;

        END;
        COMMIT;
    
    END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `push_command_server` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `push_command_server`(
     IN commentParam VARCHAR(100)
    ,IN commandParam VARCHAR(50)
    ,IN uidParam INT(11)
    ,IN customernoParam INT(11)
    ,IN lteamidParam INT(11)
    ,IN todaysdateParam DATETIME
    ,OUT isexecutedOut TINYINT(2)
    )
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
            ROLLBACK;
           /* GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
            @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
            SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
            SELECT @full_error;   */
            SET isexecutedOut = 0;
	END;
    BEGIN   

        START TRANSACTION;	 
        BEGIN

            UPDATE  unit 
            SET      `command`=commandParam
                    ,`setcom`=1
                    , comments = commentParam    
            WHERE   customerno = customernoParam 
            AND     uid = uidParam;

            INSERT INTO  push_command_log (
                    `unitid`
                   ,`customerno` 
                   ,`command`
                   , `comment`
                   , `createdby`
                   , `timestamp`)
            VALUES (uidParam
                    , customernoParam
                    , commandParam
                    , commentParam
                    , lteamidParam
                    , todaysdateParam);

            SET isexecutedOut = 1;
        END;
        COMMIT;
    END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `register_device` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `register_device`(
    IN todaysdateParam DATETIME
    ,IN unitidParam INT(11)
    ,IN utypeParam INT(11)
    ,IN simcardidParam INT(11)
    ,IN customernoParam INT(11)
    ,IN ponoParam INT(11)
    ,IN podateParam DATE
    ,IN expirydateParam DATE
    ,IN installdateParam DATE
    ,IN end_dateParam DATE
    ,IN invoicenoParam VARCHAR(50)
    ,IN vehiclenoParam VARCHAR(40)
    ,IN kindParam VARCHAR(40)
    ,IN leaseParam TINYINT(2)
    ,IN eteamidParam INT(11)
    ,IN lteamidParam INT(11)
    ,IN statusParam TINYINT(2)
    ,IN unsuccessProblemParam TINYINT(2)
    ,IN incompleteDateParam DATETIME
    ,IN rescheduleDateParam DATETIME
    ,IN bucketidParam INT(11)
    ,IN commentParam VARCHAR(100)
    ,IN docketidParam INT
    ,OUT isexecutedOut TINYINT(2)
    ,OUT usernameOut VARCHAR(50)
    ,OUT realnameOut VARCHAR(50)
    ,OUT emailOut VARCHAR(50)
    ,OUT unitnumberOut VARCHAR(16)
    ,OUT simcardnoOut VARCHAR(50)
    ,OUT elixirOut VARCHAR(150)
    ,OUT errormsgOut VARCHAR(100)
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
            ROLLBACK;

            SET isexecutedOut = 0;
    END;
    BEGIN
        DECLARE cstypeVar INT DEFAULT 13;
        DECLARE warrantyVar DATETIME DEFAULT DATE_ADD(CURRENT_DATE, INTERVAL 365 DAY);
        DECLARE vehicleidVar INT(11) DEFAULT 0;
        DECLARE useridVar INT(11);
        DECLARE panicVar TINYINT(1);
        DECLARE buzzerVar TINYINT(4);
        DECLARE mobiliserVar TINYINT(1);

        IF utypeParam = 23 THEN
            SET cstypeVar = 24;
        END IF;

        IF utypeParam = 22 THEN
            SET cstypeVar = 25;
        END IF;

        IF(vehiclenoParam = '' OR vehiclenoParam = '0') THEN
            SET vehiclenoParam = NULL;
        END IF;

        IF unitidParam <> '' OR unitidParam <> '0' THEN

            SELECT  unitno
                    ,is_panic
                    ,is_buzzer
                    ,is_mobiliser
            INTO    unitnumberOut
                    ,panicVar
                    ,buzzerVar
                    ,mobiliserVar
            FROM    unit
            WHERE   uid = unitidParam
            ORDER BY uid DESC
            LIMIT   1;

            SELECT  vehicleid
            INTO    vehicleidVar
            FROM    vehicle
            WHERE   uid = unitidParam
            AND     isdeleted = 0
            ORDER BY vehicleid DESC
            LIMIT   1;

        END IF;

        IF simcardidParam <> '' OR simcardidParam <> 0 THEN

            SELECT  simcardno
            INTO    simcardnoOut
            FROM    simcard
            WHERE   id = simcardidParam
            ORDER BY id DESC
            LIMIT   1;

        END IF;

        SELECT  userid
        INTO    useridVar
        FROM    `user`
        WHERE   isdeleted=0
        AND     customerno=customernoParam
        ORDER BY userid DESC
        LIMIT   1;

        SET     isexecutedOut = 0;

        IF statusParam = 2 THEN

            IF vehicleidVar IS NOT NULL AND vehicleidVar <> 0 THEN

                START TRANSACTION;
                BEGIN

                    UPDATE  unit
                    SET     customerno=customernoParam
                            , trans_statusid = utypeParam
                            ,teamid=0
                            , comments = commentParam
                    WHERE   uid=unitidParam;

                    UPDATE  simcard
                    SET     customerno=customernoParam
                            ,trans_statusid = cstypeVar
                            ,teamid=0
                            ,comments = commentParam
                    WHERE   id=simcardidParam;

                    IF simcardidParam <> 0 THEN

                        UPDATE  devices
                        SET     simcardid=0
                        WHERE   simcardid=simcardidParam;

                    END IF;

                    UPDATE  devices
                    SET     customerno=customernoParam
                            ,simcardid=simcardidParam
                            ,expirydate=expirydateParam
                            ,installdate=installdateParam
                            ,invoiceno=invoicenoParam
                            ,po_no=ponoParam
                            ,po_date=podateParam
                            ,warrantyexpiry=warrantyVar
                            ,end_date=end_dateParam
                    WHERE   uid=unitidParam;

                    IF  vehiclenoParam IS NULL OR vehiclenoParam='' THEN

                        UPDATE  vehicle
                        SET     customerno=customernoParam
                                ,kind = kindParam
                        WHERE   uid = unitidParam;

                    ELSE

                        UPDATE  vehicle
                        SET     customerno=customernoParam
                                ,vehicleno=vehiclenoParam
                                ,kind = kindParam
                                ,stoppage_transit_time = todaysdateParam
                        WHERE   uid = unitidParam;

                    END IF;

                    UPDATE  driver
                    SET     customerno= customernoParam
                    WHERE   vehicleid= vehicleidVar;

                    UPDATE  eventalerts
                    SET     customerno= customernoParam
                    WHERE   vehicleid=vehicleidVar;

                    UPDATE  ignitionalert
                    SET     customerno= customernoParam
                    WHERE   vehicleid= vehicleidVar;

                    UPDATE  acalerts
                    SET     customerno= customernoParam
                    WHERE   vehicleid= vehicleidVar;


                    IF leaseParam = 1 THEN
                        UPDATE  unit
                        SET     onlease=leaseParam
                        WHERE   uid =unitidParam;
                    END IF;

                    IF panicVar = 1 THEN
                        UPDATE  customer
                        SET     use_panic=1
                        WHERE   customerno=customernoParam;
                    END IF;

                    IF buzzerVar = 1 THEN
                        UPDATE  customer
                        SET     use_buzzer=1
                        WHERE   customerno=customernoParam;
                    END IF;

                    IF mobiliserVar = 1 THEN
                        UPDATE  customer
                        SET     use_immobiliser=1
                        WHERE   customerno=customernoParam;
                    END IF;


                    INSERT INTO trans_history_new(`bucketid`
                        ,`newunitid`
                        ,`newvehicleid`
                        ,`newsimcardid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                    VALUES (bucketidParam
                        ,unitidParam
                        ,vehicleidVar
                        ,simcardidParam
                        ,'1'
                        ,'1'
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);


                    INSERT INTO dailyreport(`customerno`
                        , `vehicleid`
                        , `uid`
                        ,`last_online_updated`
                        ,`daily_date`)
                    VALUES (customernoParam
                        ,vehicleidVar
                        ,unitidParam
                        ,todaysdateParam
                        ,installdateParam);

                    INSERT INTO vehiclewise_alert (`customerno`
                            , `userid`
                            , `vehicleid`
                            ,`temp_active`
                            ,`ignition_active`
                            ,`speed_active`
                            ,`ac_active`
                            ,`powerc_active`
                            ,`tamper_active`
                            ,`harsh_break_active`
                            ,`high_acce_active`
                            ,`panic_active`
                            ,`door_active`)
                    SELECT  customerno
                            ,userid
                            ,vehicleid
                            ,temp_active
                            ,ignition_active
                            ,speed_active
                            ,ac_active
                            ,powerc_active
                            ,tamper_active
                            ,harsh_break_active
                            ,high_acce_active
                            ,panic_active
                            ,door_active
                    FROM    vehiclewise_alert
                    WHERE   userid = useridVar
                    AND customerno= customernoParam
                    LIMIT   1;

                    UPDATE  bucket
                    SET     `status` = statusParam
                            ,`task_completion_timestamp` = todaysdateParam
                    WHERE   bucketid= bucketidParam ;

                    SET isexecutedOut = 1;
                END;
                COMMIT;

            ELSE
                SET errormsgOut = 'Vehicle Not Mapped';
                SET isexecutedOut = 0;
            END IF;

            SELECT      `name` INTO elixirOut
            FROM        team
            WHERE       teamid = eteamidParam
            ORDER BY    teamid DESC
            LIMIT       1;

            SELECT      username
                        ,realname
                        ,email
            INTO        usernameOut
                        ,realnameOut
                        ,emailOut
            FROM        `user`
            INNER JOIN  groupman ON groupman.userid  <> `user`.userid
            WHERE       `user`.customerno = customernoParam
            AND         `user`.email <> ''
            AND         `user`.isdeleted = 0
            AND         (`user`.role = 'Administrator' OR `user`.role = 'Master')
            ORDER BY    `user`.userid DESC
            LIMIT       1;

        ELSEIF statusParam = 3 THEN

            START TRANSACTION;
            BEGIN

                UPDATE  bucket
                SET     status= statusParam
                        , is_problem_of = unsuccessProblemParam
                        , remarks= commentParam
                        ,task_completion_timestamp = todaysdateParam
                where   bucketid=bucketidParam;

                INSERT INTO trans_history_new(`bucketid`
                        ,`newunitid`
                        ,`newvehicleid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                VALUES (bucketidParam
                        ,unitidParam
                        ,vehicleidVar
                        ,'1'
                        ,'2'
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);

                SET     isexecutedOut = 1;
            END;
            COMMIT;

        ELSEIF statusParam = 6 THEN

            START TRANSACTION;
            BEGIN

                UPDATE  bucket
                SET     status= statusParam
                        ,reschedule_date=incompleteDateParam
                        ,reschedule_timestamp = todaysdateParam
                        ,remarks = commentParam
                where   bucketid=bucketidParam;

                INSERT INTO bucket (`apt_date`
                        ,`customerno`
                        ,`created_by`
                        , `priority`
                        , `vehicleid`
                        , `location`
                        , `timeslotid`
                        , `purposeid`
                        , `details`
                        , `coordinatorid`
                        , `create_timestamp`
                        , `status`
                        ,`docketid`
                        ,`prevBucketId`)
                SELECT    incompleteDateParam
                        , customernoParam
                        , lteamidParam
                        , `priority`
                        , `vehicleid`
                        , `location`
                        , `timeslotid`
                        , `purposeid`
                        , `details`
                        , `coordinatorid`
                        , todaysdateParam
                        , '0'
                        ,docketidParam
                        ,bucketidParam
                FROM    bucket
                WHERE   bucketid = bucketidParam
                LIMIT   1;


                INSERT INTO trans_history_new(`bucketid`
                        ,`newunitid`
                        ,`newvehicleid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                VALUES (bucketidParam
                        ,unitidParam
                        ,vehicleidVar
                        ,'1'
                        ,'5'
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);

                SET     isexecutedOut = 1;
            END;
            COMMIT;

        ELSEIF statusParam = 1 THEN

            START TRANSACTION;
            BEGIN

                UPDATE  bucket
                SET     status = statusParam
                        ,reschedule_date = rescheduleDateParam
                        ,reschedule_timestamp = todaysdateParam
                        ,remarks = commentParam
                WHERE   bucketid = bucketidParam;

                INSERT INTO bucket (`apt_date`
                        ,`customerno`
                        ,`created_by`
                        , `priority`
                        , `vehicleid`
                        , `location`
                        , `timeslotid`
                        , `purposeid`
                        , `details`
                        , `coordinatorid`
                        , `create_timestamp`
                        , `status`
                        ,`docketid`
                        ,`prevBucketId`)
                SELECT    rescheduleDateParam
                        , customernoParam
                        , lteamidParam
                        , `priority`
                        , `vehicleid`
                        , `location`
                        , `timeslotid`
                        , `purposeid`
                        , `details`
                        , `coordinatorid`
                        , `create_timestamp`
                        ,0
                        ,docketidParam
                        ,bucketidParam
                FROM    `bucket`
                WHERE   `bucketid`=bucketidParam
                LIMIT   1;

                INSERT INTO trans_history_new(`bucketid`
                        ,`newunitid`
                        ,`newvehicleid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                VALUES (bucketidParam
                        ,unitidParam
                        ,vehicleidVar
                        ,1
                        ,3
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);

                SET isexecutedOut = 1;

            END;
            COMMIT;

        ELSEIF statusParam = 5 THEN

            START TRANSACTION;
            BEGIN

                UPDATE  bucket
                SET     status = statusParam
                        , cancelled_timestamp = todaysdateParam
                        , cancellation_reason = commentParam
                WHERE   bucketid = bucketidParam;

                INSERT INTO trans_history_new(`bucketid`
                        ,`oldunitid`
                        ,`oldvehicleid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                VALUES (bucketidParam
                        ,unitidParam
                        ,vehicleidVar
                        ,1
                        ,4
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);

                SET     isexecutedOut = 1;
            END;
            COMMIT;

        END IF;

    END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `remove_unit_sim` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `remove_unit_sim`(
    IN todaysdateParam DATETIME
    ,IN customernoParam INT(11)
    ,IN unitidParam INT(11)
    ,IN eteamidParam INT(11)
    ,IN lteamidParam INT(11)
    ,IN statusParam TINYINT(2)
    ,IN unsuccessProblemParam TINYINT(2)
    ,IN incompleteDateParam DATETIME
    ,IN rescheduleDateParam DATETIME
    ,IN bucketidParam INT(11)
    ,IN commentParam VARCHAR(50)
    ,IN docketidParam INT
    ,OUT isexecutedOut TINYINT(2)
    ,OUT usernameOut VARCHAR(50)
    ,OUT realnameOut VARCHAR(50)
    ,OUT emailOut VARCHAR(50)
    ,OUT vehiclenoOut VARCHAR(40)
    ,OUT unitnumverOut VARCHAR(16)
    ,OUT simnumberOut VARCHAR(50)
    ,OUT elixirOut VARCHAR(150))
BEGIN
    DECLARE simcardidVar INT(11);
    DECLARE unitnoVar VARCHAR(11);
    DECLARE vehicleidVar INT(11);
    DECLARE groupidVar INT(11);
    DECLARE vehiclenoVar VARCHAR(40);
    DECLARE simcardnoVar VARCHAR(50);

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN

            SET isexecutedOut = 0;
        END;

    SELECT  simcardid
    INTO    simcardidVar
    FROM    devices
    WHERE   uid = unitidParam
    ORDER BY    deviceid DESC
    LIMIT   1;

    SELECT  simcardno
    INTO    simcardnoVar
    FROM    simcard
    WHERE   id = simcardidVar
    ORDER BY    id DESC
    LIMIT   1;

    SELECT  unitno
    INTO    unitnoVar
    FROM    unit
    WHERE   uid = unitidParam
    ORDER BY    uid DESC
    LIMIT   1;

    SELECT  vehicleid
                ,vehicleno
                ,groupid
    INTO    vehicleidVar
                ,vehiclenoVar
                ,groupidVar
    FROM    vehicle
    WHERE   uid = unitidParam
    ORDER BY    vehicleid DESC
    LIMIT   1;

    IF statusParam = 2 THEN

        START TRANSACTION;
        BEGIN

            UPDATE  unit
            SET     trans_statusid = 20
                    ,teamid = eteamidParam
                    ,comments = commentParam
            WHERE   uid= unitidParam;

            UPDATE  simcard
            SET     trans_statusid= 21
                    ,teamid=eteamidParam
                    , comments = commentParam
            WHERE   id= simcardidVar;



            DELETE FROM dailyreport
            WHERE       customerno = customernoParam
            AND         uid= unitidParam;

            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`oldsimcardid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    , `remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,unitidParam
                    ,vehicleidVar
                    ,simcardidVar
                    ,'2'
                    ,'1'
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    , customernoParam);


            UPDATE  unit
            SET     customerno=1
                    ,userid=0
                    , comments = commentParam
            WHERE   uid= unitidParam;

            UPDATE  devices
            SET     customerno=1
                    , expirydate='0000-00-00'
                    , device_invoiceno = ''
                    , inv_generatedate = '0000-00-00 00:00:00'
                    ,po_no=''
                    , po_date='0000-00-00'
                    , invoiceno=''
                    , installdate='0000-00-00'
            WHERE   uid=unitidParam;



            UPDATE  unit
            SET     onlease=0
            WHERE   uid = unitidParam;



            UPDATE  vehicle
            SET     customerno=1
            WHERE   uid = unitidParam;

            UPDATE  driver
            SET     customerno = 1
            WHERE   vehicleid = vehicleidVar;

            UPDATE  eventalerts
            SET     customerno = 1
            WHERE   vehicleid = vehicleidVar;

            UPDATE  ignitionalert
            SET     customerno = 1
            WHERE   vehicleid = vehicleidVar;

            UPDATE  acalerts
            SET     customerno = 1
            WHERE   vehicleid = vehicleidVar;

            UPDATE  checkpointmanage
            SET     customerno = 1
                    ,isdeleted = 1
            WHERE   vehicleid = vehicleidVar;

            UPDATE  fenceman
            SET     customerno = 1
                    ,isdeleted = 1
            WHERE   vehicleid = vehicleidVar;

            UPDATE  groupman
            SET     customerno = 1
                    ,isdeleted = 1
            WHERE   vehicleid = vehicleidVar;

            UPDATE  reportman
            SET     customerno = 1
            WHERE   uid = unitidParam;

            UPDATE  bucket
            SET     `status` = statusParam
                    ,`task_completion_timestamp` = todaysdateParam
            WHERE   bucketid = bucketidParam ;

            SET isexecutedOut=1;

        END;
        COMMIT;

        SELECT  `name`
        INTO    elixirOut
        FROM    team
        WHERE   teamid =  eteamidParam
        LIMIT   1;

        SELECT          c.username
                        ,c.realname
                        ,c.email
        INTO            usernameOut
                        ,realnameOut
                        ,emailOut
        FROM            `user` c
        LEFT OUTER JOIN groupman p ON p.groupid = groupidVar
        LEFT OUTER JOIN groupman ON c.userid <> groupman.userid
        WHERE           c.customerno = customernoParam
        AND             c.email <> ''
        AND             c.isdeleted = 0
        AND             (c.groupid=groupidVar  OR c.groupid ='0')
        AND             (c.`role` = 'Administrator' OR c.`role` = 'Master')
        ORDER BY        c.userid DESC
        LIMIT           1;

        SET vehiclenoOut=vehiclenoVar;
        SET unitnumverOut=unitnoVar;
        SET simnumberOut=simcardnoVar;

    ELSEIF statusParam = 3 THEN

        START TRANSACTION;
        BEGIN

            UPDATE  bucket
            SET     `status`=statusParam
                        ,`is_problem_of` = unsuccessProblemParam
                        ,`remarks` = commentParam
                        ,`task_completion_timestamp` = todaysdateParam
            where   `bucketid`=bucketidParam;

            INSERT INTO trans_history_new(`bucketid`
                        ,`oldunitid`
                        ,`oldvehicleid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        ,`remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
            VALUES (bucketidParam
                        ,unitidParam
                        ,vehicleidVar
                        ,2
                        ,2
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);

            UPDATE  unit
            SET     trans_statusid= 5
            where   uid = unitidParam;

            UPDATE  simcard
            SET     trans_statusid = 13
            where   id = simcardidVar;

            SET isexecutedOut=1;

        END;
        COMMIT;

    ELSEIF statusParam = 6 THEN
        START TRANSACTION;
        BEGIN

            UPDATE  bucket
            SET     status= statusParam
                    ,reschedule_date=incompleteDateParam
                    ,reschedule_timestamp = todaysdateParam
                    ,remarks = commentParam
            where   bucketid=bucketidParam;

            INSERT INTO bucket (`apt_date`
                    ,`customerno`
                    ,`created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    , `create_timestamp`
                    , `status`
                    ,`docketid`)

            SELECT  incompleteDateParam
                    , `customerno`
                    , `created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    , todaysdateParam
                    , 0
                    ,docketidParam
            FROM    `bucket`
            WHERE   `bucketid`= bucketidParam
            ORDER BY bucketid DESC
            LIMIT   1;

            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    ,`remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,unitidParam
                    ,vehicleidVar
                    ,2
                    ,5
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    ,customernoParam);

            SET isexecutedOut=1;
        END;
        COMMIT;

    ELSEIF statusParam = 1 THEN
        START TRANSACTION;
        BEGIN

            UPDATE  `bucket`
            SET     `status` = statusParam
                    ,`reschedule_date` = rescheduleDateParam
                    ,`reschedule_timestamp` = todaysdateParam
                    ,remarks = commentParam
            WHERE   `bucketid` = bucketidParam;

            INSERT INTO bucket (`apt_date`
                    ,`customerno`
                    ,`created_by`
                    ,`priority`
                    ,`vehicleid`
                    ,`location`
                    ,`timeslotid`
                    ,`purposeid`
                    ,`details`
                    ,`coordinatorid`
                    , `create_timestamp`
                    ,`status`
                    ,`docketid`)
            SELECT  rescheduleDateParam
                    ,`customerno`
                    ,`created_by`
                    ,`priority`
                    ,`vehicleid`
                    ,`location`
                    ,`timeslotid`
                    ,`purposeid`
                    ,`details`
                    ,`coordinatorid`
                    ,todaysdateParam
                    ,0
                    ,docketidParam
            FROM    `bucket`
            WHERE   `bucketid`=bucketidParam
            ORDER BY bucketid DESC
            LIMIT   1;

            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    ,`remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,unitidParam
                    ,vehicleidVar
                    ,'2'
                    ,'3'
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    ,customernoParam);

            SET isexecutedOut=1;
        END;
        COMMIT;

    ELSEIF statusParam = 5 THEN
        START TRANSACTION;
        BEGIN

            UPDATE  `bucket`
            SET     `status` = statusParam
                    ,`cancelled_timestamp` = todaysdateParam
                    ,`cancellation_reason` = commentParam
            WHERE   `bucketid` = bucketidParam;

            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    , `remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,unitidParam
                    ,vehicleidVar
                    ,2
                    ,4
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    ,customernoParam);

            UPDATE  unit
            SET     trans_statusid= 5
            where   uid = unitidParam;

            UPDATE  simcard
            SET     trans_statusid = 13
            where   id = simcardidVar;

            SET isexecutedOut=1;
        END;
        COMMIT;

    END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `repair` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `repair`(
    IN todaysdateParam DATETIME
    ,IN unitidParam INT(11)
    ,IN simcardidParam INT(11)
    ,IN eteamidParam INT(11)
    ,IN lteamidParam INT(11)
    ,IN customernoParam INT(11)
    ,IN statusParam TINYINT(2)
    ,IN unsuccessProblemParam TINYINT(2)
    ,IN incompleteDateParam DATETIME
    ,IN rescheduleDateParam DATETIME
    ,IN bucketidParam INT(11)
    ,IN commentParam VARCHAR(100)
    ,IN docketidParam INT
    ,OUT isexecutedOut TINYINT(2)
    ,OUT usernameOut VARCHAR(50)
    ,OUT realnameOut VARCHAR(50)
    ,OUT emailOut VARCHAR(50)
    ,OUT vehiclenoOut VARCHAR(40)
    ,OUT unitnoOut VARCHAR(16)
    ,OUT simnumberOut VARCHAR(50)
    ,OUT elixirOut VARCHAR(150)
)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
            ROLLBACK;
        /*     
        GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error; */
          
            SET isexecutedOut = 0;
	END;
    BEGIN    
        DECLARE unitnoVar VARCHAR(11);
        DECLARE vehicleidVar INT(11);
        DECLARE vehiclenoVar VARCHAR(40);
        DECLARE groupidVar INT(11);

        SELECT      unitno 
        INTO        unitnoVar 
        FROM        unit 
        WHERE       uid =unitidParam
        ORDER BY    uid DESC
        LIMIT       1;
		
        SELECT      vehicleid
                    ,vehicleno
                    ,groupid 
        INTO        vehicleidVar 
                    ,vehiclenoVar
                    ,groupidVar 
        FROM        vehicle 
        WHERE       uid =unitidParam
        ORDER BY    vehicleid DESC
        LIMIT       1;

        IF statusParam = 2 THEN

            START TRANSACTION;
            BEGIN

                UPDATE  unit 
                SET     trans_statusid= 5
						, comments = commentParam 
                        ,unit_location_box_number=-1        
                WHERE   uid= unitidParam;

                UPDATE  simcard 
                SET     trans_statusid= 13
                                ,comments =commentParam 
                WHERE   id=simcardidParam;

                INSERT INTO trans_history_new(`bucketid`
                        ,`oldunitid`
                        ,`oldvehicleid`
                        ,`oldsimcardid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                VALUES (bucketidParam
                        ,unitidParam
                        ,vehicleidVar
                        ,simcardidParam
                        ,7
                        ,1
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);

                UPDATE 	bucket 
                SET 	`status` = statusParam
                        ,`task_completion_timestamp` = todaysdateParam 
                WHERE	bucketid= bucketidParam ;

                SET isexecutedOut = 1;

            END;
            COMMIT;

        

            SELECT      simcardno 
            INTO        simnumberOut 
            FROM        simcard 
            WHERE       id = simcardidParam
            ORDER BY    id DESC
            LIMIT       1;

        
            SELECT      `name` 
            INTO        elixirOut 
            FROM        team 
            WHERE       teamid = eteamidParam
            ORDER BY    teamid DESC
            LIMIT       1;

            SELECT          c.username
                            ,c.realname
                            ,c.email 
            INTO            usernameOut
                            ,realnameOut
                            ,emailOut 
            FROM            `user` c 
            LEFT OUTER JOIN groupman p ON p.groupid = groupidVar 
            LEFT OUTER JOIN groupman ON c.userid <> groupman.userid 
            WHERE           c.customerno =  customernoParam  
            AND             c.email <> '' 
            AND             (c.groupid=groupidVar or c.groupid ='0' ) 
            AND             (c.role = 'Administrator' OR c.role = 'Master')
            ORDER BY        c.userid DESC
            LIMIT           1;

            SET vehiclenoOut=vehiclenoVar;
            SET unitnoOut=unitnoVar;

        ELSEIF statusParam = 3 THEN

            START TRANSACTION;
            BEGIN

                UPDATE 	bucket 
                SET 	`status`=statusParam
                        ,`is_problem_of` = unsuccessProblemParam
                        ,`remarks`= commentParam
                        ,`task_completion_timestamp` = todaysdateParam 
                where 	`bucketid`=bucketidParam;

                INSERT INTO trans_history_new(`bucketid`
                        ,`oldunitid`
                        ,`oldvehicleid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                VALUES ( bucketidParam
                        ,unitidParam
                        ,vehicleidVar
                        ,'7'
                        ,'2'
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);

                UPDATE  unit 
                SET     trans_statusid= 5 
                where   uid = unitidParam;

                UPDATE  simcard 
                SET     trans_statusid = 13 
                where   id = simcardidParam;

                SET     isexecutedOut = 1;

            END;
            COMMIT;

        ELSEIF statusParam = 6 THEN

            START TRANSACTION;
            BEGIN
     
                UPDATE	bucket 
                SET 	`status` = statusParam
                        ,`reschedule_date` = incompleteDateParam
                        ,`reschedule_timestamp` = todaysdateParam 
                        ,remarks = commentParam
                where 	bucketid = bucketidParam;

                INSERT INTO bucket(`apt_date`
                        ,`customerno`
                        ,`created_by`
                        , `priority`
                        , `vehicleid`
                        , `location`
                        , `timeslotid`
                        , `purposeid`
                        , `details`
                        , `coordinatorid`
                        , `create_timestamp`
                        , `status`
                        ,`docketid`
                        ,`prevBucketId`)
                SELECT  incompleteDateParam
                        ,`customerno`
                        ,`created_by`
                        , `priority`
                        , `vehicleid`
                        , `location`
                        , `timeslotid`
                        , `purposeid`
                        , `details`
                        , `coordinatorid`
                        , todaysdateParam
                        , 0
                        ,docketidParam
                        ,bucketidParam
                FROM    `bucket`
                WHERE   `bucketid`=bucketidParam
                ORDER BY    bucketid DESC
                LIMIT       1;

                INSERT INTO trans_history_new(`bucketid`
                        ,`oldunitid`
                        ,`oldvehicleid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                VALUES (bucketidParam
                        ,unitidParam
                        ,vehicleidVar
                        ,'7'
                        ,'5'
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);

                SET     isexecutedOut = 1;

            END;
            COMMIT;
            
        ELSEIF statusParam = 1 THEN

            START TRANSACTION;
            BEGIN

                UPDATE  bucket 
                SET     `status` = statusParam 
                        ,reschedule_date = rescheduleDateParam
                        ,reschedule_timestamp = todaysdateParam 
                        ,remarks = commentParam
                WHERE   bucketid = bucketidParam;
           
                INSERT INTO bucket (`apt_date`
                        ,`customerno`
                        ,`created_by`
                        , `priority`
                        , `vehicleid`
                        , `location`
                        , `timeslotid`
                        , `purposeid`
                        , `details`
                        , `coordinatorid`
                        , `create_timestamp`
                        , `status`
                        ,`docketid`
                        ,`prevBucketId`)
                SELECT 	rescheduleDateParam
                        ,`customerno`
                        ,`created_by`
                        , `priority`
                        , `vehicleid`
                        , `location`
                        , `timeslotid`
                        , `purposeid`
                        , `details`
                        , `coordinatorid`
                        , todaysdateParam
                        , 0
                        ,docketidParam
                        ,bucketidParam
                FROM 	`bucket`
                WHERE	`bucketid`=bucketidParam
                ORDER BY    bucketid DESC
                LIMIT       1;

                INSERT INTO trans_history_new(`bucketid`
                        ,`oldunitid`
                        ,`oldvehicleid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                VALUES (bucketidParam
                        ,unitidParam
                        ,vehicleidVar
                        ,'7'
                        ,'3'
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);

                SET     isexecutedOut = 1;

            END;
            COMMIT;   
            
        ELSEIF statusParam = 5 THEN

            START TRANSACTION;
            BEGIN

                UPDATE  bucket 
                SET     status = statusParam
                        , cancelled_timestamp = todaysdateParam
                        , cancellation_reason = commentParam 
                WHERE   bucketid = bucketidParam;

                INSERT INTO trans_history_new(`bucketid`
                        ,`oldunitid`
                        ,`oldvehicleid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                VALUES (bucketidParam
                        ,unitidParam
                        ,vehicleidVar
                        ,'7'
                        ,'4'
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);

                UPDATE  unit 
                SET     trans_statusid= 5 
                where   uid = unitidParam;

                UPDATE  simcard 
                SET     trans_statusid = 13 
                where   id = simcardidParam;

                SET     isexecutedOut = 1;

            END;
            COMMIT;

        END IF;

    END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `replace_both` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `replace_both`(
     IN todaysdateParam DATETIME
    ,IN customernoParam INT(11)
    ,IN oldvehicleidParam INT(11)         
    ,IN oldunitidParam INT(11)
    ,IN eteamidParam INT(11)
    ,IN newunitidParam INT(11)
    ,IN newsimidParam INT(11)
    ,IN lteamidParam INT(11)
    ,IN statusParam TINYINT(2)
    ,IN unsuccessProblemParam TINYINT(2)
    ,IN incompleteDateParam DATETIME
    ,IN rescheduleDateParam DATETIME
    ,IN bucketidParam INT(11)
    ,IN commentParam VARCHAR(100)
    ,OUT isexecutedOut TINYINT(2)
    ,OUT usernameOut varchar(50)
    ,OUT realnameOut varchar(50)
    ,OUT emailOut varchar(50)
    ,OUT vehiclenoOut VARCHAR(40)
    ,OUT oldunitOut VARCHAR(16)
    ,OUT oldsimOut VARCHAR(50)
    ,OUT newunitOut VARCHAR(16)
    ,OUT newsimOut VARCHAR(50)
    ,OUT elixirOut VARCHAR(150)
    ,OUT errormsgOut VARCHAR(100) 
    )
BEGIN
    DECLARE newsimcardnoVar VARCHAR(50);
    DECLARE oldsimcardidVar INT(11);
    DECLARE oldvehicleidVar INT(11);
    DECLARE groupidVar INT(11);
    DECLARE oldunitnoVar VARCHAR(16);
    DECLARE oldvehiclenoVar VARCHAR(40);
    DECLARE simcardnumberVar VARCHAR(50);
    DECLARE newunitnoVar VARCHAR(16);
    DECLARE onleaseVar TINYINT(2);   
    DECLARE newdeviceidVar BIGINT(11);
    DECLARE newvehicleidVar INT(11);
    DECLARE vehicleStringVar VARCHAR(20);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        /*GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error; */
        SET isexecutedOut = 0;
    END;

    SELECT      simcardno 
    INTO        newsimcardnoVar 
    FROM        simcard 
    WHERE       id =newsimidParam
    ORDER BY    id DESC
    LIMIT       1;

    SELECT      devices.simcardid
    INTO        oldsimcardidVar
    FROM        devices 
    WHERE       devices.uid =oldunitidParam
    ORDER BY    deviceid DESC
    LIMIT       1;
    
    SELECT      unitno 
    INTO        newunitnoVar 
    FROM        unit 
    WHERE       uid =newunitidParam
    ORDER BY    uid DESC
    LIMIT       1;

    SELECT      unitno
                ,onlease
    INTO        oldunitnoVar
                ,onleaseVar
    FROM        unit 
    WHERE       uid =  oldunitidParam
    ORDER BY    uid DESC
    LIMIT       1;
    
    SELECT      vehicleid
                ,vehicleno
                , groupid
    INTO        oldvehicleidVar
                ,oldvehiclenoVar
                ,groupidVar
    FROM        vehicle 
    WHERE       vehicleid =  oldvehicleidParam
    AND         isdeleted = 0
    ORDER BY    vehicleid DESC
    LIMIT       1;

    SELECT  simcardno 
    INTO    simcardnumberVar 
    FROM    simcard 
    WHERE   id = oldsimcardidVar
    ORDER BY id DESC
    LIMIT   1;

    SELECT	deviceid
    INTO 	newdeviceidVar
    FROM	devices
    WHERE	uid = newunitidParam
    LIMIT	1;
    
    SELECT 	vehicleid
    INTO	newvehicleidVar
    FROM 	vehicle
    WHERE 	uid = newunitidParam
    ORDER BY    vehicleid DESC
    LIMIT	1;
    
    SELECT 	concat('V',oldunitnoVar)
    INTO	vehicleStringVar;

    IF statusParam = 2 THEN

        START TRANSACTION;
        BEGIN
            IF oldvehicleidParam <> 0 THEN
            --  Remove Old Device    
                UPDATE 	unit 
                SET 	customerno=customernoParam
                        , trans_statusid = 5
                        , teamid=0
                        , vehicleid = oldvehicleidParam
                        ,onlease = onleaseVar
                where 	uid=newunitidParam;
                
                UPDATE  unit 
                SET      customerno=1
                        ,userid=0
                        ,trans_statusid = 20
                        ,teamid=eteamidParam
                        ,comments = commentParam
                        ,onlease = 0
                        ,vehicleid = newvehicleidVar
                WHERE   uid=oldunitidParam;
                
                UPDATE  simcard 
                SET     trans_statusid=13
                WHERE   id=oldsimcardidVar;

                UPDATE  devices 
                SET     uid = 0
                WHERE   uid=newunitidParam;

                UPDATE  devices 
                SET     uid = newunitidParam
                WHERE   uid=oldunitidParam;

            --  Populate Vehicles

                UPDATE  vehicle 
                SET     uid=0
                WHERE   uid=newunitidParam;

                UPDATE  vehicle 
                SET     uid=newunitidParam
                WHERE   vehicleid = oldvehicleidParam AND customerno=customernoParam;

            --  New Sim Card
                UPDATE  devices 
                SET     simcardid=newsimidParam 
                WHERE   simcardid=oldsimcardidVar;

                UPDATE  simcard
                SET     customerno=customernoParam
                        ,trans_statusid=13
                        ,teamid=0
                WHERE   id=newsimidParam;

                UPDATE  simcard 
                SET     customerno=1
                        ,trans_statusid=21
                        ,teamid=eteamidParam
                WHERE   id=oldsimcardidVar;

                INSERT INTO trans_history_new(`bucketid`
                        ,`oldunitid`
                        ,`newunitid`
                        ,`oldvehicleid`
                        ,`oldsimcardid`
                        ,`newsimcardid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                    VALUES (bucketidParam
                        ,oldunitidParam
                        ,newunitidParam
                        ,oldvehicleidParam
                        ,oldsimcardidVar
                        ,newsimidParam
                        ,5
                        ,1
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        ,customernoParam);

            --  Replace daily reprt  
                UPDATE  dailyreport 
                SET     uid = newunitidParam
                        , first_odometer=0
                        , last_odometer=0
                        , max_odometer=0 
                WHERE   vehicleid = oldvehicleidParam 
                AND     customerno=customernoParam;

                UPDATE	devices
                SET 	uid = oldunitidParam
                        ,simcardid = oldsimcardidVar
                        ,customerno = 1
                WHERE	deviceid = newdeviceidVar;

                UPDATE	vehicle
                SET	uid = oldunitidParam
                        ,customerno = 1
                        ,vehicleno = vehicleStringVar
                WHERE	vehicleid = newvehicleidVar;
				
                UPDATE 	bucket 
                SET 	`status` = 2
                        ,`task_completion_timestamp` = todaysdateParam 
                WHERE	bucketid= bucketidParam ;
            
                SET isexecutedOut = 1;

            ELSE
                SET isexecutedOut = 0;
                SET errormsgOut= 'Vehicle Not found';
            END IF;
        END;
        COMMIT;

        SELECT  `name` 
        INTO    elixirOut 
        FROM    team 
        WHERE   teamid = eteamidParam
        ORDER BY teamid DESC
        LIMIT   1;

        SELECT  c.username
                ,c.realname
                ,c.email 
        INTO    usernameOut
                ,realnameOut
                ,emailOut
        FROM    `user` c 
        LEFT OUTER JOIN groupman p on p.groupid =  1 
        LEFT OUTER JOIN groupman on c.userid <> groupman.userid 
        WHERE   c.customerno = customernoParam
        AND     c.email <> ''
        AND     c.isdeleted=0 
        AND     (c.groupid=groupidVar OR c.groupid ='0' ) 
        AND     (c.role = 'Administrator' OR c.role = 'Master')
        ORDER BY c.userid DESC
        LIMIT 1;

        SET vehiclenoOut=oldvehiclenoVar;
        SET oldunitOut=oldunitnoVar;
        SET oldsimOut=simcardnumberVar;
        SET newunitOut=newunitnoVar;
        SET newsimOut=newsimcardnoVar;

    ELSEIF statusParam = 3 THEN
    
        START TRANSACTION;
        BEGIN
        
            UPDATE 	bucket 
            SET 	`status`=statusParam
                        ,`is_problem_of` = unsuccessProblemParam
                        ,`remarks` = commentParam
                        ,`task_completion_timestamp` = todaysdateParam 
            where 	`bucketid`=bucketidParam;
            
            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    , `remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,oldunitidParam
                    ,oldvehicleidVar
                    ,5
                    ,2
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    ,customernoParam);

                UPDATE  unit 
                SET     trans_statusid= 5 
                where   uid = oldunitidParam;

                UPDATE  simcard 
                SET     trans_statusid = 13 
                where   id = oldsimcardidVar;
                
            SET isexecutedOut = 1;
        END;
        COMMIT;
    ELSEIF statusParam = 6 THEN
    
        START TRANSACTION;
        BEGIN
        
            UPDATE  bucket  
            SET     status= statusParam 
                    ,reschedule_date = incompleteDateParam
                    ,reschedule_timestamp = todaysdateParam 
                    ,remarks = commentParam
            where   bucketid=bucketidParam;
            
            INSERT INTO bucket (`apt_date`
                    ,`customerno`
                    ,`created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    , `create_timestamp`
                    , `status`)
            SELECT  incompleteDateParam
                    ,`customerno`
                    ,`created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    , todaysdateParam
                    , 0
            FROM    `bucket`
            WHERE   `bucketid` = bucketidParam
            ORDER BY `bucketid` DESC
            LIMIT   1;
        
            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    , `remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,oldunitidParam
                    ,oldvehicleidVar
                    ,5
                    ,5
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    , customernoParam);
                    
            SET     isexecutedOut = 1;
        END;
        COMMIT;
        
    ELSEIF statusParam = 1 THEN
    
        START TRANSACTION;
        BEGIN
        
            UPDATE  bucket 
            SET     status = statusParam 
                    ,reschedule_date = rescheduleDateParam
                    ,reschedule_timestamp = todaysdateParam 
                    ,remarks = commentParam
            WHERE   bucketid = bucketidParam;
            
            INSERT INTO bucket (`apt_date`
                    ,`customerno`
                    ,`created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    , `create_timestamp`
                    , `status`)
            SELECT  rescheduleDateParam
                    ,`customerno`
                    ,`created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    ,todaysdateParam
                    ,0
            FROM    `bucket`
            WHERE   `bucketid` = bucketidParam
            ORDER BY `bucketid` DESC
            LIMIT   1;
        
            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    , `remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,oldunitidParam
                    ,oldvehicleidVar
                    ,5
                    ,3
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    ,customernoParam);

            SET     isexecutedOut = 1;
        END;
        COMMIT;

    ELSEIF statusParam = 5 THEN
    
        START TRANSACTION;
        BEGIN 
        
            UPDATE  bucket 
            SET     status = statusParam
                    , cancelled_timestamp = todaysdateParam
                    , cancellation_reason = commentParam 
            WHERE   bucketid = bucketidParam;
            
            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    , `remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,oldunitidParam
                    ,oldvehicleidVar
                    ,5
                    ,4
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    ,customernoParam);

            UPDATE  unit 
            SET     trans_statusid= 5 
            where   uid = oldunitidParam;

            UPDATE  simcard 
            SET     trans_statusid = 13 
            where   id = oldsimcardidVar;
            
            SET isexecutedOut = 1;
        END;
        COMMIT;
    END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `replace_device` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `replace_device`(
    IN todaysdateParam DATETIME
    ,IN customernoParam INT(11)
    ,IN oldvehicleidParam INT(11)    
    ,IN oldunitidParam INT(11)
    ,IN eteamidParam INT(11)
    ,IN newunitidParam INT(11)
    ,IN lteamidParam INT(11)
    ,IN bucketidParam INT(11)
    ,IN commentParam VARCHAR(100)
    ,OUT isexecutedOut TINYINT(2)
    ,OUT usernameOut VARCHAR(50)
    ,OUT realnameOut VARCHAR(50)
    ,OUT emailOut VARCHAR(50)
    ,OUT vehiclenoOut VARCHAR(40)
    ,OUT oldunitOut VARCHAR(16)
    ,OUT newunitOut VARCHAR(16)
    ,OUT simcardOut VARCHAR(50)
    ,OUT elixirOut VARCHAR(150)
    ,OUT errormsgOut VARCHAR(100)
)
BEGIN
    DECLARE oldsimcardidVar INT;
    DECLARE groupidVar INT;
    DECLARE oldvehiclenoVar VARCHAR(40);
    DECLARE newunitnoVar VARCHAR(16);
    DECLARE oldunitnoVar VARCHAR(16);
    DECLARE simcardnoVar VARCHAR(50);
    DECLARE onleaseVar TINYINT(2);
    DECLARE newvehicleidVar INT(11);
    DECLARE newdeviceidVar bigint(11);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        /* GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error; */
        SET isexecutedOut = 0;
    END;
    
    SELECT      devices.simcardid
    INTO        oldsimcardidVar
    FROM        devices 
    WHERE       devices.uid =oldunitidParam
    ORDER BY    deviceid DESC
    LIMIT       1;
    
    SELECT      vehicleid
    INTO        newvehicleidVar
    FROM        vehicle
    WHERE       uid = newunitidParam
    AND         isdeleted = 0
    ORDER BY    vehicleid DESC
    LIMIT       1;
    
    SELECT      v.groupid
                ,vehicleno
    INTO        groupidVar
                ,oldvehiclenoVar
    FROM        vehicle v
    WHERE       v.vehicleid=oldvehicleidParam
    AND         v.isdeleted = 0
    ORDER BY    v.vehicleid DESC
    LIMIT       1;
    
    SELECT      unitno 
    INTO        newunitnoVar 
    FROM        unit 
    WHERE       uid =newunitidParam
    ORDER BY    uid DESC
    LIMIT       1;

    SELECT      unitno
    INTO        oldunitnoVar
    FROM        unit 
    WHERE       uid=oldunitidParam
    ORDER BY    uid DESC
    LIMIT       1;

    SELECT      onlease 
    INTO        onleaseVar
    FROM        unit 
    WHERE       uid = oldunitidParam
    ORDER BY    uid DESC
    LIMIT       1;
    
    SELECT      simcardno 
    INTO        simcardnoVar 
    FROM        simcard 
    WHERE       id = oldsimcardidVar
    ORDER BY    id DESC
    LIMIT       1;
    
    SELECT	deviceid 
    INTO 	newdeviceidVar 
    FROM 	devices 
    WHERE       uid=newunitidParam
    ORDER BY    deviceid DESC
    LIMIT       1;
    
    START TRANSACTION;
    BEGIN

        IF oldvehicleidParam <> 0 THEN

            UPDATE  unit 
            SET     customerno=customernoParam
                    , trans_statusid = 5
                    , teamid=0
                    , vehicleid = oldvehicleidParam
                    ,onlease = onleaseVar
            where   uid=newunitidParam;

            UPDATE  simcard 
            SET     trans_statusid=13
            WHERE   id=oldsimcardidVar;

            UPDATE  devices 
            SET     uid = newunitidParam
            WHERE   uid=oldunitidParam;

            UPDATE  devices
            SET     uid = oldunitidParam
            WHERE   deviceid = newdeviceidVar;   

--          old groupid set for new unit 
--          TODO
            UPDATE  vehicle 
            SET     uid = 0
            WHERE   uid = newunitidParam;

            UPDATE  vehicle 
            SET     uid = newunitidParam
            WHERE   vehicleid = oldvehicleidParam AND customerno = customernoParam;

    --      Remove Old Unit    
            UPDATE  unit 
            SET     customerno=1
                    , userid=0
                    ,  trans_statusid = 20
                    ,teamid=eteamidParam
                    ,comments = commentParam
                    ,onlease = 0
                    , vehicleid = newvehicleidVar
            WHERE   uid=oldunitidParam;

    --      Daily report update replace unit for customer 
            UPDATE  dailyreport 
            SET     uid = newunitidParam
                    , first_odometer=0
                    , last_odometer=0
                    , max_odometer=0 
            WHERE   vehicleid = oldvehicleidParam 
            AND     customerno=customernoParam;

            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`newunitid`
                    ,`oldvehicleid`
                    ,`oldsimcardid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    , `remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,oldunitidParam
                    ,newunitidParam
                    ,oldvehicleidParam
                    ,oldsimcardidVar
                    ,4
                    ,1
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    ,customernoParam);

            UPDATE  vehicle
            SET     uid = oldunitidParam
                    ,customerno = 1
            WHERE   vehicleid = newvehicleidVar;

            UPDATE  dailyreport 
            SET     uid = oldunitidParam
                    ,customerno = 1
            WHERE   vehicleid = newvehicleidVar;
			
            UPDATE  bucket 
            SET     `status` = 2
                    ,`task_completion_timestamp` = todaysdateParam 
            WHERE   bucketid = bucketidParam ;
            
            SET isexecutedOut=1;

        ELSE

            SET isexecutedOut=0;
            SET errormsgOut='Vehicle Not Found';

        END IF;

    END;
    COMMIT;

    SELECT      `name` 
    INTO        elixirOut 
    FROM        team 
    WHERE       teamid = eteamidParam
    ORDER BY    teamid DESC
    LIMIT       1;

    SELECT          username
                    ,realname
                    ,email 
    INTO            usernameOut
                    ,realnameOut
                    ,emailOut
    FROM            `user` 
    LEFT OUTER JOIN groupman p ON p.groupid = groupidVar 
    LEFT OUTER JOIN groupman ON `user`.userid <> groupman.userid 
    WHERE           `user`.customerno = customernoParam 
    AND             `user`.email <> '' 
    AND             `user`.isdeleted=0 
    AND             (`user`.groupid= groupidVar OR `user`.groupid ='0') 
    AND             (`user`.role='Administrator' OR `user`.role = 'Master') 
    ORDER BY        `user`.userid DESC
    LIMIT           1;
        
    SET vehiclenoOut = oldvehiclenoVar;
    SET simcardOut = simcardnoVar;
    SET oldunitOut = oldunitnoVar;
    SET newunitOut=newunitnoVar;
   
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `replace_sim` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `replace_sim`(
    IN todaysdateParam DATETIME
    ,IN customernoParam INT(11)
    ,IN oldvehicleidParam INT(11)     
    ,IN unitidParam INT(11)    
    ,IN eteamidParam INT(11)
    ,IN newsimidParam INT(11)
    ,IN lteamidParam INT(11)
    ,IN bucketidParam INT(11)
    ,IN commentParam VARCHAR(50)
    ,OUT isexecutedOut TINYINT(2)
    ,OUT usernameOut varchar(50)
    ,OUT realnameOut varchar(50)
    ,OUT emailOut varchar(50)
    ,OUT vehiclenoOut VARCHAR(40)
    ,OUT oldsimcardnoOut VARCHAR(50)
    ,OUT newsimcardnoOut VARCHAR(50)
    ,OUT elixirOut VARCHAR(150)
    )
BEGIN
    DECLARE oldsimcardidVar INT;
    DECLARE simdeviceidVar INT;
    DECLARE oldsimcardnoVar VARCHAR(50);
    DECLARE newsimcardnoVar VARCHAR(50);
    DECLARE vehiclenoVar VARCHAR(50);
    DECLARE groupidVar INT(11);
    
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            ROLLBACK;
            /* GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
            @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
            SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
            SELECT @full_error; */
            SET isexecutedOut = 0;
        END;

    SELECT      simcardid
                ,deviceid 
    INTO        oldsimcardidVar
                ,simdeviceidVar 
    FROM        devices 
    WHERE       uid = unitidParam
    ORDER BY    deviceid DESC
    LIMIT       1;

    SELECT      simcardno 
    INTO        oldsimcardnoVar 
    FROM        simcard 
    WHERE       id = oldsimcardidVar
    ORDER BY    id DESC
    LIMIT       1;
    
    SELECT      simcardno 
    INTO        newsimcardnoVar 
    FROM        simcard 
    WHERE       id = newsimidParam
    ORDER BY    id DESC
    LIMIT       1;

	-- select vehicleid;
    SELECT      vehicleno
                ,groupid 
    INTO        vehiclenoVar
                ,groupidVar 
    FROM        vehicle 
    WHERE       vehicleid = oldvehicleidParam
    AND         isdeleted = 0
    ORDER BY    vehicleid DESC
    LIMIT       1;

    START TRANSACTION;
    BEGIN

        UPDATE  unit 
        SET     trans_statusid = 5
        WHERE   uid = unitidParam;

    --  New Sim Card
        UPDATE  devices 
        SET     simcardid = newsimidParam 
        WHERE   simcardid = oldsimcardidVar 
        AND     deviceid = simdeviceidVar;

        UPDATE  simcard
        SET     customerno = customernoParam
                ,trans_statusid = 13
                ,teamid = 0
        WHERE   id = newsimidParam;

        UPDATE  simcard 
        SET     customerno = 1
                ,trans_statusid = 21
                ,teamid = eteamidParam
        WHERE   id = oldsimcardidVar;

        INSERT INTO trans_history_new(`bucketid` 
                ,`oldunitid`
                ,`oldvehicleid`
                ,`oldsimcardid`
                ,`newsimcardid`
                ,`transtypeid`
                ,`bucketstatusid`
                , `remark`
                ,`teamid`
                ,`createdby`
                ,`createdon`
                ,`customerno`)
        VALUES (bucketidParam
                ,unitidParam
                ,oldvehicleidParam
                ,oldsimcardidVar
                ,newsimidParam
                ,3
                ,1
                ,commentParam
                ,eteamidParam
                ,lteamidParam
                ,todaysdateParam
                ,customernoParam);
		
        UPDATE 	bucket 
        SET 	`status` = 2
                ,`task_completion_timestamp` = todaysdateParam 
        WHERE	bucketid= bucketidParam ;
                
        SET isexecutedOut = 1;

    END;
    COMMIT;

    SELECT      `name` 
    INTO        elixirOut 
    FROM        team 
    WHERE       teamid = eteamidParam
    ORDER BY    teamid DESC
    LIMIT       1;

    SELECT          c.username
                    ,c.realname
                    ,c.email 
    INTO            usernameOut
                    ,realnameOut
                    ,emailOut 
    FROM            `user` c 
    LEFT OUTER JOIN groupman p ON p.groupid = groupidVar 
    LEFT OUTER JOIN groupman ON c.userid <> groupman.userid 
    WHERE           c.customerno = customernoParam 
    AND             c.email <> '' 
    AND             c.isdeleted=0 
    AND             (c.groupid=groupidVar OR c.groupid ='0' ) 
    AND             (c.`role` = 'Administrator' OR c.`role` = 'Master')
    ORDER BY        c.userid DESC
    LIMIT           1;
    
    SET vehiclenoOut=vehiclenoVar;
    SET oldsimcardnoOut=oldsimcardnoVar;
    SET newsimcardnoOut=newsimcardnoVar;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `resetSMSCount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `resetSMSCount`()
BEGIN
    
    UPDATE `vehicle` SET sms_count=0;
    
    UPDATE `user` SET sms_count=0;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `re_install_device` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `re_install_device`(
    IN todaysdateParam DATETIME
    ,IN unitidParam INT(11)
    ,IN eteamidParam INT(11)
    ,IN newvehiclenoParam VARCHAR(40)
    ,IN kindParam VARCHAR(40)
    ,IN lteamidParam INT(11)
    ,IN statusParam TINYINT(2)
    ,IN unsuccessProblemParam TINYINT(2)
    ,IN incompleteDateParam DATETIME
    ,IN rescheduleDateParam DATETIME
    ,IN bucketidParam INT(11)
    ,IN commentParam VARCHAR(100)
    ,IN docketidParam INT
    ,OUT isexecutedOut TINYINT(2)
    ,OUT newvehiclenoOut VARCHAR(40)
    ,OUT oldvehiclenoOut VARCHAR(40)
    ,OUT usernameOut VARCHAR(50)
    ,OUT realnameOut VARCHAR(50)
    ,OUT emailOut VARCHAR(50)
    ,OUT elixirOut VARCHAR(150)
    ,OUT errormsgOut VARCHAR(100))
BEGIN
    DECLARE oldvehicleidVar INT(11);
    DECLARE newvehicleidVar INT(11);
    DECLARE customernoVar INT(11);
    DECLARE oldsimcardidVar INT(11);
    DECLARE groupidVar INT(11);
    DECLARE driveridVar INT(11);

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            ROLLBACK;

            SET isexecutedOut = 0;
        END;

        SELECT  vehicleid
                ,customerno
                ,vehicleno
                ,groupid
                ,driverid
        INTO    oldvehicleidVar
                ,customernoVar
                ,oldvehiclenoOut
                ,groupidVar
                ,driveridVar
        FROM    vehicle
        WHERE   uid=unitidParam
        AND     isdeleted=0
        ORDER BY vehicleid DESC
        LIMIT   1;

        SELECT  simcardid
        INTO    oldsimcardidVar
        FROM    devices
        WHERE   uid = unitidParam
        ORDER BY deviceid DESC
        LIMIT   1;

    IF statusParam = 2 THEN

        IF oldvehicleidVar IS NOT NULL AND oldvehicleidVar <> 0 THEN
            START TRANSACTION;
            BEGIN

                INSERT INTO vehicle(`vehicleno`
                    ,`uid`
                    ,`customerno`
                    ,`driverid`
                    ,`kind`)
                VALUES  (newvehiclenoParam
                    ,unitidParam
                    ,customernoVar
                    ,driveridVar
                    ,kindParam);

                SELECT  LAST_INSERT_ID()
                INTO    newvehicleidVar;

                UPDATE  unit
                SET     vehicleid = newvehicleidVar
                        ,teamid = eteamidParam
                        ,trans_statusid = 5
                WHERE   vehicleid = oldvehicleidVar;

                UPDATE  driver
                SET     vehicleid = newvehicleidVar
                        ,customerno = customernoVar
                WHERE   vehicleid = oldvehicleidVar
                AND     isdeleted = 0;

                UPDATE  eventalerts
                SET     vehicleid=newvehicleidVar
                        ,customerno=customernoVar
                WHERE   vehicleid=oldvehicleidVar;

                UPDATE  ignitionalert
                SET     vehicleid=newvehicleidVar
                        ,customerno=customernoVar
                WHERE   vehicleid=oldvehicleidVar;

                UPDATE  acalerts
                SET     vehicleid=newvehicleidVar
                        ,customerno=customernoVar
                WHERE   vehicleid=oldvehicleidVar;

                UPDATE  checkpointmanage
                SET     vehicleid=newvehicleidVar
                        ,customerno=customernoVar
                WHERE   vehicleid=oldvehicleidVar
                AND     isdeleted=0;

                UPDATE  fenceman
                SET     vehicleid=newvehicleidVar
                        ,customerno=customernoVar
                WHERE   vehicleid=oldvehicleidVar
                AND     isdeleted=0;

                UPDATE  vehicle
                SET     isdeleted=1
                        ,uid=0
                WHERE   vehicleid=oldvehicleidVar;

                INSERT INTO trans_history_new(`bucketid`
                        ,`oldunitid`
                        ,`oldvehicleid`
                        ,`newvehicleid`
                        ,`oldsimcardid`
                        ,`transtypeid`
                        ,`bucketstatusid`
                        , `remark`
                        ,`teamid`
                        ,`createdby`
                        ,`createdon`
                        ,`customerno`)
                VALUES(bucketidParam
                        ,unitidParam
                        ,oldvehicleidVar
                        ,newvehicleidVar
                        ,oldsimcardidVar
                        ,6
                        ,1
                        ,commentParam
                        ,eteamidParam
                        ,lteamidParam
                        ,todaysdateParam
                        , customernoVar);

                UPDATE  bucket
                SET     `status` = 2
                        ,`task_completion_timestamp` = todaysdateParam
                WHERE   bucketid= bucketidParam ;

                SET     isexecutedOut = 1;
            END;
            COMMIT;

        ELSE
            SET isexecutedOut = 0;
            SET errormsgOut = 'Old vehicle not found';
        END IF;

        SELECT  `name`
        INTO    elixirOut
        FROM    team
        WHERE   teamid = eteamidParam
        LIMIT   1;

        SELECT          c.username
                        ,c.realname
                        ,c.email
        INTO            usernameOut
                        ,realnameOut
                        ,emailOut
        FROM            `user` c
        LEFT OUTER JOIN groupman p ON p.groupid = groupidVar
        LEFT OUTER JOIN groupman ON c.userid <> groupman.userid
        WHERE           c.customerno =  customernoVar
        AND             c.email <> ''
        AND             (c.groupid=groupidVar OR c.groupid ='0' )
        AND             (c.role = 'Administrator' OR c.role = 'Master')
        ORDER BY        c.`userid` DESC
        LIMIT           1;

        SET newvehiclenoOut=newvehiclenoParam;

    ELSEIF statusParam = 3 THEN

        START TRANSACTION;
        BEGIN

            UPDATE  `bucket`
            SET     `status` = statusParam
                        ,`is_problem_of` = unsuccessProblemParam
                        ,`remarks` = commentParam
                        ,`task_completion_timestamp` = todaysdateParam
            where   `bucketid`=bucketidParam;

            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    , `remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,unitidParam
                    ,oldvehicleidVar
                    ,6
                    ,2
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    ,customernoVar);

            UPDATE  unit
            SET     trans_statusid= 5
            where   uid = unitidParam;

            UPDATE  simcard
            SET     trans_statusid = 13
            where   id = oldsimcardidVar;

            SET     isexecutedOut = 1;
        END;
        COMMIT;

    ELSEIF statusParam = 6 THEN

        START TRANSACTION;
        BEGIN

            UPDATE  `bucket`
            SET     `status` = statusParam
                    ,`reschedule_date` = incompleteDateParam
                    ,`reschedule_timestamp` = todaysdateParam
                    ,remarks = commentParam
            where   `bucketid` = bucketidParam;

            INSERT INTO bucket (`apt_date`
                    ,`customerno`
                    ,`created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    , `create_timestamp`
                    , `status`
                    ,`docketid`)
            SELECT  incompleteDateParam
                    ,`customerno`
                    ,`created_by`
                    ,`priority`
                    ,`vehicleid`
                    ,`location`
                    ,`timeslotid`
                    ,`purposeid`
                    ,`details`
                    ,`coordinatorid`
                    ,todaysdateParam
                    , 0
                    ,docketidParam
            FROM    `bucket`
            WHERE   `bucketid` = bucketidParam
            ORDER BY `bucketid` DESC
            LIMIT   1;

            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    , `remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,unitidParam
                    ,oldvehicleidVar
                    ,6
                    ,5
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    ,customernoVar);

            SET     isexecutedOut = 1;
        END;
        COMMIT;

    ELSEIF statusParam = 1 THEN

        START TRANSACTION;
        BEGIN

            UPDATE  `bucket`
            SET     `status` = statusParam
                    ,`reschedule_date` = rescheduleDateParam
                    ,`reschedule_timestamp` = todaysdateParam
                    ,remarks = commentParam
            WHERE   `bucketid` = bucketidParam;

            INSERT INTO bucket (`apt_date`
                    ,`customerno`
                    ,`created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    , `create_timestamp`
                    , `status`
                    ,`docketid`)
            SELECT rescheduleDateParam
                    ,`customerno`
                    ,`created_by`
                    , `priority`
                    , `vehicleid`
                    , `location`
                    , `timeslotid`
                    , `purposeid`
                    , `details`
                    , `coordinatorid`
                    , todaysdateParam
                    , 0
                    ,docketidParam
            FROM    `bucket`
            WHERE   `bucketid` = bucketidParam
            ORDER BY `bucketid` DESC
            LIMIT   1;

            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    , `remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,unitidParam
                    ,oldvehicleidVar
                    ,6
                    ,3
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    ,customernoVar);

            SET     isexecutedOut = 1;
        END;
        COMMIT;

    ELSEIF statusParam = 5 THEN

        START TRANSACTION;
        BEGIN

            UPDATE  `bucket`
            SET     `status` = statusParam
                    ,`cancelled_timestamp` = todaysdateParam
                    ,`cancellation_reason` = commentParam
            WHERE   `bucketid` = bucketidParam;

            INSERT INTO trans_history_new(`bucketid`
                    ,`oldunitid`
                    ,`oldvehicleid`
                    ,`transtypeid`
                    ,`bucketstatusid`
                    , `remark`
                    ,`teamid`
                    ,`createdby`
                    ,`createdon`
                    ,`customerno`)
            VALUES (bucketidParam
                    ,unitidParam
                    ,oldvehicleidVar
                    ,6
                    ,4
                    ,commentParam
                    ,eteamidParam
                    ,lteamidParam
                    ,todaysdateParam
                    ,customernoVar);

            UPDATE  unit
            SET     trans_statusid= 5
            where   uid = unitidParam;

            UPDATE  simcard
            SET     trans_statusid = 13
            where   id = oldsimcardidVar;

            SET     isexecutedOut = 1;
        END;
        COMMIT;

    END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sequence_role` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `sequence_role`( 
    IN custno INT
)
BEGIN
        DECLARE roleid INT DEFAULT 0;
	DECLARE parentid INT DEFAULT 0;
	DECLARE counter INT DEFAULT 1;
        SET counter = 1;
        
        WHILE (counter != -1) DO
                SET     roleid = 0;
                SELECT  id INTO roleid FROM role
                WHERE   parentroleid = parentid
                AND     isdeleted = 0
                AND     customerno = custno;
                IF (roleid != 0) THEN
                    BEGIN
                        UPDATE  role
                        SET     sequenceno = counter
                        WHERE   id = roleid
                        AND     isdeleted = 0
                        AND     customerno = custno;

                        SET parentid = roleid;
                        SET counter = counter + 1;
                    END;
                ELSE
                    BEGIN
                        SET counter = -1;
                    END;
                END IF;
        END WHILE;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sim_of_teamid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `sim_of_teamid`(
	IN teamidparam INT
	)
BEGIN
SELECT simcard.id as simid, simcard.simcardno FROM simcard 
INNER JOIN trans_status ON trans_status.id = simcard.trans_statusid 
WHERE trans_statusid IN (19,21) AND simcard.teamid=teamidparam;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `speed_check_userkey` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `speed_check_userkey`(
		 IN usrkeyparam varchar(150)

		)
BEGIN
		
        
		SELECT username,email,phone,customerno,userkey,realname,userid	
		FROM  user
			
		WHERE userkey = usrkeyparam
        AND user.isdeleted=0
        ;
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `speed_forgot_password` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `speed_forgot_password`(
 IN usernameparam VARCHAR(50)
, IN todaysdate datetime
, OUT userexists TINYINT
)
BEGIN
	DECLARE otpparam INT;
	DECLARE otpvalidupto DATETIME;
    DECLARE useremail VARCHAR(50);
    DECLARE userphone VARCHAR(15);
    DECLARE custno INT;
	DECLARE useridparam INT;
    
	SELECT 	userid, COALESCE(email, username, ''), COALESCE(phone, ''), customerno
    INTO 	useridparam, useremail, userphone, custno
    FROM 	user
    WHERE 	(username=usernameparam OR email=usernameparam)
    AND 	isdeleted = 0;
    
	IF (useridparam IS NOT NULL)THEN
		CALL insert_forgot_password_request(useridparam, todaysdate, @otpparam, @otpvaliduptoparam);
		SELECT @otpparam, @otpvaliduptoparam INTO otpparam, otpvalidupto;
        
        SELECT 	useridparam
				, otpparam
				, otpvalidupto
                , useremail
                , userphone
                , custno;
                
		SET userexists = 1;
	ELSE
		SET userexists = 0;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `speed_get_users` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `speed_get_users`(
		 IN usrparam varchar(50)
         ,IN pass varchar(100)
		)
BEGIN
		
        
		SELECT username,email,phone,customerno,userkey,realname	
		FROM  user
			
		WHERE username = usrparam AND password = pass
        AND user.isdeleted=0
        ;
	END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `suspect_unit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `suspect_unit`(
     IN commentParam VARCHAR(50)
    ,IN unitidParam INT(11)
    ,IN simcardidParam INT(11)
    ,IN customernoParam INT(11)
    ,IN aptdateParam DATE
    ,IN conameParam VARCHAR(30)
    ,IN cophoneParam VARCHAR(15)
    ,IN priorityParam INT(4)
    ,IN locationParam VARCHAR(50)
    ,IN timeslotParam INT(4)
    ,IN purposeParam INT(4)
    ,IN detailsParam VARCHAR(100)
    ,IN coordinatorParam INT(11)
    ,IN lteamidParam INT(11)
    ,IN todaysdateParam DATETIME
    ,OUT isexecutedOut TINYINT(2)
    ,OUT vehiclenoOut VARCHAR(40)
    ,OUT unitnoOut VARCHAR(11)
    ,OUT simcardnoOut VARCHAR(50)
    ,OUT usernameOut VARCHAR(50)
    ,OUT realnameOut VARCHAR(50)
    ,OUT emailOut VARCHAR(50)
    ,OUT elixirOut VARCHAR(150)
    ,OUT msgOut VARCHAR(50))
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
            ROLLBACK;
           /* GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
            @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
            SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
            SELECT @full_error;   */
            SET isexecutedOut = 0;
        END;
    BEGIN 
    DECLARE simcardnoVar VARCHAR(50);
    DECLARE unitnoVar VARCHAR(11);
    DECLARE vehicleidVar INT(11);
    DECLARE vehiclenoVar VARCHAR(40);
    DECLARE groupidVar INT(11);
    DECLARE concatstrVar VARCHAR(100);

    SELECT  simcardno 
    INTO    simcardnoVar 
    FROM    simcard 
    WHERE   id = simcardidParam
    LIMIT   1;
    
    SELECT  unitno 
    INTO    unitnoVar 
    FROM    unit 
    WHERE   uid = unitidParam
    LIMIT   1;

    SELECT  v.vehicleid 
    INTO    vehicleidVar 
    FROM    vehicle v
    INNER JOIN unit ON unit.uid = v.uid
    WHERE   v.uid = unitidParam
    LIMIT   1;
    
    SELECT  CONCAT('Suspected Unit #', unitnoVar ,' and Suspected Sim #', coalesce(simcardnoVar,''))
    INTO    concatstrVar;

    IF vehicleidVar IS NOT NULL AND vehicleidVar > 0 THEN

        START TRANSACTION;	 
        BEGIN

            UPDATE  unit 
            SET     trans_statusid = 6
                    ,comments = commentParam 
            WHERE   uid = unitidParam;

            UPDATE  simcard 
            SET     trans_statusid = 14
                    , comments = commentParam 
            WHERE   id = simcardidParam;
            
            INSERT INTO trans_history (`customerno`
                    ,`unitid`
                    ,`teamid`
                    , `type`
                    , `trans_time`
                    , `statusid`
                    , `transaction`
                    , `simcardno`
                    , `invoiceno`
                    , `expirydate`
                    , `comments`
                    , `vehicleid`)
            VALUES (customernoParam
                    ,unitidParam
                    ,lteamidParam
                    ,0
                    ,todaysdateParam
                    ,6
                    ,'Suspected'
                    ,simcardnoVar
                    ,''
                    ,''
                    ,commentParam
                    ,vehicleidVar);

            INSERT INTO trans_history (`customerno`
                        ,`simcard_id`
                        ,`teamid`
                        ,`type`
                        ,`trans_time`
                        ,`statusid`
                        ,`transaction`
                        ,`simcardno`
                        ,`invoiceno`
                        ,`expirydate`
                        ,`comments`
                        ,`vehicleid`)
            VALUES (customernoParam
                        ,simcardidParam
                        ,lteamidParam
                        ,1
                        ,todaysdateParam
                        , 14
                        ,'Suspected'
                        ,''
                        ,''
                        ,''
                        ,commentParam
                        ,vehicleidVar);

            INSERT INTO trans_history (`customerno`
                        ,`unitid`
                        ,`teamid`
                        ,`type`
                        ,`trans_time`
                        ,`statusid`
                        ,`transaction`
                        ,`simcardno`
                        ,`invoiceno`
                        ,`expirydate`
                        ,`comments`
                        ,`vehicleid`)
            VALUES (customernoParam
                        ,0
                        ,lteamidParam
                        ,2
                        ,todaysdateParam
                        ,0
                        ,concatstrVar
                        , ''
                        , ''
                        , ''
                        ,commentParam
                        ,vehicleidVar);

            IF conameParam <> '' THEN

                INSERT INTO contactperson_details (`typeid`
                        ,`person_name`
                        ,`cp_phone1`
                        , `customerno`
                        , `insertedby`
                        , `insertedon`)
                VALUES (3
                        ,conameParam
                        ,cophoneParam
                        ,customernoParam
                        ,lteamidParam
                        ,todaysdateParam);

                SELECT  LAST_INSERT_ID() 
                INTO    coordinatorParam;

            END IF;

            INSERT INTO bucket (`apt_date`
                ,`customerno`
                ,`created_by`
                ,`priority`
                ,`vehicleid`
                ,`location`
                ,`timeslotid`
                ,`purposeid`
                ,`details`
                ,`coordinatorid`
                ,`create_timestamp`
                , status)
            VALUES (aptdateParam
                , customernoParam
                ,lteamidParam
                ,priorityParam
                ,vehicleidVar
                ,locationParam
                ,timeslotParam
                ,purposeParam
                ,detailsParam
                ,coordinatorParam
                ,todaysdateParam
                ,0);

            SET isexecutedOut = 1;
            SET msgOut = 'Suspect Successfully';

        END;
        COMMIT; 

    ELSE
        
        SET isexecutedOut = 0;
        SET msgOut = 'Vehicle not present';

    END IF;
    
    SELECT  vehicleno
            ,groupid 
    INTO    vehiclenoVar
            ,groupidVar 
    FROM    vehicle 
    WHERE   vehicleid = vehicleidVar
    LIMIT   1;

    SELECT  `name` 
    INTO    elixirOut 
    FROM    team 
    WHERE   teamid = lteamidParam
    LIMIT   1;

    SELECT  c.username
            ,c.realname
            ,c.email
    INTO    usernameOut
            ,realnameOut
            ,emailOut
    FROM    `user` c 
    LEFT OUTER JOIN groupman p ON p.groupid =groupidVar 
    LEFT OUTER JOIN groupman ON c.userid <> groupman.userid 
    WHERE   c.customerno = customernoParam 
    AND     c.email <> ''
    AND     c.isdeleted = 0 
    AND     (c.groupid= groupidVar OR c.groupid = 0) 
    AND     (c.`role` = 'Administrator' OR c.role = 'Master')
    GROUP BY c.userid 
    LIMIT   1;

    SET vehiclenoOut = vehiclenoVar;
    SET unitnoOut = unitnoVar;
    SET simcardnoOut = simcardnoVar;

   END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `team_cron_archive_knowledgebase_email` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `team_cron_archive_knowledgebase_email`(
IN emailidparam INT
,IN cnoparam INT 
)
BEGIN
DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
	END;
    START TRANSACTION;
    BEGIN
    INSERT INTO knowledgebase_emaillog_history(
    kb_emailid
    ,kbsid
    ,kb_to
    ,kb_from
    ,kb_subject
    ,kb_message
    ,islater
    ,laterdatetime
    ,issent
    ,customerno
    ,createdby
    ,createdon
    ,updatedby
    ,updatedon
    ,isdeleted
    )
    SELECT
		ke.kb_emailid
        ,ke.kbsid
        ,ke.kb_to
        ,ke.kb_from
        ,ke.kb_subject
        ,ke.kb_message
        ,ke.islater
        ,ke.laterdatetime
        ,ke.issent
        ,ke.customerno
        ,ke.createdby
        ,ke.createdon
        ,ke.updatedby
        ,ke.updatedon
        ,ke.isdeleted
    FROM knowledgebase_emaillog ke
    WHERE ke.kb_emailid = emailidparam
    AND ke.customerno = cnoparam
    ;
    call team_delete_knowledgebase_emaillog(cnoparam,emailidparam);
    
    COMMIT;
    END;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `team_cron_getsent_knowledgebase_email` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `team_cron_getsent_knowledgebase_email`(
)
BEGIN
SELECT * FROM knowledgebase_emaillog WHERE issent = 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `team_cron_get_knowledgebase_email` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `team_cron_get_knowledgebase_email`(
IN curdatetime datetime
)
BEGIN
SELECT *
FROM(SELECT *,
CASE 
   WHEN islater = 1 THEN
     `laterdatetime`
   ELSE
    `createdon` 
   END
   AS readtime   
FROM `knowledgebase_emaillog`) as ke
WHERE DATE_FORMAT(ke.readtime,'%Y-%m-%d %H:%i') = curdatetime AND ke.isdeleted = 0 AND ke.issent =0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `team_cron_update_knowledgebase_email` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `team_cron_update_knowledgebase_email`(
IN emailidparam INT
,IN issentparam tinyint

)
BEGIN

UPDATE knowledgebase_emaillog SET issent = issentparam 
WHERE kb_emailid = emailidparam;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `team_delete_knowledgebase_emaillog` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `team_delete_knowledgebase_emaillog`(
IN custnoparam INT
,IN emailidparam INT 
)
BEGIN
DELETE FROM knowledgebase_emaillog 
    WHERE customerno = custnoparam
    AND kb_emailid = emailidparam
    ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `unit_of_teamid` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `unit_of_teamid`(
	IN teamidparam INT
	)
BEGIN
SELECT unit.unitno, unit.uid FROM unit 
    INNER JOIN trans_status ON trans_status.id = unit.trans_statusid 
    WHERE trans_statusid IN (18,20) AND unit.teamid=teamidparam;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `unit_sim_veh_of_cust` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `unit_sim_veh_of_cust`(
	IN customernoParam INT(11)
	)
BEGIN
    SELECT      unit.uid
                ,unit.unitno
                ,simcard.id
                ,simcard.simcardno
                ,vehicle.vehicleid
                ,vehicle.vehicleno 
    FROM        vehicle
    INNER JOIN  unit ON unit.uid=vehicle.uid
    INNER JOIN  devices ON devices.uid=unit.uid
    LEFT OUTER JOIN simcard ON simcard.id=devices.simcardid
    WHERE       vehicle.customerno=customernoParam 
    AND         isdeleted = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `unmappedVehicle` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `unmappedVehicle`(
IN customernoParam INT
)
BEGIN
select count(v.vehicleid) as count,v.customerno,c.customercompany FROM vehicle v
INNER JOIN unit u ON u.vehicleid = v.vehicleid AND u.unitno NOT LIKE 'D%'  
INNER JOIN devices d ON d.uid = u.uid
INNER JOIN customer c ON v.customerno = c.customerno
INNER JOIN `simcard` s ON s.id = d.simcardid AND s.trans_statusid IN (13,14)
WHERE v.customerno = customernoParam AND v.isdeleted=0 AND c.renewal NOT IN(-2,-1) AND c.customerno NOT IN(1,2) and
v.vehicleid NOT IN (SELECT l.vehicleid
FROM    ledger_veh_mapping as l
INNER JOIN vehicle as v ON l.vehicleid = v.vehicleid
INNER JOIN unit as u ON u.vehicleid = v.vehicleid
INNER JOIN devices as d ON d.uid = u.uid
INNER JOIN customer c ON v.customerno = c.customerno
INNER JOIN `simcard` s ON s.id = d.simcardid AND s.trans_statusid IN (13,14)
WHERE   l.customerno = customernoParam AND l.isdeleted = 0)
HAVING count(v.vehicleid)>0;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_bank_statement` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_bank_statement`(
  IN statementidParam INT
    , IN transaction_datetimeParam DATETIME
    , IN detailsParam VARCHAR(50)
  , IN remarksParam VARCHAR(50)
  , IN transaction_typeParam TINYINT
  , IN categoryidParam INT
  , IN amountParam DECIMAL(10,2)
  , IN teamid INT
    , IN todaysdate DATETIME
)
BEGIN

  UPDATE bank_statement

  SET transaction_datetime = transaction_datetimeParam
    ,details = detailsParam
    ,remarks = remarksParam
    ,transaction_type = transaction_typeParam
    ,categoryid = categoryidParam
    ,amount = amountParam
    ,updated_by = teamid
    ,updated_on= todaysdate
  WHERE statementid = statementidParam
  AND isdeleted = 0;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_category` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_category`(
  IN categoryidParam INT
    ,IN categoryParam VARCHAR(50)
    ,IN teamid INT
    ,IN todaysdate DATETIME
)
BEGIN
  UPDATE category
  SET category = categoryParam
  , updated_by = teamid
  , updated_on = todaysdate
  WHERE categoryid = categoryidParam
  AND isdeleted = 0;


END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_clients` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_clients`(
	IN clientIdParam INT
	,IN clientNameParam VARCHAR(50)
	,IN emailParam VARCHAR(50)
	,IN phoneParam VARCHAR(15)
	,IN segmentIdParam INT 
	,IN agreementStartParam DATE
	,IN agreementEndParam DATE
	,IN addressParam VARCHAR(250)
	,IN customernNoParam INT
	,IN userIdParam INT 
	,IN isDeletedParam INT
	,IN todaysDate DATETIME
)
BEGIN
	
	UPDATE clients SET
	clientName = clientNameParam
	,email = emailParam
	,phone = phoneParam
	,segmentId = segmentIdParam
	,agreementStart = agreementStartParam
	,agreementEnd = agreementEndParam
	,address = addressParam
	,updatedBy = userIdParam
	,updatedOn  = todaysDate
	,isDeleted = isDeletedParam
	WHERE (clientId  = clientIdParam)
	AND (customerNo = customernNoParam)
	AND isDeleted = 0;
	

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_depot` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_depot`( 
	IN depotcode VARCHAR(20)
	, IN depotname VARCHAR (50)
	, IN zoneid INT
    	, IN did INT
    , IN todaysdate DATETIME
    , IN userid INT
)
BEGIN
	UPDATE depot
    SET  depotcode = depotcode
		, depotname = depotname
        , zoneid = zoneid
		
        , updated_on = todaysdate
        , updated_by = userid
	WHERE depotid = did;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_end_trip` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_end_trip`( 
	IN 	driver_id INT(11)
    , IN tripid INT(11)
	, IN trip_end DATETIME
	, IN end_odometer BIGINT(20)
	, IN end_lat FLOAT
	, IN end_long FLOAT
	, IN updatedby INT(11)
	, IN  updatedon DATETIME
)
BEGIN
	UPDATE trip_driver
	SET 
		 trip_end= trip_end
					, end_odometer= end_odometer
					, end_lat= end_lat 
					, end_long= end_long
					, updatedby = updatedby 
					, updatedon = updatedon
                    
	WHERE driverid = driver_id AND trip_driver_id = tripid ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_factory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_factory`( 
	  IN factorycode VARCHAR (10)
	,IN factoryname VARCHAR (50)
    , IN zoneid INT
	, IN fid INT
	, IN todaysdate DATETIME
    , IN userid INT
	)
BEGIN
	UPDATE factory 
    SET  factorycode = factorycode
	,factoryname = factoryname	
	, zoneid = zoneid
        , updated_on = todaysdate
        , updated_by = userid
	WHERE factoryid = fid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_invoice_payment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_invoice_payment`(
IN invoice_payment_idParam INT,
IN payment_dateParam date,
IN cheque_noParam INT,
IN bank_nameParam VARCHAR(255),
IN bank_branchParam VARCHAR(50),
IN cheque_dateParam date,
IN new_payment_amountParam float,
IN new_tdsParam float,
IN new_unpaid_amountParam float,
IN cheque_statusParam INT,
IN teamidParam INT,
IN updated_onParam datetime,
OUT isExecutedOutParam INT)
BEGIN
DECLARE invoice_amountVar FLOAT;
DECLARE totalPaid_AmountVar FLOAT;
DECLARE invoiceidVar INT;
		DECLARE EXIT HANDLER FOR SQLEXCEPTION
       BEGIN
       /*
           ROLLBACK;
			GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
           @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
           SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
           SELECT @full_error; */
		END;
SET isExecutedOutParam = 0;
UPDATE invoice_payment_mapping
SET  	`paid_amt`=new_payment_amountParam,
		`paymentdate`=payment_dateParam,
		`tds_amt`=new_tdsParam,
        `bad_debts`=new_unpaid_amountParam,
		`cheque_no`=cheque_noParam,
		`cheque_date`=cheque_dateParam,
		`bank_name`=bank_nameParam,
		`bank_branch`=bank_branchParam,
        `cheque_status`=cheque_statusParam,
        `updated_by`=teamidParam,
		`updated_on`=updated_onParam
WHERE `ip_id`=invoice_payment_idParam;

SELECT DISTINCT invoiceid INTO invoiceidVar from invoice_payment_mapping
where ip_id = invoice_payment_idParam; 


SELECT inv_amt INTO invoice_amountVar 
from `invoice` 
where invoiceid = invoiceidVar;



SELECT (sum(ip.paid_amt)+sum(ip.tds_amt)+sum(ip.bad_debts))+(i.paid_amt+i.tds_amt+i.unpaid_amt)
INTO totalPaid_AmountVar
from invoice_payment_mapping ip
INNER JOIN invoice i on i.invoiceid = ip.invoiceid
where i.invoiceid=invoiceidVar; 

IF(totalPaid_AmountVar<invoice_amountVar OR totalPaid_AmountVar>invoice_amountVar)THEN
UPDATE `invoice_payment_mapping`
SET `pending_amt`=(invoice_amountVar-totalPaid_AmountVar)
where ip_id=invoice_payment_idParam; 

UPDATE `invoice`
SET `status`='Pending',
	`pending_amt`=(invoice_amountVar-totalPaid_AmountVar)
where invoiceid=invoiceidVar; 
ELSE
UPDATE `invoice_payment_mapping`
SET `pending_amt`=(invoice_amountVar-totalPaid_AmountVar)
where ip_id=invoice_payment_idParam; 

UPDATE `invoice`
SET `status`='Paid',
	`pending_amt`=(invoice_amountVar-totalPaid_AmountVar)
where invoiceid=invoiceidVar; 
END IF;


SET isExecutedOutParam = 1;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_ledger` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_ledger`( 
      IN ledgeridParam INT
    , IN ledgernameParam VARCHAR(100)
    , IN address1Param VARCHAR(100)
    , IN address2Param VARCHAR(100)
    , IN address3Param VARCHAR(100)
    , IN stateParam VARCHAR(100)
    , IN emailParam VARCHAR(40)
    , IN phoneParam VARCHAR(20)
    , IN pan_noParam VARCHAR(30)
    , IN gst_noParam VARCHAR(30)
    , IN updatedbyParam INT
    , IN updatedonParam DATETIME
    , OUT isexecutedOut TINYINT(2)
)
BEGIN

    DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
            ROLLBACK;
           
            SET isexecutedOut = 0;
	END;
    BEGIN  

        SET isexecutedOut = 0;

        START TRANSACTION;	 
        BEGIN

            UPDATE  ledger 
            SET     ledgername = ledgernameParam
                    , address1 = address1Param 
                    , address2 = address2Param
                    , address3 = address3Param
                    , state_code = stateParam
                    , email = emailParam
                    , phone = phoneParam 
                    , pan_no = pan_noParam
                    , gst_no = gst_noParam
                    , updatedby = updatedbyParam
                    , updatedon = updatedonParam
            WHERE   ledgerid = ledgeridParam 
            AND     isdeleted = 0;

            SET     isexecutedOut = 1;
            
        END;
        COMMIT; 
    
    END;
                
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_maintenance_conditions` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_maintenance_conditions`( 
    IN cond_id INT
    ,IN transtypeid INT
    , IN conditionname varchar(50)
    , IN minval INT
    , IN maxval INT
    , IN custno INT
    , IN todaysdate DATETIME
    , IN userid INT
)
BEGIN
	UPDATE maintenance_conditions
        SET  transactiontypeid = transtypeid
	, conditionname = conditionname
	, minval = minval
	, maxval = maxval
	, customerno = custno
	, updated_on = todaysdate
        , updated_by = userid
	WHERE conditionid = cond_id;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_maintenance_rules` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_maintenance_rules`( 
    IN rid INT
    , IN minvalue varchar(25)
    , IN mvalue varchar(25)
    , IN custno INT
    , IN sequnce INT
    , IN todaysdate DATETIME
    , IN userid INT
)
BEGIN
	UPDATE maintenance_rules
        SET  minval = minvalue
	, maxval = mvalue
	, customerno = custno
	, sequenceno = sequnce
	, updated_on = todaysdate
        , updated_by = userid
	WHERE ruleid = rid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_newforgotpassword` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_newforgotpassword`(
	IN newpwdparam varchar(150)
	, IN userkeyparam VARCHAR(150)
    , IN todaysdate DATETIME
)
BEGIN
	DECLARE tempUserId INT;
    DECLARE tempForgotPwdUserId INT;
    SELECT 	userid
    INTO	tempUserId
    FROM	user
    WHERE	userkey = userkeyparam;
    
	IF (tempUserId IS NOT NULL) THEN
		SELECT 	userid
        INTO	tempForgotPwdUserId
        FROM	forgot_password_request
        WHERE	userid = tempUserId
        AND 	isused = 0
		AND 	isdeleted = 0
        AND 	request_counter <= 3
        AND 	validupto BETWEEN todaysdate AND DATE_ADD(todaysdate,INTERVAL 24 HOUR);
        
        IF (tempForgotPwdUserId IS NOT NULL) THEN
			BEGIN
				UPDATE 	user 
				SET 	chgpwd = 1
						, password = newpwdparam
				WHERE 	userid = tempUserId;

				UPDATE 	forgot_password_request
				SET 	isused = 1
						, updated_on = todaysdate
				WHERE 	userid = tempUserId
				AND 	isdeleted = 0
				AND 	isused = 0;
			END;
        END IF;
	END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_po` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_po`( 
IN poidparam INT
    ,IN pono VARCHAR(30)
    ,IN podate DATE
    ,IN poamount INT
    ,IN poexpiry DATE
    ,IN description VARCHAR(50)
    ,IN customernoparam INT
    ,IN updatedby INT
    ,IN updatedon DATETIME
)
BEGIN
UPDATE po
SET
    pono = pono
    ,podate = podate
    ,poamount = poamount
    ,poexpiry = poexpiry
    ,description = description
    ,updatedby = updatedby
    ,updatedon = updatedon
WHERE 
customerno = customernoparam
AND poid = poidparam
AND isdeleted = 0
;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_role` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_role`( 
    IN roleid INT
    , IN newparentid INT
    , IN rolename varchar(50)
    , IN moduleidparam INT
    , IN custno INT
    , IN todaysdate DATETIME
    , IN userid INT
)
BEGIN
	DECLARE currentparentroleid INT;
	DECLARE childroleid INT;
	
        SELECT  parentroleid 
        INTO    currentparentroleid 
        FROM    role 
        WHERE   id = roleid
        AND     moduleid = moduleidparam
        AND     customerno = custno
        AND     isdeleted = 0;

        SELECT  id 
        INTO    childroleid 
        FROM    role 
        WHERE   parentroleid = newparentid
        AND     moduleid = moduleidparam
        AND     customerno = custno
        AND     isdeleted = 0;

        IF(newparentid = currentparentroleid) THEN
            BEGIN
                /* 
                    Update the current role details
                */
                UPDATE `role`
                SET     parentroleid = newparentid
                        , `role` = rolename
                        , updated_on = todaysdate
                        , updated_by = userid
                WHERE   id = roleid
                AND     moduleid = moduleidparam
                AND     customerno = custno;
            END;
        ELSEIF(roleid IS NOT NULL && roleid != 0) THEN
                    BEGIN
                        /* 
                            Assign current role's parent to current role's child
                        */
                        UPDATE `role`
                        SET     parentroleid = currentparentroleid
                        WHERE   parentroleid = roleid
                        AND     moduleid = moduleidparam
                        AND     customerno = custno;
                        /* 
                            Update the current role details
                        */
                        UPDATE `role`
                        SET     parentroleid = newparentid
                                , `role` = rolename
                                , updated_on = todaysdate
                                , updated_by = userid
                        WHERE   id = roleid
                        AND     moduleid = moduleidparam
                        AND     customerno = custno;
                        /* 
                            Make current role as parent of its passed parent's child 
                        */
                        UPDATE `role`
                        SET     parentroleid = roleid 
                        WHERE   id = childroleid
                        AND     moduleid = moduleidparam
                        AND     customerno = custno;

                        /* Re-sequencing hierarachy*/
                        CALL sequence_role(custno);
                        SELECT custno;
                    END;
        END IF;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_routemaster` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_routemaster`(
	IN rtmasterid INT
    , IN routename VARCHAR(20)
	, IN routedescription VARCHAR(20)
	, IN fromlocationid INT
    , IN tolocationid INT
    , IN distance INT
    , IN travellingtime INT
    , IN todaysdate DATETIME
    , IN userid INT
	)
BEGIN
	UPDATE routemaster
    SET  routename = routename
		,routedescription = routedescription
		, fromlocationid = fromlocationid
        , tolocationid = tolocationid
        , distance = distance
        , travellingtime = travellingtime
		, updated_on = todaysdate
        , updated_by = userid
	WHERE routemasterid = rtmasterid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_sequenceno` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_sequenceno`( 
    IN vehicleid_param INT (11),
    IN sequenceno_param INT(11)
)
BEGIN
update vehicle set sequenceno= sequenceno_param where vehicleid=vehicleid_param;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_shipment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_shipment`(
	IN shipmentIdParam INT,
	IN shipmentNoParam BIGINT ,
	IN pickupDateParam DATE,
	IN pickupAddressParam VARCHAR(100),
	IN pickupPincodeParam INT,
	IN deliveryDateParam DATE,
	IN deliveryAddressParam VARCHAR(100),
	IN deliveryPincodeParam INT,
	IN clientIdParam INT,
	IN awbNoParam VARCHAR(25),
	IN classificationIdParam INT,
	IN vendorIdParam VARCHAR(50),
	IN vehicleIdParam INT,
	IN vehicleNoParam VARCHAR(25),
	IN quantityParam INT,
	IN weightParam DECIMAL(8,3),
	IN volumeParam DECIMAL(8,3),
	IN statusIdParam INT,
	IN remarkIdParam INT,
	IN actualDeliveryDateParam DATE,
	IN pickupQuantityParam DECIMAL(8,2),
	IN pickupWeightParam DECIMAL(8,2),
	IN deliveryQuantityParam DECIMAL(8,2),
	IN deliveryWeightParam DECIMAL(8,2),
	IN billingIdParam INT,
	IN variableIdParam INT,
	IN vehTypeIdParam INT,
	IN commentsParam VARCHAR(200),
	IN customerNoParam int,
    IN todaysdate datetime,
    IN userid int,
	OUT isUpdated INT
)
BEGIN
	DECLARE varVehicleId INT ;
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
	END;
	SET isUpdated = 0;
	START TRANSACTION;
		IF (shipmentIdParam = '' OR shipmentIdParam = 0) THEN
			SET shipmentIdParam = NULL;
		END IF;
		IF (customerNoParam = '' OR customerNoParam = 0) THEN
			SET customerNoParam = NULL;
		END IF;	
		IF(vendorIdParam = 0 OR vendorIdParam = '') THEN
			SET vendorIdParam = NULL;
        END IF;
		
		IF(vehicleIdParam = 0 OR vehicleIdParam = '') THEN
			SET vehicleIdParam = NULL;
        END IF;

		IF(vendorIdParam IS NOT NULL AND vehicleIdParam IS NULL AND vehicleNoParam IS NOT NULL) THEN 
			SELECT vehicleId INTO varVehicleId 
			FROM vehicles
			WHERE trim(vehicleNo) = trim(vehicleNoParam) AND customerNo = customerNoParam AND isDeleted = 0 LIMIT 1;
		
			IF(varVehicleId IS NULL ) THEN 
				INSERT INTO vehicles (
				vehicleNo,
				vendorId,
				customerNo,
				createdBy,
				createdOn
				) VALUES(
				vehicleNoParam,
				vendorId,
				customerNoParam,
				userid,
				todaysdate
				);
				SET varVehicleId = LAST_INSERT_ID();
			
			END IF;
			
		ELSE 
			SET varVehicleId = vehicleIdParam;
		END IF;

		IF (shipmentIdParam IS NOT NULL AND customerNoParam IS NOT NULL) THEN 
			UPDATE shipment SET 
				shipmentNo =shipmentNoParam,
				pickupDate =pickupDateParam,
				pickupAddress =pickupAddressParam,
				pickupPincode =pickupPincodeParam,
				deliveryDate =deliveryDateParam,
				deliveryAddress =deliveryAddressParam,
				deliveryPincode =deliveryPincodeParam,
				clientId =clientIdParam,
				awbNo =awbNoParam,
				classificationId =classificationIdParam,
				vendorId =vendorIdParam,
				vehicleId =varVehicleId,
				quantity =quantityParam,
				weight = weightParam,
				volume = volumeParam,
				statusId = statusIdParam,
				remarkId = remarkIdParam,
				actualDeliveryDate = actualDeliveryDateParam,
				pickupQuantity =  pickupQuantityParam,
				pickupWeight =pickupWeightParam,
				deliveryQuantity =deliveryQuantityParam,
				deliveryWeight =deliveryWeightParam,
				billingType = billingIdParam,
				variableType = variableIdParam,
				vehTypeId = vehTypeIdParam,
				comments = commentsParam,
				updatedBy =userid,
				updatedOn =todaysdate
			WHERE (shipmentId  = shipmentIdParam)
			AND (customerNo = customerNoParam)
			AND isDeleted = 0;

			SET isUpdated = 1;
		END IF;

	COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_sku` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_sku`( 
	IN skuidparam INT
	, IN skucode varchar(100)
	, IN sku_description varchar(250)
	, IN typeid varchar(25)
	, IN volume float (6,2)
	, IN weight float (6,2)
    , IN todaysdate DATETIME
    , IN userid INT
)
BEGIN
	UPDATE sku
	SET 
		skucode = skucode
		, sku_description = sku_description
		, skutypeid = typeid
		, volume = volume
		, weight = weight
		, updated_on = todaysdate
        , updated_by = userid
	WHERE skuid = skuidparam;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_transmitter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_transmitter`( 
    IN transmitteridparam INT
    , IN teamid INT
    , IN trans_status INT
    , IN comments VARCHAR(50)
    , IN customernoparam INT
    , IN updated_on DATETIME
    , IN updated_by INT
)
BEGIN
 UPDATE transmitter SET 	
            teamid = teamid
            ,comments = comments
            ,trans_status = trans_status
            ,updated_on = updated_on
            ,updated_by = updated_by
            ,customerno = customernoparam
  WHERE      transmitterid = transmitteridparam 
	
        ;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_transporter` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_transporter`( 
	IN transportercode VARCHAR(20)
	, IN transportername VARCHAR (50)
    , IN transportermail VARCHAR (150)
    , IN transportermobileno VARCHAR (50)
	, IN tranid INT
    , IN todaysdate DATETIME
    , IN userid INT
)
BEGIN
	UPDATE transporter
    SET  transportercode = transportercode
		, transportername = transportername
        , transportermail = transportermail
		, transportermobileno = transportermobileno
        , updated_on = todaysdate
		, updated_by = userid
	WHERE transporterid = tranid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_transportershare` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_transportershare`(
	IN transhareid INT
    , IN transporterid INT
, IN factoryid INT
	, IN zoneid INT
    , IN sharepercent decimal(6, 2)
    , IN todaysdate DATETIME
    , IN userid INT
	)
BEGIN
	UPDATE transportershare
    SET  transporterid = transporterid
		, factoryid = factoryid
		, zoneid = zoneid
        , sharepercent = sharepercent
		, updated_on = todaysdate
        , updated_by = userid
	WHERE transportershareid = transhareid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_trip_log` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_trip_log`(

    IN vehicleIdParam INT,
    IN checkpointIdParam INT,
    IN etaParam DATETIME,
    IN ataParam DATETIME,
    IN customerNoParam INT,
    IN userIdParam INT,
    IN todaysdate DATETIME
)
BEGIN
    DECLARE varTripId INT;
    DECLARE varVehicleId INT;
    DECLARE varcheckpointId INT;
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
        /*
        GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
        @errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
        SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
        SELECT @full_error;
        */
    END;
    IF (customerNoParam = 0) THEN
        SET customerNoParam = NULL;
    END IF;
    IF (etaParam = '0000-00-00 00:00:00') THEN
        SET etaParam = NULL;
    END IF;
    IF (ataParam = '0000-00-00 00:00:00') THEN
        SET ataParam = NULL;
    END IF;
    /* Get existing Trip ID And Vehicle Id  */
    SELECT  tripId, vehicleId, checkpointId
    INTO    varTripId, varVehicleId, varcheckpointId
    FROM    tripYardLog
    WHERE   customerno = customerNoParam

    AND     vehicleId = vehicleIdParam
    AND     checkpointId = checkpointIdParam
    AND     isProcessed = 0
    AND     isDeleted = 0
    ORDER BY tripYardLogId DESC
    LIMIT 1;

    START TRANSACTION;

    IF (customerNoParam IS NOT NULL AND varTripId IS NOT NULL AND varVehicleId IS NOT NULL AND varcheckpointId IS NOT NULL) THEN
        UPDATE tripYardLog
        SET
            eta = COALESCE(etaParam, eta),
            ata = COALESCE(ataParam, ata),
            updatedOn = todaysdate,
            updatedBy = userIdParam
        WHERE tripId = varTripId
        AND vehicleId = vehicleIdParam
        AND checkpointId = checkpointIdParam
        AND customerNo = customerNoParam
        AND isProcessed = 0
        AND isDeleted = 0;

        IF(ataParam IS NOT NULL )THEN
            UPDATE tripYardLog
            SET
                isProcessed = 1,
                updatedOn = todaysdate,
                updatedBy = userIdParam
            WHERE tripId = varTripId
            AND vehicleId = vehicleIdParam
            AND customerNo = customerNoParam
            AND isProcessed = 0
            AND isDeleted = 0;
        END IF;

    END IF;
    COMMIT;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_user_smslock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_user_smslock`(
    IN todaysdateParam DATETIME
    ,IN customernoParam INT(11)
    ,IN useridParam INT(11)
    ,IN smscountParam INT(11)
    ,IN usersmslockParam INT(11)
     )
BEGIN
    DECLARE smscountVar INT(11);
    DECLARE updatedbyVar INT(11);

    SELECT  `sms_count` 
    INTO    smscountVar 
    FROM    `user` 
    WHERE   userid = useridParam;

    SELECT      updatedby
    INTO        updatedbyVar
    FROM        smslocklog 
    WHERE       userid = useridParam
    ORDER BY    logid DESC
    LIMIT       1;
    
    START TRANSACTION;
    BEGIN

        UPDATE  `user` 
        SET     sms_count = sms_count + smscountParam 
        WHERE   userid = useridParam 
        AND     isdeleted = 0;

        IF smscountVar >= usersmslockParam AND updatedbyVar IS NOT NULL THEN
        BEGIN

            UPDATE  `user` 
            SET     sms_lock = 1 
            WHERE   userid = useridParam;

            INSERT INTO `smslocklog` (`customerno`
                ,`userid`
                ,`vehicleid`
                ,`createdby`
                ,`createdon`)
            VALUES (customernoParam
                ,useridParam
                ,0
                ,0
                ,todaysdateParam);

        END;
        END IF;

    END;
    COMMIT;
    
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_vehicletype` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_vehicletype`( 
	IN vehiclecode VARCHAR(20)
	, IN vehicledescription VARCHAR (50)
	, IN tid INT (11)
    , IN volume decimal
    , IN weight decimal
	, IN vehtypeid INT
    , IN todaysdate DATETIME
    , IN userid INT
)
BEGIN
	UPDATE vehicletype
    SET  vehiclecode = vehiclecode
		, vehicledescription = vehicledescription
		, skutypeid = tid
        , volume = volume
		, weight = weight
        , updated_on = todaysdate
        , updated_by = userid
	WHERE vehicletypeid = vehtypeid;
END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_vehicle_smslock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_vehicle_smslock`(
    IN todaysdateParam DATETIME
    ,IN customernoParam INT(11)
    ,IN vehicleidParam INT(11)
    ,IN smscountParam INT(11)
    ,IN vehsmslockParam INT(11)
     )
BEGIN
    DECLARE smscountVar INT(11);
    DECLARE updatedbyVar INT(11);
    
    SELECT  `sms_count` 
    INTO    smscountVar 
    FROM    `vehicle` 
    WHERE   vehicleid = vehicleidParam;

    SELECT      updatedby
    INTO        updatedbyVar
    FROM        smslocklog 
    WHERE       vehicleid = vehicleidParam
    ORDER BY    logid DESC
    LIMIT       1;

    START TRANSACTION;
    BEGIN

        UPDATE  `vehicle` 
        SET     sms_count = sms_count + smscountParam 
        WHERE   vehicleid = vehicleidParam 
        AND     isdeleted = 0;

        IF smscountVar >= vehsmslockParam AND updatedbyVar IS NOT NULL THEN
        BEGIN

            UPDATE  `vehicle` 
            SET     sms_lock = 1 
            WHERE   vehicleid = vehicleidParam;

            INSERT INTO `smslocklog` (
                `customerno`
                ,`userid`
                ,`vehicleid`
                ,`createdby`
                ,`createdon`)
            VALUES (customernoParam
                ,0
                ,vehicleidParam
                ,0
                ,todaysdateParam);

        END;
        END IF;
    
    END;
    COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_vendor` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `update_vendor`(
	IN vendorIdParam INT,
	IN vendorCodeParam VARCHAR(20) ,
	IN vendorNameParam VARCHAR(50),
	IN contactPersonParam VARCHAR(50),
	IN emailParam VARCHAR(100),
	IN phoneParam VARCHAR(15),
	IN serviceIdParam INT,
	IN serviceCostParam DECIMAL(9,2),
	IN customerNoParam int,
    IN todaysdate datetime,
    IN userid int,
	OUT isUpdated INT
)
BEGIN
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
	END;
	SET isUpdated = 0;
	START TRANSACTION;
		IF (vendorIdParam = '' OR vendorIdParam = 0) THEN
			SET vendorIdParam = NULL;
		END IF;
		IF (customerNoParam = '' OR customerNoParam = 0) THEN
			SET customerNoParam = NULL;
		END IF;	
		
		IF (vendorIdParam IS NOT NULL AND customerNoParam IS NOT NULL) THEN 
			UPDATE vendors SET 
				vendorCode = vendorCodeParam,
				vendorName = vendorNameParam,
				contactPerson = contactPersonParam,
				email = emailParam,
				phone = phoneParam,	
				serviceId = serviceIdParam,
				serviceCost = serviceCostParam,
				updatedBy =userid,
				updatedOn =todaysdate
			WHERE (vendorId  = vendorIdParam)
			AND (customerNo = customerNoParam)
			AND isDeleted = 0;

			SET isUpdated = 1;
		END IF;

	COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `validate_Otp_2WayAuthentication` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `validate_Otp_2WayAuthentication`(
IN `useridParam` INT,
IN `otpParam` INT,
IN `todaysdate` DATETIME,
OUT `validStatus` INT
)
BEGIN
  DECLARE tempUserId INT;

  IF (useridParam IS NOT NULL AND otpParam IS NOT NULL) THEN
    SELECT  userid
        INTO  tempUserId
        FROM  multiauth_request
        WHERE userid = useridParam
        AND   isused = 0
    AND   isdeleted = 0
        AND   request_counter <= 3
        AND   validupto BETWEEN todaysdate AND DATE_ADD(todaysdate,INTERVAL 24 HOUR);

        IF (tempUserId IS NOT NULL ) THEN
      BEGIN
        UPDATE  multiauth_request
        SET   isused = 1
            , updated_on = todaysdate
        WHERE   userid = tempUserId
        AND     otp = otpParam
        AND   isdeleted = 0
        AND   isused = 0;
      END;

      SET validStatus = 1;

    ELSE
      SET validStatus = 0;
        END IF;

  ELSE
    SET validStatus = 0;
  END IF;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `validate_user` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = '' */ ;
DELIMITER ;;
CREATE  PROCEDURE `validate_user`(
	IN userkeyParam BIGINT
)
BEGIN

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		ROLLBACK;
		/*
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE,
		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
		*/
	END;
	
	START TRANSACTION;
		IF (userkeyParam = '' OR userkeyParam = 0) THEN
			SET userkeyParam = NULL;
		END IF;		
		
		IF (userkeyParam IS NOT NULL) THEN 
		

			SELECT 
				u.userId
				,u.customerNo
				,u.roleId	
				,userrole.role
				,u.loginType
				,u.dcId
			FROM user as u
			INNER JOIN role userrole on userrole.roleId = u.roleId
			WHERE (u.userkey  = userkeyParam)
			AND u.isDeleted = 0;			
		END IF;

	COMMIT;

END ;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-08-22 12:45:07
